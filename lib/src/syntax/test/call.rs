use crate::syntax::{
    repr::Repr,
    test::{
        ask,
        call,
        call_list,
        call_map,
        infix,
        list,
        map,
        pair,
        symbol,
    },
};

pub(crate) fn expected() -> Vec<Repr> {
    vec![
        call(symbol("a"), symbol("b")),
        call(symbol("a"), symbol("b")),
        call_list(symbol("a"), vec![]),
        call_list(symbol("a"), vec![]),
        call_map(symbol("a"), vec![]),
        call_map(symbol("a"), vec![]),
        call(symbol("a"), pair(symbol("b"), symbol("c"))),
        call(symbol("a"), pair(symbol("b"), symbol("c"))),
        call(symbol("a"), call(symbol("b"), symbol("c"))),
        call(symbol("a"), call(symbol("b"), symbol("c"))),
        call(symbol("a"), call_list(symbol("b"), vec![])),
        call(symbol("a"), ask(symbol("b"), symbol("c"))),
        call(symbol("a"), infix(symbol("b"), symbol("c"), symbol("d"))),
        call(symbol("a"), call(symbol("b"), symbol("c"))),
        call(symbol("a"), call(symbol("b"), symbol("c"))),
        call(symbol("a"), call_list(symbol("b"), vec![])),
        call(symbol("a"), ask(symbol("b"), symbol("c"))),
        call(symbol("a"), infix(symbol("b"), symbol("c"), symbol("d"))),
        call(list(vec![]), symbol("a")),
        call(list(vec![]), symbol("a")),
        call(map(vec![]), symbol("a")),
        call(map(vec![]), symbol("a")),
        call(pair(symbol("a"), symbol("b")), symbol("c")),
        call(pair(symbol("a"), symbol("b")), symbol("c")),
        call(call(symbol("a"), symbol("b")), symbol("c")),
        call(call(symbol("a"), symbol("b")), symbol("c")),
        call(call_list(symbol("a"), vec![]), symbol("b")),
        call(call_list(symbol("a"), vec![]), symbol("b")),
        call(ask(symbol("a"), symbol("b")), symbol("c")),
        call(ask(symbol("a"), symbol("b")), symbol("c")),
        call(infix(symbol("a"), symbol("b"), symbol("c")), symbol("d")),
        call(infix(symbol("a"), symbol("b"), symbol("c")), symbol("d")),
        call_list(symbol("a"), vec![call_list(symbol("a"), vec![])]),
        call_list(symbol("a"), vec![call_list(symbol("a"), vec![])]),
        call_list(call_list(symbol("a"), vec![]), vec![]),
        call_list(call_list(symbol("a"), vec![]), vec![]),
        call_list(list(vec![]), vec![]),
        call_list(list(vec![]), vec![]),
        call_map(symbol("a"), vec![(
            call_map(symbol("b"), vec![]),
            call_map(symbol("c"), vec![]),
        )]),
        call_map(symbol("a"), vec![(
            call_map(symbol("b"), vec![]),
            call_map(symbol("c"), vec![]),
        )]),
        call_map(call_map(symbol("a"), vec![]), vec![]),
        call_map(call_map(symbol("a"), vec![]), vec![]),
        call_map(map(vec![]), vec![]),
        call_map(map(vec![]), vec![]),
        call_map(call_list(symbol("a"), vec![]), vec![]),
        call_map(call_list(symbol("a"), vec![]), vec![]),
        call_list(call_map(symbol("a"), vec![]), vec![]),
        call_list(call_map(symbol("a"), vec![]), vec![]),
    ]
}
