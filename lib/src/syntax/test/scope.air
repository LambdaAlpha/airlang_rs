empty ctx
-----
(a)
=====
recursive
-----
(((a)))
=====
association
-----
(a b (c d e)) f g
=====
list item
-----
[(a)]
=====
map key
-----
{(a : b) : c}
=====
map value
-----
{a : (b : c)}
=====
left ctx
-----
<(a b c d e)
=====
left ctx + empty ctx
-----
<((a b c d e))
=====
left ctx + list
-----
<([a b c d e])
=====
left ctx + map
-----
<({(a b c d e) : f g h i j})
=====
right ctx
-----
>(a b c d e)
=====
right ctx + empty ctx
-----
>((a b c d e))
=====
right ctx + list
-----
>([a b c d e])
=====
right ctx + map
-----
>({(a b c d e) : f g h i j})
=====
pair ctx
-----
:(a b c d e)
=====
pair ctx two
-----
:(a b)
=====
call ctx
-----
;(a b c d e)
=====
call ctx two
-----
;(a b)
=====
abstract ctx
-----
!(a b c d e)
=====
abstract ctx two
-----
!(a b)
=====
ask ctx
-----
?(a b c d e)
=====
ask ctx two
-----
?(a b)
=====
unary ctx
-----
2(a b c)
=====
unary ctx even
-----
2(a b c d)
=====
unary ctx left
-----
<2(a b c)
=====
unary ctx struct
-----
?2(a b c)
=====
binary ctx
-----
3(a b c d e)
=====
raw one
-----
\r(a)
=====
raw trailing space
-----
\r(a )
=====
raw recursive
-----
\r(\r(a))
=====
raw recursive implicit
-----
\r((a))
=====
raw any tag
-----
\a(b)
=====
raw digit tag
-----
\1(a)
=====
raw multiple
-----
\r(a b)
=====
raw soft keyword
-----
\r(: ; ! ?)
=====
raw empty ctx
-----
\r((a b c) d e)
=====
raw list
-----
\r([a, b,] [])
=====
raw map
-----
\r({a : b} {})
=====
raw map value
-----
\r({a : b c d})
=====
raw map no repeat
-----
\r({a : :})
=====
raw escape
-----
\r(a \(b c) d)
=====
raw escape by direction ctx
-----
\r(<(a b c d e))
=====
raw escape by struct ctx
-----
\r(?(a b c))
=====
ctx composition
-----
!<3(a b c d e)
=====
ctx composition any order
-----
2;>(a b c d e)
=====
ctx composition any length
-----
?<(a b c d e)
=====
pair repeat
-----
a : :
=====
call repeat
-----
a ; :
=====
abstract repeat
-----
a ! :
=====
ask repeat
-----
a ? :
=====
implicit struct repeat
-----
a :
=====
repeat composition
-----
(a b :) c :
=====
repeat composition left ctx
-----
<(a b : c :)
=====
repeat unary ctx
-----
2(a :)
=====
repeat unary pair ctx
-----
2(:(a :))
=====
repeat unary last
-----
2(a b :)
=====
repeat composition unary ctx
-----
2((a :) :)
=====
repeat composition unary left ctx
-----
2<(a : :)
