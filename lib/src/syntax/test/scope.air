empty ctx
-----
(a)
=====
recursive
-----
(((a)))
=====
association
-----
(a b (c d e)) f g
=====
list item
-----
[(a)]
=====
map key
-----
{(a : b) : c}
=====
map value
-----
{a : (b : c)}
=====
left ctx
-----
<(a b c d e)
=====
left ctx + empty ctx
-----
<((a b c d e))
=====
left ctx + list
-----
<([a b c d e])
=====
left ctx + map
-----
<({(a b c d e) : f g h i j})
=====
right ctx
-----
>(a b c d e)
=====
right ctx + empty ctx
-----
>((a b c d e))
=====
right ctx + list
-----
>([a b c d e])
=====
right ctx + map
-----
>({(a b c d e) : f g h i j})
=====
forward ctx
-----
;(a b c d e)
=====
reverse ctx
-----
!(a b c d e)
=====
tag one
-----
;t(a)
=====
tag trailing space
-----
;t(a )
=====
tag recursive
-----
;t(;t(a))
=====
tag recursive implicit
-----
;t((a))
=====
tag any tag
-----
;a(b)
=====
tag multiple
-----
;t(a b)
=====
tag soft keyword
-----
;t(: ; ! ?)
=====
tag empty ctx
-----
;t((a b c) d e)
=====
tag reverse
-----
!t(a)
=====
tag list
-----
;t([a, b,] [])
=====
tag map
-----
;t({a : b} {})
=====
tag map value
-----
;t({a : b c d})
=====
untag by direction ctx
-----
;t(<(a b c d e))
=====
untag by call ctx
-----
;t(!(a b c))
