empty ctx
-----
(a)
=====
recursive
-----
(((a)))
=====
association
-----
(a b (c d e)) f g
=====
list item
-----
[(a)]
=====
map key
-----
{(a : b) : c}
=====
map value
-----
{a : (b : c)}
=====
left ctx
-----
<(a b c d e)
=====
left ctx + empty ctx
-----
<((a b c d e))
=====
left ctx + list
-----
<([a b c d e])
=====
left ctx + map
-----
<({(a b c d e) : f g h i j})
=====
left ctx pair
-----
<(>(a : b c d) e f)
=====
right ctx
-----
>(a b c d e)
=====
right ctx + empty ctx
-----
>((a b c d e))
=====
right ctx + list
-----
>([a b c d e])
=====
right ctx + map
-----
>({(a b c d e) : f g h i j})
=====
call ctx
-----
call(a b c d e)
=====
solve ctx
-----
solve(a b c d e)
=====
solve call
-----
solve(a b call(c d e))
=====
ctx solve call
-----
solve(a ; f call(b c d))
