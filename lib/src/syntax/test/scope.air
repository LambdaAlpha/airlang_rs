empty ctx
-----
(a)
=====
recursive
-----
(((a)))
=====
association
-----
(a b (c d e)) f g
=====
list item
-----
[(a)]
=====
map key
-----
{(a : b) : c}
=====
map value
-----
{a : (b : c)}
=====
left ctx
-----
<(a b c d e)
=====
left ctx + empty ctx
-----
<((a b c d e))
=====
left ctx + list
-----
<([a b c d e])
=====
left ctx + map
-----
<({(a b c d e) : f g h i j})
=====
right ctx
-----
>(a b c d e)
=====
right ctx + empty ctx
-----
>((a b c d e))
=====
right ctx + list
-----
>([a b c d e])
=====
right ctx + map
-----
>({(a b c d e) : f g h i j})
=====
pair ctx
-----
:(a b c d e)
=====
pair ctx two
-----
:(a b)
=====
call ctx
-----
;(a b c d e)
=====
call ctx two
-----
;(a b)
=====
abstract ctx
-----
!(a b c d e)
=====
abstract ctx two
-----
!(a b)
=====
ask ctx
-----
?(a b c d e)
=====
ask ctx two
-----
?(a b)
=====
change ctx
-----
->(a b c d e)
=====
change ctx two
-----
->(a b)
=====
2 ctx
-----
2(a b c)
=====
2 ctx even
-----
2(a b c d)
=====
2 ctx left
-----
<(2(a b c))
=====
3 ctx
-----
3(a b c d e)
=====
tag one
-----
#t(a)
=====
tag trailing space
-----
#t(a )
=====
tag recursive
-----
#t(#t(a))
=====
tag recursive implicit
-----
#t((a))
=====
tag any tag
-----
#a(b)
=====
tag digit tag
-----
#1(a)
=====
tag multiple
-----
#t(a b)
=====
tag soft keyword
-----
#t(: ; ! ?)
=====
tag empty ctx
-----
#t((a b c) d e)
=====
tag struct pair
-----
:(#t(a))
=====
tag struct abstract
-----
!(#t(a))
=====
tag struct ask
-----
?(#t(a))
=====
tag struct change
-----
->(#t(a))
=====
tag list
-----
#t([a, b,] [])
=====
tag map
-----
#t({a : b} {})
=====
tag map value
-----
#t({a : b c d})
=====
tag escape
-----
#t(a #(b c) d)
=====
tag escape by direction ctx
-----
#t(<(a b c d e))
=====
tag escape by struct ctx
-----
#t(?(a b c))
