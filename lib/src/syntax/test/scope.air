empty ctx
-----
(a)
=====
recursive
-----
(((a)))
=====
association
-----
(a b (c d e)) f g
=====
list item
-----
[(a)]
=====
map key
-----
{(a : b) : c}
=====
map value
-----
{a : (b : c)}
=====
left ctx
-----
<(a b c d e)
=====
left ctx + empty ctx
-----
<((a b c d e))
=====
left ctx + list
-----
<([a b c d e])
=====
left ctx + map
-----
<({(a b c d e) : f g h i j})
=====
right ctx
-----
>(a b c d e)
=====
right ctx + empty ctx
-----
>((a b c d e))
=====
right ctx + list
-----
>([a b c d e])
=====
right ctx + map
-----
>({(a b c d e) : f g h i j})
=====
pair ctx
-----
:(a b c d e)
=====
pair ctx two
-----
:(a b)
=====
call ctx
-----
;(a b c d e)
=====
call ctx two
-----
;(a b)
=====
abstract ctx
-----
!(a b c d e)
=====
abstract ctx two
-----
!(a b)
=====
ask ctx
-----
?(a b c d e)
=====
ask ctx two
-----
?(a b)
=====
unary ctx
-----
-(a b c)
=====
unary ctx even
-----
-(a b c d)
=====
unary ctx left
-----
<-(a b c)
=====
unary ctx struct
-----
?-(a b c)
=====
binary ctx
-----
=(a b c d e)
=====
list empty
-----
,[]
=====
list one
-----
,[a]
=====
list multiple
-----
,[a b]
=====
list soft keyword
-----
,[: ; ! ?]
=====
token one
-----
,(a)
=====
token trailing space
-----
,(a )
=====
token multiple
-----
,(a b)
=====
token soft keyword
-----
,(: ; ! ?)
=====
token empty ctx
-----
,((a b c) d e)
=====
token list
-----
,([a, b,] [])
=====
token map
-----
,({a : b} {})
=====
token map value
-----
,({a : b c d})
=====
token map no repeat
-----
,({a : :})
=====
token recover
-----
,(a ,(b c) d)
=====
token recover by direction ctx
-----
,(<(a b c d e))
=====
token recover by struct ctx
-----
,(?(a b c))
=====
ctx composition
-----
!<=(a b c d e)
=====
ctx composition any order
-----
-;>(a b c d e)
=====
ctx composition any length
-----
?<(a b c d e)
=====
pair repeat
-----
a : :
=====
call repeat
-----
a ; :
=====
abstract repeat
-----
a ! :
=====
ask repeat
-----
a ? :
=====
implicit struct repeat
-----
a :
=====
repeat composition
-----
(a b :) c :
=====
repeat composition left ctx
-----
<(a b : c :)
=====
repeat unary ctx
-----
-(a :)
=====
repeat unary pair ctx
-----
-(:(a :))
=====
repeat unary last
-----
-(a b :)
=====
repeat composition unary ctx
-----
-((a :) :)
=====
repeat composition unary left ctx
-----
-<(a : :)
