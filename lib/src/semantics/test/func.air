;[
    f = (function {
        body : input,
    }),
    f (not 't)
]
# ---
'f
# ===
;[
    f = (function {
        body : (('t not) input)
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function {
        body : (not input),
        context : (context {map : {: not}})
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function {
        body : (n a),
        input_name : a,
        context : (context {map : {n : not}})
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function {
        body : input,
        eval_mode : '',
    }),
    f (not 't)
]
# ---
not 't
# ===
;[
    f = (function {
        body : (('t not) input),
        eval_mode : $,
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function {
        body : input,
        eval_mode : `,
    }),
    f (not 't)
]
# ---
not 't
# ===
;[
    f = (function {
        body : input,
        eval_mode : `,
    }),
    f ('t (not 't))
]
# ---
'f
# ===
;[
    f = (function {
        body : input,
        eval_mode : $,
    }),
    f {a : b}
]
# ---
{' : '}
# ===
;[
    f = (function {
        body : input,
        eval_mode : (` : $),
    }),
    a f b
]
# ---
a : '
# ===
;[
    f = (function {
        body : input,
        eval_mode : '',
    }),
    f (not 'f)
]
# ---
not 'f
# ===
;[
    f = (function {
        body : input,
        eval_mode : (symbol ''),
    }),
    f (not 'f)
]
# ---
't
# ===
;[
    f = (function {
        body : input,
        eval_mode : (symbol ''),
    }),
    f a
]
# ---
a
# ===
;[
    a = 1,
    f = (function {
        body : input,
        eval_mode : (symbol ''),
    }),
    f [a]
]
# ---
[1]
# ===
;[
    a = 1,
    f = (function {
        body : input,
        eval_mode : [$, `, ... '', $],
    }),
    f [a, a, a, a, a, a]
]
# ---
[1, a, a, a, a, 1]
# ===
;[
    f = (function {
        body : input,
        eval_mode : (list ''),
    }),
    f [a, b]
]
# ---
[a, b]
# ===
;[
    f = (function {
        body : input,
        eval_mode : (list ''),
    }),
    f (not 'f)
]
# ---
't
# ===
;[
    f = (function {
        body : input,
        eval_mode : (list_items (symbol '')),
    }),
    f [not 't, b]
]
# ---
['f, b]
# ===
;[
    a = 1,
    f = (function {
        body : input,
        eval_mode : {a : $, b : ''},
    }),
    f {a : a, b : a}
]
# ---
{a : 1, b : a}
# ===
;[
    f = (function {
        body : input,
        eval_mode : (map ''),
    }),
    f {a : b}
]
# ---
{a : b}
# ===
;[
    f = (function {
        body : input,
        eval_mode : (map ''),
    }),
    f (not 't)
]
# ---
'f
# ===
;[
    a = 1,
    f = (function {
        body : input,
        eval_mode : (` map_items $),
    }),
    f {: a}
]
# ---
{a : 1}
# ===
;[
    a = 1,
    f = (function {
        body : input,
        eval_mode : (call ($ '')),
    }),
    f (a a)
]
# ---
1 a
# ===
;[
    a = 1,
    f = (function {
        body : input,
        eval_mode : ($ ? ''),
    }),
    f (a ? a)
]
# ---
1 ? a
# ===
;[
    f = (function {
        body : (;[[] set_super caller, $2 input]),
        eval_mode : '',
        caller_access : mutable,
        context : (prelude ')
    }),
    a = 1,
    f a
]
# ---
1
# ===
;[
    a = 1,
    f = (function {
        body : (caller $constant a),
        caller_access : free,
        context : (context {map : {
            : $constant,
        }})
    }),
    f '
]
# ---
'
# ===
;[
    a = 1,
    f = (function {
        body : (caller $constant a),
        caller_access : constant,
        context : (context {map : {
            : $constant,
        }})
    }),
    f '
]
# ---
1
# ===
;[
    a = 1,
    f = (function {
        body : (caller $constant a),
        caller_access : mutable,
        context : (context {map : {
            : $constant,
        }})
    }),
    f '
]
# ---
1
# ===
;[
    a = 1,
    f = (function {
        body : (caller $mutable a),
        caller_access : constant,
        context : (context {map : {
            : $mutable,
        }})
    }),
    f '
]
# ---
1
# ===
;[
    f = (function {
        body : (caller $mutable (('f ('t input)) = 2)),
        eval_mode : '',
        caller_access : mutable,
        context : (context {map : {
            : $mutable,
        }})
    }),
    a = 1,
    f a,
    a
]
# ---
2
# ===
;[
    f = (function {
        body : (caller $mutable (('f ('t input)) = 2)),
        eval_mode : '',
        caller_access : mutable,
        context : (context {map : {
            : $mutable,
        }})
    }),
    a =final 1,
    f a,
    a
]
# ---
1
# ===
;[
    f = (function {
        body : (caller $mutable (('f ('t input)) = 2)),
        eval_mode : '',
        caller_access : constant,
        context : (context {map : {
            : $mutable,
        }})
    }),
    a = 1,
    f a,
    a
]
# ---
1
# ===
function_represent (function {body : input})
# ---
{body : input}
# ===
function_represent not
# ---
{id : not}
# ===
function_represent (function {body : input, caller_access : constant})
# ---
{body : input, caller_access : constant}
# ===
function_represent ==
# ---
{id : ==, caller_access : constant, eval_mode : ((symbol '') : (symbol ''))}
# ===
function_represent (function {
    body : i,
    input_name : i,
    caller_name : c,
    eval_mode : (` : `),
    caller_access : mutable,
})
# ---
{
    body : i,
    input_name : i,
    caller_name : c,
    eval_mode : (` : `),
    caller_access : mutable,
}
# ===
function_caller_access function
# ---
free
# ===
function_caller_access function_caller_access
# ---
constant
# ===
function_caller_access $
# ---
mutable
# ===
;[f = (function {body : input}), function_caller_access f]
# ---
free
# ===
function_eval_mode not
# ---
$
# ===
function_eval_mode $
# ---
''
# ===
function_eval_mode function_eval_mode
# ---
symbol ''
# ===
;[f = (function {body : input}), function_eval_mode f]
# ---
$
# ===
;[
    f = (function {
        body : input,
        eval_mode : ($ : `),
    }),
    function_eval_mode f
]
# ---
$ : `
# ===
;[
    f = (function {
        body : input,
        eval_mode : (symbol ''),
    }),
    function_eval_mode f
]
# ---
symbol ''
# ===
;[
    f = (function {
        body : input,
        eval_mode : (call ($ '')),
    }),
    function_eval_mode f
]
# ---
call ($ '')
# ===
;[
    f = (function {
        body : input,
        eval_mode : [$, `, '', ... $, ''],
    }),
    function_eval_mode f
]
# ---
[$, `, '', ... $, '']
# ===
;[
    f = (function {
        body : input,
        eval_mode : (list ''),
    }),
    function_eval_mode f
]
# ---
list ''
# ===
;[
    f = (function {
        body : input,
        eval_mode : (list_items (symbol '')),
    }),
    function_eval_mode f
]
# ---
list_items (symbol '')
# ===
;[
    f = (function {
        body : input,
        eval_mode : {a : $, b : ''},
    }),
    function_eval_mode f
]
# ---
{a : $, b : ''}
# ===
;[
    f = (function {
        body : input,
        eval_mode : (map ''),
    }),
    function_eval_mode f
]
# ---
map ''
# ===
;[
    f = (function {
        body : input,
        eval_mode : ($ map_items ''),
    }),
    function_eval_mode f
]
# ---
$ map_items ''
# ===
;[
    f = (function {
        body : input,
        eval_mode : ([symbol '', list ''] map_items (list_items (map ''))),
    }),
    function_eval_mode f
]
# ---
[symbol '', list ''] map_items (list_items (map ''))
# ===
function_is_primitive not
# ---
't
# ===
;[f = (function {body : input}), function_is_primitive f]
# ---
'f
# ===
function_id not
# ---
not
# ===
;[neg = not, function_id neg]
# ---
not
# ===
;[f = (function {body : input}), function_id f]
# ---
'
# ===
;[f = (function {body : input}), function_body f]
# ---
input
# ===
function_body not
# ---
'
# ===
;[
    ctx = (context {map : {a : 1}}),
    f = (function {body : input, context : ctx}),
    (function_context f) == ctx
]
# ---
't
# ===
function_context not
# ---
'
# ===
;[f = (function {body : input}), function_input_name f]
# ---
input
# ===
function_input_name not
# ---
'
# ===
;[f = (function {body : input, caller_access : constant}), function_caller_name f]
# ---
caller
# ===
;[f = (function {body : input}), function_caller_name f]
# ---
'
# ===
function_caller_name not
# ---
'
