;[
    f = (function {
        body : input,
    }),
    f (not 't)
]
-----
'f
=====
;[
    f = (function {
        body : (('t not) input)
    }),
    f (not 't)
]
-----
't
=====
;[
    f = (function {
        body : (not input),
        context : (' context {: not})
    }),
    f (not 't)
]
-----
't
=====
;[
    f = (function {
        body : (n a),
        input_name : a,
        context : (' context {n : not})
    }),
    f (not 't)
]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : `0,
    }),
    f (not 't)
]
-----
not 't
=====
;[
    f = (function {
        body : (('t not) input),
        input_mode : `1,
    }),
    f (not 't)
]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : ``,
    }),
    f (not 't)
]
-----
not 't
=====
;[
    f = (function {
        body : input,
        input_mode : ``,
    }),
    f ('t (not 't))
]
-----
'f
=====
;[
    f = (function {
        body : input,
        input_mode : `1,
    }),
    f {a : b}
]
-----
{' : '}
=====
;[
    f = (function {
        body : input,
        input_mode : (`` : `1),
    }),
    a f b
]
-----
a : '
=====
;[
    f = (function {
        body : input,
        input_mode : `0,
    }),
    f (not 'f)
]
-----
not 'f
=====
;[
    f = (function {
        body : input,
        input_mode : (symbol `0),
    }),
    f (not 'f)
]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : (symbol `0),
    }),
    f a
]
-----
a
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : (symbol `0),
    }),
    f [a]
]
-----
[1]
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : [`1, ``, ... `0, `1],
    }),
    f [a, a, a, a, a, a]
]
-----
[1, a, a, a, a, 1]
=====
;[
    f = (function {
        body : input,
        input_mode : (list `0),
    }),
    f [a, b]
]
-----
[a, b]
=====
;[
    f = (function {
        body : input,
        input_mode : (list `0),
    }),
    f (not 'f)
]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : (list_items (symbol `0)),
    }),
    f [not 't, b]
]
-----
['f, b]
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : {a : `1, b : `0},
    }),
    f {a : a, b : a}
]
-----
{a : 1, b : a}
=====
;[
    f = (function {
        body : input,
        input_mode : (map `0),
    }),
    f {a : b}
]
-----
{a : b}
=====
;[
    f = (function {
        body : input,
        input_mode : (map `0),
    }),
    f (not 't)
]
-----
'f
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : (`` map_items `1),
    }),
    f {: a}
]
-----
{a : 1}
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : (call (`1 `0)),
    }),
    f (a a)
]
-----
1 a
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : (`1 ? `0),
    }),
    f (a ? a)
]
-----
1 ? a
=====
;[
    f = (function {
        body : (;[set_meta (' context {super : (`0 caller)}), `2 input]),
        input_mode : `0,
        caller_access : mutable,
        context : (prelude ')
    }),
    a = 1,
    f a
]
-----
1
=====
;[
    a = 1,
    f = (function {
        body : ([caller] .. (`1 a)),
        caller_access : free,
        context : (' context {
            : ..,
            : `1,
        })
    }),
    f '
]
-----
'
=====
;[
    a = 1,
    f = (function {
        body : ([caller] .. (`1 a)),
        caller_access : constant,
        context : (' context {
            : ..,
            : `1,
        })
    }),
    f '
]
-----
1
=====
;[
    a = 1,
    f = (function {
        body : ([caller] .. (`1 a)),
        caller_access : mutable,
        context : (' context {
            : ..,
            : `1,
        })
    }),
    f '
]
-----
1
=====
;[
    a = 1,
    f = (function {
        body : ([caller] .. (`1 a)),
        caller_access : constant,
        context : (' context {
            : ..,
            : `1,
        })
    }),
    f '
]
-----
1
=====
;[
    f = (function {
        body : ([caller] .. (('f ('t input)) = 2)),
        input_mode : `0,
        caller_access : mutable,
        context : (' context {
            : ..,
            : =,
        })
    }),
    a = 1,
    f a,
    a
]
-----
2
=====
;[
    f = (function {
        body : ([caller] .. (('f ('t input)) = 2)),
        input_mode : `0,
        caller_access : mutable,
        context : (' context {
            : ..,
            : =,
        })
    }),
    (a ': final) = 1,
    f a,
    a
]
-----
1
=====
;[
    f = (function {
        body : ([caller] .. (('f ('t input)) = 2)),
        input_mode : `0,
        caller_access : constant,
        context : (' context {
            : ..,
            : =,
        })
    }),
    a = 1,
    f a,
    a
]
-----
1
=====
function_represent (function {body : input})
-----
{body : input}
=====
function_represent not
-----
{id : not}
=====
function_represent (function {body : input, caller_access : constant})
-----
{body : input, caller_access : constant}
=====
function_represent ==
-----
{id : ==, caller_access : constant, input_mode : ((symbol `0) : (symbol `0))}
=====
function_represent (function {
    body : i,
    input_name : i,
    caller_name : c,
    input_mode : (`1 : `1),
    caller_access : mutable,
})
-----
{
    body : i,
    input_name : i,
    caller_name : c,
    input_mode : (`1 : `1),
    caller_access : mutable,
}
=====
function_caller_access function
-----
free
=====
function_caller_access function_caller_access
-----
constant
=====
function_caller_access `1
-----
mutable
=====
;[f = (function {body : input}), function_caller_access f]
-----
free
=====
function_input_mode not
-----
`1
=====
function_input_mode `1
-----
`0
=====
function_input_mode function_input_mode
-----
symbol `0
=====
;[f = (function {body : input}), function_input_mode f]
-----
`1
=====
;[
    f = (function {
        body : input,
        input_mode : (`1 : ``),
    }),
    function_input_mode f
]
-----
`1 : ``
=====
;[
    f = (function {
        body : input,
        input_mode : (symbol `0),
    }),
    function_input_mode f
]
-----
symbol `0
=====
;[
    f = (function {
        body : input,
        input_mode : (call (`1 `0)),
    }),
    function_input_mode f
]
-----
call (`1 `0)
=====
;[
    f = (function {
        body : input,
        input_mode : [`1, ``, `0, ... `1, `0],
    }),
    function_input_mode f
]
-----
[`1, ``, `0, ... `1, `0]
=====
;[
    f = (function {
        body : input,
        input_mode : (list `0),
    }),
    function_input_mode f
]
-----
list `0
=====
;[
    f = (function {
        body : input,
        input_mode : (list_items (symbol `0)),
    }),
    function_input_mode f
]
-----
list_items (symbol `0)
=====
;[
    f = (function {
        body : input,
        input_mode : {a : `1, b : `0},
    }),
    function_input_mode f
]
-----
{a : `1, b : `0}
=====
;[
    f = (function {
        body : input,
        input_mode : (map `0),
    }),
    function_input_mode f
]
-----
map `0
=====
;[
    f = (function {
        body : input,
        input_mode : (`1 map_items `0),
    }),
    function_input_mode f
]
-----
`1 map_items `0
=====
;[
    f = (function {
        body : input,
        input_mode : ([symbol `0, list `0] map_items (list_items (map `0))),
    }),
    function_input_mode f
]
-----
[symbol `0, list `0] map_items (list_items (map `0))
=====
function_is_primitive not
-----
't
=====
;[f = (function {body : input}), function_is_primitive f]
-----
'f
=====
function_id not
-----
not
=====
;[neg = not, function_id neg]
-----
not
=====
;[f = (function {body : input}), function_id f]
-----
'
=====
;[f = (function {body : input}), function_body f]
-----
input
=====
function_body not
-----
'
=====
;[
    ctx = (' context {a : 1}),
    f = (function {body : input, context : ctx}),
    (function_context f) == ctx
]
-----
't
=====
function_context not
-----
'
=====
;[f = (function {body : input}), function_input_name f]
-----
input
=====
function_input_name not
-----
'
=====
;[f = (function {body : input, caller_access : constant}), function_caller_name f]
-----
caller
=====
;[f = (function {body : input}), function_caller_name f]
-----
'
=====
function_caller_name not
-----
'
