't
# ---
't
# ===
(not 't)
# ---
(not 't)
# ===
a
# ---
'u
# ===
;()
# ---
'u
# ===
;(1)
# ---
1
# ===
;(1, 2)
# ---
2
# ===
;(a = 1, a)
# ---
1
# ===
;(a = 1, a = 2)
# ---
1
# ===
;(a = 1, a = 2, a)
# ---
2
# ===
;(a = 1, b = a, b)
# ---
1
# ===
;(air_version_code = 0, air_version_code == 0)
# ---
'f
# ===
;(a = 1, move a)
# ---
1
# ===
;(a = 1, move a, a)
# ---
'u
# ===
not 't
# ---
'f
# ===
not 'f
# ---
't
# ===
't and 'f
# ---
'f
# ===
't and 't
# ---
't
# ===
;('f and ;(a = 1, 't), a)
# ---
'u
# ===
't or 'f
# ---
't
# ===
'f or 'f
# ---
'f
# ===
;('t or ;(a = 1, 'f), a)
# ---
'u
# ===
't == 'f
# ---
'f
# ===
'f == 'f
# ---
't
# ===
1 == 1
# ---
't
# ===
1.0 == 1.0
# ---
't
# ===
(1, 2) == [(1, 2)]
# ---
't
# ===
1 == "a"
# ---
'f
# ===
1 != "a"
# ---
't
# ===
1 != 1
# ---
'f
# ===
if('t, 1, 2)
# ---
1
# ===
if('f, 1, 2)
# ---
2
# ===
if('t, 1)
# ---
1
# ===
if('f, 1)
# ---
'u
# ===
;(if('t, 1, a = 2), a)
# ---
'u
# ===
if('t, if('f, 1, 2), 3)
# ---
2
# ===
;(while('f, a = 1), a)
# ---
'u
# ===
;(
    a = 't,
    while(a, ;(
        a = 'f,
        b = 1
    )),
    b
)
# ---
1
# ===
;(
    a = 'f,
    b = 'f,
    while(not [a and b],
        if(a, b = 't, a = 't)
    ),
    a and b
)
# ---
't
# ===
;(
    a = 'f,
    b = 'f,
    while(not [a and b],
        if(a, ;(
            d = c,
            b = 't
        ), ;(
            c = 1,
            a = 't
        ))
    ),
    d
)
# ---
1
# ===
parse "(1, 2)"
# ---
(1, 2)
# ===
;(a = 1, parse "a")
# ---
a
# ===
parse [stringify (1, 2)]
# ---
(1, 2)
# ===
stringify "1"
# ---
"\"1\""
# ===
val a
# ---
a
# ===
;(a = 1, eval [val a])
# ---
1
# ===
;(
    f = func{
        eval: [n a],
        input_name: a,
        constants: {n: not}
    },
    f 't
)
# ---
'f
# ===
;(
    f = func{
        eval: [n a],
        input_name: a,
        constants: {n: not}
    },
    f [not 't]
)
# ---
't
# ===
;(
    a = 'f,
    f = func{
        eval: [a == b],
        input_name: b,
        constants: {
            ==: ==,
            a: a
        }
    },
    f 't
)
# ---
'f
# ===
;(
    f = func{
        eval: [;(a = 1, eval code)],
        input_eval_mode: val,
        input_name: code,
        constants: {
            ;: ;,
            =: =,
            eval: eval,
        }
    },
    f a
)
# ---
1
# ===
@ [box 1]
# ---
'u
# ===
@ [&im [box 1]]
# ---
1
# ===
;(a = [box 1], [&mut a] =mut 2, @ [&im a])
# ---
2
# ===
@ [im 1]
# ---
1
# ===
@ [&im [&box [im 1]]]
# ---
1
# ===
@ [&im [im 1]]
# ---
1
# ===
@ [&mut [im 1]]
# ---
'u
# ===
@ [mut 1]
# ---
1
# ===
;(a = [im [box 1]], [&mut [@ a]] =mut 2, @ [&im [@ a]])
# ---
2
# ===
@ [&im [&box [mut 1]]]
# ---
1
# ===
@ [&im [mut 1]]
# ---
'u
# ===
@ [&mut [mut 1]]
# ---
'u
