;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    proposition_input p
]
-----
1
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    proposition_output p
]
-----
2
=====
;[
    p = (proposition {
        function : ==,
        input : 1,
        output : 1,
        context : (' context {a : 2}),
    }),
    ctx = (proposition_before p),
    [ctx] .. (`1 a)
]
-----
2
=====
;[
    p = (proposition {
        function : ==,
        input : 1,
        output : 1,
        context : (' context {a : 2}),
    }),
    ctx = (proposition_after p),
    [ctx] .. (`1 a)
]
-----
2
=====
;[
    p = (proposition {
        function : =,
        input : 1,
        output : 1,
        before : (' context {a : 2}),
        after : (' context {a : 3}),
    }),
    ctx = (proposition_before p),
    [ctx] .. (`1 a)
]
-----
2
=====
;[
    p = (proposition {
        function : =,
        input : 1,
        output : 1,
        before : (' context {a : 2}),
        after : (' context {a : 3}),
    }),
    ctx = (proposition_after p),
    [ctx] .. (`1 a)
]
-----
3
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    (proposition_function p) == not
]
-----
't
=====
;[
    $map = (function {
        body : input,
        input_mode : (`0 map_items `1),
    }),
    m = ($map {
        function : not,
        input : 't,
        output : 'f,
    }),
    m == (proposition_represent (proposition m))
]
-----
't
=====
;[
    $map = (function {
        body : input,
        input_mode : (`0 map_items `1),
    }),
    m = ($map {
        function : ==,
        input : 't,
        output : 'f,
        context : (' context {}),
    }),
    m == (proposition_represent (proposition m))
]
-----
't
=====
;[
    $map = (function {
        body : input,
        input_mode : (`0 map_items `1),
    }),
    m = ($map {
        function : =,
        input : 't,
        output : 'f,
        before : (' context {}),
        after : (' context {}),
    }),
    m == (proposition_represent (proposition m))
]
-----
't
=====
;[
    m = (proposition_represent (theorem {
        function : not,
        input : 't,
    })),
    $map = (function {
        body : input,
        input_mode : (`0 map_items `1),
    }),
    expected = ($map {
        function : not,
        input : 't,
        output : 'f,
        truth : 't,
    }),
    m == expected
]
-----
't
=====
;[
    m = (proposition_represent (theorem {
        function : ==,
        input : (1 : 2),
        context : (' context {}),
    })),
    $map = (function {
        body : input,
        input_mode : (`0 map_items `1),
    }),
    expected = ($map {
        function : ==,
        input : (1 : 2),
        output : 'f,
        context : (' context {}),
        truth : 't,
    }),
    m == expected
]
-----
't
=====
;[
    m = (proposition_represent (theorem {
        function : =,
        input : ((`0 a) : 1),
        before : (' context {}),
    })),
    $map = (function {
        body : input,
        input_mode : (`0 map_items `1),
    }),
    expected = ($map {
        function : =,
        input : ((`0 a) : 1),
        output : ',
        before : (' context {}),
        after : (' context {a : 1}),
        truth : 't,
    }),
    m == expected
]
-----
't
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    ((type_of p) == (`0 proposition)) and ((proposition_truth p) == ')
]
-----
't
