;[a = 1, read a]
# ---
1
# ===
;[a = 1, read "a"]
# ---
'
# ===
;[a = 1, b = (val a), read (\ b)]
# ---
1
# ===
is_null a
# ---
't
# ===
;[a = 1, is_null a]
# ---
'f
# ===
;[a = (null_ref '), (\ a) . is_null]
# ---
't
# ===
;[a = (ref 1), (\ a) . is_null]
# ---
'f
# ===
;[a = (null_ref '), (\ a) = 1, eval2 a]
# ---
1
# ===
;[a = (null_ref '), b = (null_ref '), a != b]
# ---
't
# ===
;[a = 1, a]
# ---
1
# ===
;[a = 1, a = 2]
# ---
1
# ===
;[a = 1, a = 2, a]
# ---
2
# ===
;[a = 1, b = a, b]
# ---
1
# ===
;[a = (val b), (\ a) = 1, b]
# ---
1
# ===
;[a = (ref 1), (\ a) = 2, eval2 a]
# ---
2
# ===
;[a = (1 . ref . ref), (\ (eval2 a)) = 2, eval3 a]
# ---
2
# ===
;[a =final 1, a = 2]
# ---
'
# ===
;[a =final 1, a = 2, a]
# ---
1
# ===
;[a =final 1, a =final 2, a]
# ---
1
# ===
;[a =final 1, a =const 2, a]
# ---
1
# ===
;[a =final (1: 2), a set1 3, a]
# ---
3: 2
# ===
;[a = (ref 1), (\ a) =final 2, (\ a) = 3, eval2 a]
# ---
2
# ===
;[a = (ref 1), (\ a) =final (1: 2), (\ a) set1 3, eval2 a]
# ---
3: 2
# ===
;[a =const (1: 2), a set1 3, a]
# ---
1: 2
# ===
;[a =const 1, a = 2, a]
# ---
1
# ===
;[a =const 1, a =final 2, a]
# ---
1
# ===
;[a =const 1, a =const 2, a]
# ---
1
# ===
;[a = (ref 1), (\ a) =const 2, (\ a) = 3, eval2 a]
# ---
2
# ===
;[a = (ref 1), (\ a) =const (1: 2), (\ a) set1 3, eval2 a]
# ---
1: 2
# ===
;[a = 1, final a, a = 2, a]
# ---
1
# ===
;[a = (1: 2), final a, a set1 3, a]
# ---
3: 2
# ===
;[a =const (1: 2), final a, a set1 3, a]
# ---
1: 2
# ===
;[a = (ref 1), final (\ a), (\ a) = 2, eval2 a]
# ---
1
# ===
;[a = (ref (1: 2)), final (\ a), (\ a) set1 3, eval2 a]
# ---
3: 2
# ===
;[a = (const_ref (1: 2)), final (\ a), (\ a) set1 3, eval2 a]
# ---
1: 2
# ===
;[a = (1: 2), const a, a set1 3, a]
# ---
1: 2
# ===
;[a = 1, const a, a = 2, a]
# ---
1
# ===
;[a =final (1: 2), const a, a set1 3, a]
# ---
1: 2
# ===
;[a = (ref (1: 2)), const (\ a), (\ a) set1 3, eval2 a]
# ---
1: 2
# ===
;[a = (ref 1), const (\ a), (\ a) = 2, eval2 a]
# ---
1
# ===
is_final a
# ---
'f
# ===
;[a = 1, is_final a]
# ---
'f
# ===
;[a =final 1, is_final a]
# ---
't
# ===
;[a =const 1, is_final a]
# ---
't
# ===
;[a = (null_ref '), is_final a]
# ---
'f
# ===
;[a = (ref 1), is_final (\ a)]
# ---
'f
# ===
;[a = (final_ref 1), is_final (\ a)]
# ---
't
# ===
;[a = (const_ref 1), is_final (\ a)]
# ---
't
# ===
is_const a
# ---
'f
# ===
;[a = 1, is_const a]
# ---
'f
# ===
;[a =final 1, is_const a]
# ---
'f
# ===
;[a =const 1, is_const a]
# ---
't
# ===
;[a = (null_ref '), is_const a]
# ---
'f
# ===
;[a = (ref 1), is_const (\ a)]
# ---
'f
# ===
;[a = (final_ref 1), is_const (\ a)]
# ---
'f
# ===
;[a = (const_ref 1), is_const (\ a)]
# ---
't
# ===
;[a = (final_ref (1: 2)), const (\ a), (\ a) set1 3, eval2 a]
# ---
1: 2
# ===
;[a = 1, move a]
# ---
1
# ===
;[a = 1, move a, a]
# ---
'
# ===
;[a =final 1, move a]
# ---
'
# ===
;[a =const 1, move a]
# ---
'
# ===
;[a = (val b), b = 1, move (\ a)]
# ---
1
# ===
;[a = (ref 1), move (\ a)]
# ---
1
# ===
;[a = (ref 1), move (\ a), eval2 a]
# ---
'
# ===
;[a = (ref 1), move (\ a), (\ a) = 2, eval2 a]
# ---
2
# ===
;[a = (final_ref 1), move (\ a)]
# ---
'
# ===
;[a = (const_ref 1), move (\ a)]
# ---
'
# ===
;[a = (final_ref 1), (\ a) = 2, eval2 a]
# ---
1
# ===
;[a = (final_ref (1: 2)), (\ a) set1 3, eval2 a]
# ---
3: 2
# ===
;[a = (const_ref (1: 2)), (\ a) set1 3, eval2 a]
# ---
1: 2
# ===
;[a = (const_ref 1), (\ a) = 2, eval2 a]
# ---
1
# ===
;[a = (context {var: {b: 1}}), a eval@ (val b)]
# ---
1
# ===
;[a = (context {var: {b: 1, ;, =}}), a eval@ (val (;[b = 2, b]))]
# ---
2
# ===
;[a = (context {final: {b: 1, ;, =}}), a eval@ (val (;[b = 2, b]))]
# ---
1
# ===
;[a = (context {const: {b: (1: 2), ;, set1}}), a eval@ (val (;[b set1 3, b]))]
# ---
1: 2
# ===
;[a = (context {var: {b: 1}}), self set_super a, b]
# ---
1
# ===
;[a = (context {var: {b: 1}}), b = 2, self set_super a, b]
# ---
2
# ===
;[a = (context {}), self set_super a, b = 1, b: (a eval@ (val b))]
# ---
1: 1
# ===
;[a = (context {}), b = 1, self set_super a, b = 2, b: (a eval@ (val b))]
# ---
2: '
# ===
;[a = (context {var: {b: (1: 2)}}), self set_super a, b set1 3, a eval@ (val b)]
# ---
3: 2
# ===
;[a = (context {var: {b: 1}}), self set_super a, move b: (a eval@ (val b))]
# ---
1: '
# ===
;[a = (context {var: {b: 1}}), b = 2, self set_super a, move b: (a eval@ (val b))]
# ---
2: 1
# ===
;[a = (context {}), self set_super a, b =local 2, b: (a eval@ (val b))]
# ---
2: '
# ===
;[
    a = (context {const: {b: (context {const: {c: 1}})}}),
    a set_super b,
    a eval@ (val c)
]
# ---
1
