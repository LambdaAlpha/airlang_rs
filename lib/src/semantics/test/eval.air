parse "[1, 2]"
# ---
[1, 2]
# ===
;[a = 1, parse "a"]
# ---
a
# ===
parse (stringify [1, 2])
# ---
[1, 2]
# ===
stringify "1"
# ---
"\"1\""
# ===
val a
# ---
a
# ===
eval (not 'f)
# ---
't
# ===
esc [a, f a, a: b, f? a, {a: b}]
# ---
[a, f a, a: b, f? a, {a: b}]
# ===
esc {a: b, c: (' (not 'f))}
# ---
{a: b, c: 't}
# ===
esc [a, b: [' (not 't)]]
# ---
[a, b: ['f]]
# ===
bind {a, ' (not 't): c, not 'f}
# ---
{a: ', 'f: ', not 'f: 't}
# ===
bind {{a: b}: {c: d}}
# ---
{{a: b}: {c: '}}
# ===
bind {' (not 'f): a}
# ---
{'t: '}
# ===
bind [1, {a: b}]
# ---
[1, {a: '}]
# ===
bind {a: (val {b: c})}
# ---
{a: {b: c}}
# ===
bind {a: (eval {b: c})}
# ---
{a: {': '}}
# ===
;[a = 1, eval2 (val a)]
# ---
1
# ===
(val a) eval2 (val b)
# ---
': '
# ===
;[a = 1, eval3 (ref (val a))]
# ---
1
# ===
;[a = (context {const: {=}}), a eval@ (b = 1), a eval@ b]
# ---
1
# ===
;[
    f = (function{
        body: input,
    }),
    f (not 't)
]
# ---
'f
# ===
;[
    f = (function{
        body: ((' not) input)
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function{
        body: (not input),
        context: (' (context {const: {not}}))
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function{
        body: (n a),
        input: a,
        context: (' (context {const: {n: not}}))
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function{
        body: input,
        eval_mode: val,
    }),
    f (not 't)
]
# ---
not 't
# ===
;[
    f = (function{
        body: ((' not) input),
        eval_mode: eval,
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function{
        body: input,
        eval_mode: esc,
    }),
    f (not 't)
]
# ---
not 't
# ===
;[
    f = (function{
        body: input,
        eval_mode: esc,
    }),
    f (' (not 't))
]
# ---
'f
# ===
;[
    f = (function{
        body: input,
        eval_mode: bind,
    }),
    f {a: b}
]
# ---
{a: '}
# ===
;[
    f = (function{
        body: (;[' set_super caller, eval2 input]),
        context_aware: 't,
        context: (' (context {const: {
            ;,
            eval2,
            set_super,
        }}))
    }),
    a = 1,
    f a
]
# ---
1
# ===
;[
    f = (function{
        body: (caller eval@ (((' ') input) = 2)),
        context_aware: 't,
        context: (' (context {const: {
            ;,
            eval@,
        }}))
    }),
    a = 1,
    f a,
    a
]
# ---
2
# ===
't . not
# ---
'f
# ===
't . not . not and 't
# ---
't
