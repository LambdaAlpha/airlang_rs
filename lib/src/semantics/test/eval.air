parse "(1, 2)"
# ---
(1, 2)
# ===
;(a = 1, parse "a")
# ---
a
# ===
parse [stringify (1, 2)]
# ---
(1, 2)
# ===
stringify "1"
# ---
"\"1\""
# ===
$0 a
# ---
a
# ===
$ [not 'f]
# ---
't
# ===
$\ (a, f a, a: b, f? a, {a: b})
# ---
(a, f a, a: b, f? a, {a: b})
# ===
$\ {a: b, c: [\ [not 'f]]}
# ---
{a: b, c: 't}
# ===
$\ (a, b: (\ [not 't]))
# ---
(a, b: ('f))
# ===
;(a = 1, $$ [$0 a])
# ---
1
# ===
[$0 a] $$ [$0 b]
# ---
': '
# ===
;(a = 1, $$$ [ref [$0 a]])
# ---
1
# ===
;(
    f = [function{
        body: [n [c $in a]],
        input: a,
        caller: c,
        const: {n: not, $in}
    }],
    f 't
)
# ---
'f
# ===
;(
    f = [function{
        body: [n [c $in a]],
        input: a,
        caller: c,
        const: {n: not, $in}
    }],
    f [not 't]
)
# ---
't
# ===
;(
    f = [function{
        body: [not [caller $in input]],
        const: {not, $in}
    }],
    f [not 't]
)
# ---
't
# ===
;(
    f = [function{
        body: [[\ not] [caller [\ $in] input]]
    }],
    f [not 't]
)
# ---
't
# ===
;(
    f = [function{
        body: _,
        input: _,
        caller: _,
        const: {}
    }],
    f [not 't]
)
# ---
'
# ===
;(
    a = 'f,
    f = [function{
        body: [a == input],
        const: {
            ==,
            a
        }
    }],
    f 't
)
# ---
'f
# ===
;(
    f = [function{
        body: [;(a = 1, $$ input)],
        const: {
            ;,
            =,
            $$,
        }
    }],
    f a
)
# ---
1
# ===
't . not
# ---
'f
# ===
't . not . not and 't
# ---
't
