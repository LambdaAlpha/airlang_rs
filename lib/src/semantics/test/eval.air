parse "[1, 2]"
# ---
[1, 2]
# ===
;[a = 1, parse "a"]
# ---
a
# ===
parse (stringify [1, 2])
# ---
[1, 2]
# ===
stringify "1"
# ---
"\"1\""
# ===
value a
# ---
a
# ===
eval (not 'f)
# ---
't
# ===
interpolate [a, f a, a: b, f? a, {a: b}]
# ---
[a, f a, a: b, f? a, {a: b}]
# ===
interpolate {a: b, c: (' (not 'f))}
# ---
{a: b, c: 't}
# ===
interpolate [a, b: [' (not 't)]]
# ---
[a, b: ['f]]
# ===
inline a
# ---
a
# ===
inline (eval a)
# ---
'
# ===
inline 1
# ---
1
# ===
inline (not 'f)
# ---
't
# ===
inline [1, a, not 'f]
# ---
[1, a, 't]
# ===
eval {a, not 't: c, value (not 'f): (not 'f)}
# ---
{a: ', 'f: ', not 'f: 't}
# ===
eval {{a: b}: {c: d}}
# ---
{{a: b}: {c: '}}
# ===
eval {not 'f: a}
# ---
{'t: '}
# ===
eval [1, {a: b}]
# ---
[1, {a: '}]
# ===
eval {a: (value {b: c})}
# ---
{a: {b: c}}
# ===
eval {a: (eval {b: c})}
# ---
{a: {b: '}}
# ===
;[a = 1, eval2 (value a)]
# ---
1
# ===
(value a) eval2 (value b)
# ---
': '
# ===
;[a = 1, eval3 (ref (value a))]
# ---
1
# ===
;[a = (context {const: {=}}), a .. (b = 1), a .. b]
# ---
1
# ===
;[a = (context {const: {b: (ref (context {const: {c: 1}}))}}), a .. b .. c]
# ---
1
# ===
;[
    f = (function{
        body: input,
    }),
    f (not 't)
]
# ---
'f
# ===
;[
    f = (function{
        body: ((' not) input)
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function{
        body: (not input),
        context: (' (context {const: {not}}))
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function{
        body: (n a),
        input: a,
        context: (' (context {const: {n: not}}))
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function{
        body: input,
        eval_mode: value,
    }),
    f (not 't)
]
# ---
not 't
# ===
;[
    f = (function{
        body: ((' not) input),
        eval_mode: eval,
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function{
        body: input,
        eval_mode: interpolate,
    }),
    f (not 't)
]
# ---
not 't
# ===
;[
    f = (function{
        body: input,
        eval_mode: interpolate,
    }),
    f (' (not 't))
]
# ---
'f
# ===
;[
    f = (function{
        body: input,
        eval_mode: eval,
    }),
    f {a: b}
]
# ---
{a: '}
# ===
;[
    f = (function{
        body: (;[' set_super (read caller), eval2 input]),
        context_aware: 't,
        context: (' (context {const: {
            ;,
            eval2,
            set_super,
            read,
        }}))
    }),
    a = 1,
    f a
]
# ---
1
# ===
;[
    f = (function{
        body: (caller .. (((' ') input) = 2)),
        context_aware: 't,
        context: (' (context {const: {
            ;,
            ..,
        }}))
    }),
    a = 1,
    f a,
    a
]
# ---
2
# ===
't . not
# ---
'f
# ===
't . not . not and 't
# ---
't
