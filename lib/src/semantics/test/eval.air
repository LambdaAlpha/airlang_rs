value a
# ---
a
# ===
eval (not 'f)
# ---
't
# ===
quote [a, f a, a : b, f ? a, {a : b}]
# ---
[a, f a, a : b, f ? a, {a : b}]
# ===
quote {a : b, c : (' (not 'f))}
# ---
{a : b, c : 't}
# ===
quote [a, b : [' (not 't)]]
# ---
[a, b : ['f]]
# ===
inline a
# ---
a
# ===
inline (eval a)
# ---
'
# ===
inline 1
# ---
1
# ===
inline (not 'f)
# ---
't
# ===
inline [1, a, not 'f]
# ---
[1, a, 't]
# ===
eval {: a, (not 't) : c, (value (not 'f)) : (not 'f)}
# ---
{a, 'f, (not 'f) : 't}
# ===
eval {{a : b} : {c : d}}
# ---
{{a : b} : {c}}
# ===
eval {(not 'f) : a}
# ---
{'t}
# ===
eval [1, {a : b}]
# ---
[1, {a}]
# ===
eval {a : (value {b : c})}
# ---
{a : {b : c}}
# ===
eval {a : (eval {b : c})}
# ---
{a : {b}}
# ===
;[a = 1, eval_2 (value a)]
# ---
1
# ===
(value a) eval_2 (value b)
# ---
: '
# ===
;[a = (value b), b = (value c), c = 1, eval_3 a]
# ---
1
# ===
eval_free (1 (' +) 1)
# ---
2
# ===
;[a = 1, eval_free a]
# ---
'
# ===
eval_free ((' ;) [a (' =) 1, a])
# ---
'
# ===
eval_free ((' get_1) (1 : 2))
# ---
1
# ===
;[(_ : a) = ((context {map : {a : 1, : =}}) eval_mutable (a = 2)), a]
# ---
1
# ===
;[a = (context {map : {: =}}), a eval_mutable (b = 1), load [a, b]]
# ---
1
# ===
;[a =constant (context {map : {b : 1}}), a eval_mutable b]
# ---
1
# ===
;[a =constant (context {map : {b : 1, : =}}), a eval_mutable (b = 2), load [a, b]]
# ---
1
# ===
;[constant = (value constant), (_ : a) = ((context {map : {: =, b : (1 : constant)}}) eval_constant b), a]
# ---
1
# ===
;[constant = (value constant), a = (context {map : {: =, b : (1 : constant)}}), a eval_constant b]
# ---
1
# ===
;[a = (context {map : {: =}}), a eval_constant (b = 1), load [a, b]]
# ---
'
# ===
is_context_free {value : 1}
# ---
't
# ===
is_context_free {value : a}
# ---
'f
# ===
is_context_free {value : a, eval_mode : eval}
# ---
'f
# ===
is_context_free {value : (1 : a)}
# ---
'f
# ===
is_context_free {value : (1 : "a")}
# ---
't
# ===
is_context_free {value : (1 : a), pair_eval_mode : (eval : value)}
# ---
't
# ===
is_context_free {value : [1, a]}
# ---
'f
# ===
is_context_free {value : [1, "a"]}
# ---
't
# ===
is_context_free {value : {a : 1, 1 : a}}
# ---
'f
# ===
is_context_free {value : {a : 1, 1 : "a"}}
# ---
't
# ===
is_context_free {value : {(eval a) : 1, 1 : "a"}}
# ---
'f
# ===
is_context_free {value : (f 1)}
# ---
'f
# ===
is_context_free {value : ((' not) 't)}
# ---
't
# ===
is_context_free {value : ((' not) a)}
# ---
'f
# ===
is_context_free {value : ((' get_1) 1)}
# ---
'f
# ===
is_context_free {value : a, eval_mode : value}
# ---
't
# ===
is_context_free {value : [a, (' not) 't], eval_mode : inline}
# ---
't
# ===
is_context_free {value : [eval a], eval_mode : inline}
# ---
'f
# ===
is_context_free {value : ((' ') a), eval_mode : quote}
# ---
'f
# ===
is_context_free {value : [a, ((' ') 1)], eval_mode : quote}
# ---
't
# ===
is_context_constant {value : a}
# ---
't
# ===
is_context_constant {value : (a : b)}
# ---
't
# ===
is_context_constant {value : (a : (move a))}
# ---
'f
# ===
is_context_constant {value : (a : (move a)), pair_eval_mode : (eval : value)}
# ---
't
# ===
is_context_constant {value : [1, a]}
# ---
't
# ===
is_context_constant {value : [1, move a]}
# ---
'f
# ===
is_context_constant {value : {a : 1, (move a) : a}}
# ---
'f
# ===
is_context_constant {value : {a : 1, a : (move a)}}
# ---
'f
# ===
is_context_constant {value : {a : 1, a : a}}
# ---
't
# ===
is_context_constant {value : (get_1 a)}
# ---
't
# ===
is_context_constant {value : (move a)}
# ---
'f
# ===
is_context_constant {value : (move a), eval_mode : eval}
# ---
'f
# ===
is_context_constant {value : (not (move a))}
# ---
'f
# ===
is_context_constant {value : (; [])}
# ---
'f
# ===
is_context_constant {value : (f (move a))}
# ---
't
# ===
is_context_constant {value : (move a), eval_mode : value}
# ---
't
# ===
is_context_constant {value : ((' move) a), eval_mode : inline}
# ---
'f
# ===
is_context_constant {value : ((' value) a), eval_mode : inline}
# ---
't
# ===
is_context_constant {value : ((' ') (move a)), eval_mode : quote}
# ---
'f
# ===
is_context_constant {value : [move a, (' ') a], eval_mode : quote}
# ---
't
# ===
;[c = (context {map : {move : not}}), is_context_constant {value : (move a), context : c}]
# ---
't
