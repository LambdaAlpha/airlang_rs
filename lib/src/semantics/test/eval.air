value a
# ---
a
# ===
eval (not 'f)
# ---
't
# ===
quote [a, f a, a : b, f ? a, {a : b}]
# ---
[a, f a, a : b, f ? a, {a : b}]
# ===
quote {a : b, c : (' (not 'f))}
# ---
{a : b, c : 't}
# ===
quote [a, b : [' (not 't)]]
# ---
[a, b : ['f]]
# ===
inline a
# ---
a
# ===
inline (eval a)
# ---
'
# ===
inline 1
# ---
1
# ===
inline (not 'f)
# ---
't
# ===
inline [1, a, not 'f]
# ---
[1, a, 't]
# ===
eval {: a, (not 't) : c, (value (not 'f)) : (not 'f)}
# ---
{a, 'f, (not 'f) : 't}
# ===
eval {{a : b} : {c : d}}
# ---
{{a : b} : {c}}
# ===
eval {(not 'f) : a}
# ---
{'t}
# ===
eval [1, {a : b}]
# ---
[1, {a}]
# ===
eval {a : (value {b : c})}
# ---
{a : {b : c}}
# ===
eval {a : (eval {b : c})}
# ---
{a : {b}}
# ===
;[a = 1, eval_2 (value a)]
# ---
1
# ===
(value a) eval_2 (value b)
# ---
: '
# ===
;[a = (value b), b = (value c), c = 1, eval_3 a]
# ---
1
# ===
eval_free (1 (' +) 1)
# ---
2
# ===
;[a = 1, eval_free a]
# ---
'
# ===
eval_free ((' ;) [a (' =) 1, a])
# ---
'
# ===
eval_free ((' get_1) (1 : 2))
# ---
1
# ===
;[(_ : a) = ((context {map : {a : 1, : =}}) eval_mutable (a = 2)), a]
# ---
1
# ===
;[a = (context {map : {: =}}), a eval_mutable (b = 1), load [a, b]]
# ---
1
# ===
;[a =constant (context {map : {b : 1}}), a eval_mutable b]
# ---
1
# ===
;[a =constant (context {map : {b : 1, : =}}), a eval_mutable (b = 2), load [a, b]]
# ---
1
# ===
;[constant = (value constant), (_ : a) = ((context {map : {: =, b : (1 : constant)}}) eval_constant b), a]
# ---
1
# ===
;[constant = (value constant), a = (context {map : {: =, b : (1 : constant)}}), a eval_constant b]
# ---
1
# ===
;[a = (context {map : {: =}}), a eval_constant (b = 1), load [a, b]]
# ---
'
# ===
is_context_free {value : 1}
# ---
't
# ===
is_context_free {value : a}
# ---
'f
# ===
is_context_free {value : a, eval_mode : eval}
# ---
'f
# ===
is_context_free {value : (1 : a)}
# ---
'f
# ===
is_context_free {value : (1 : "a")}
# ---
't
# ===
is_context_free {value : (1 : a), pair_eval_mode : (eval : value)}
# ---
't
# ===
is_context_free {value : [1, a]}
# ---
'f
# ===
is_context_free {value : [1, "a"]}
# ---
't
# ===
is_context_free {value : {a : 1, 1 : a}}
# ---
'f
# ===
is_context_free {value : {a : 1, 1 : "a"}}
# ---
't
# ===
is_context_free {value : {(eval a) : 1, 1 : "a"}}
# ---
'f
# ===
is_context_free {value : (f 1)}
# ---
'f
# ===
is_context_free {value : ((' not) 't)}
# ---
't
# ===
is_context_free {value : ((' not) a)}
# ---
'f
# ===
is_context_free {value : ((' get_1) 1)}
# ---
'f
# ===
is_context_free {value : a, eval_mode : value}
# ---
't
# ===
is_context_free {value : [a, (' not) 't], eval_mode : inline}
# ---
't
# ===
is_context_free {value : [eval a], eval_mode : inline}
# ---
'f
# ===
is_context_free {value : ((' ') a), eval_mode : quote}
# ---
'f
# ===
is_context_free {value : [a, ((' ') 1)], eval_mode : quote}
# ---
't
# ===
is_context_constant {value : a}
# ---
't
# ===
is_context_constant {value : (a : b)}
# ---
't
# ===
is_context_constant {value : (a : (move a))}
# ---
'f
# ===
is_context_constant {value : (a : (move a)), pair_eval_mode : (eval : value)}
# ---
't
# ===
is_context_constant {value : [1, a]}
# ---
't
# ===
is_context_constant {value : [1, move a]}
# ---
'f
# ===
is_context_constant {value : {a : 1, (move a) : a}}
# ---
'f
# ===
is_context_constant {value : {a : 1, a : (move a)}}
# ---
'f
# ===
is_context_constant {value : {a : 1, a : a}}
# ---
't
# ===
is_context_constant {value : (get_1 a)}
# ---
't
# ===
is_context_constant {value : (move a)}
# ---
'f
# ===
is_context_constant {value : (move a), eval_mode : eval}
# ---
'f
# ===
is_context_constant {value : (not (move a))}
# ---
'f
# ===
is_context_constant {value : (; [])}
# ---
'f
# ===
is_context_constant {value : (f (move a))}
# ---
't
# ===
is_context_constant {value : (move a), eval_mode : value}
# ---
't
# ===
is_context_constant {value : ((' move) a), eval_mode : inline}
# ---
'f
# ===
is_context_constant {value : ((' value) a), eval_mode : inline}
# ---
't
# ===
is_context_constant {value : ((' ') (move a)), eval_mode : quote}
# ---
'f
# ===
is_context_constant {value : [move a, (' ') a], eval_mode : quote}
# ---
't
# ===
;[c = (context {map : {move : not}}), is_context_constant {value : (move a), context : c}]
# ---
't
# ===
;[
    f = (function (inline {
        body : input,
    })),
    f (not 't)
]
# ---
'f
# ===
;[
    f = (function (quote {
        body : ((' not) input)
    })),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function {
        body : (value (not input)),
        context : (context {map : {: not}})
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function {
        body : (value (n a)),
        input_name : (value a),
        context : (context {map : {n : not}})
    }),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function (value {
        body : input,
        eval_mode : value,
    })),
    f (not 't)
]
# ---
not 't
# ===
;[
    f = (function (quote {
        body : ((' not) input),
        eval_mode : eval,
    })),
    f (not 't)
]
# ---
't
# ===
;[
    f = (function (value {
        body : input,
        eval_mode : quote,
    })),
    f (not 't)
]
# ---
not 't
# ===
;[
    f = (function (value {
        body : input,
        eval_mode : quote,
    })),
    f (' (not 't))
]
# ---
'f
# ===
;[
    f = (function (value {
        body : input,
        eval_mode : eval,
    })),
    f {a : b}
]
# ---
{a : '}
# ===
;[
    f = (function (value {
        body : input,
        pair_eval_mode : (inline : eval),
    })),
    a f b
]
# ---
a : '
# ===
;[
    f = (function (value {
        body : input,
        pair_eval_mode : (inline : eval),
        eval_mode : value
    })),
    f (not 'f)
]
# ---
not 'f
# ===
;[
    f = (function (quote {
        body : (;[[] set_super caller, eval_2 input]),
        eval_mode : value,
        caller_access : mutable,
        context : (' (context {map : {
            : ;,
            : eval_2,
            : set_super,
            : load,
        }}))
    })),
    a = 1,
    f a
]
# ---
1
# ===
;[
    a = 1,
    f = (function (quote {
        body : (caller eval_constant a),
        caller_access : free,
        context : (' (context {map : {
            : eval_constant,
        }}))
    })),
    f '
]
# ---
'
# ===
;[
    a = 1,
    f = (function (quote {
        body : (caller eval_constant a),
        caller_access : constant,
        context : (' (context {map : {
            : eval_constant,
        }}))
    })),
    f '
]
# ---
1
# ===
;[
    a = 1,
    f = (function (quote {
        body : (caller eval_constant a),
        caller_access : mutable,
        context : (' (context {map : {
            : eval_constant,
        }}))
    })),
    f '
]
# ---
1
# ===
;[
    a = 1,
    f = (function (quote {
        body : (caller eval_mutable a),
        caller_access : constant,
        context : (' (context {map : {
            : eval_mutable,
        }}))
    })),
    f '
]
# ---
1
# ===
;[
    f = (function (quote {
        body : (caller eval_mutable (((' ')input) = 2)),
        eval_mode : value,
        caller_access : mutable,
        context : (' (context {map : {
            : eval_mutable,
        }}))
    })),
    a = 1,
    f a,
    a
]
# ---
2
# ===
;[
    f = (function (quote {
        body : (caller eval_mutable (((' ') input) = 2)),
        eval_mode : value,
        caller_access : mutable,
        context : (' (context {map : {
            : eval_mutable,
        }}))
    })),
    a =final 1,
    f a,
    a
]
# ---
1
# ===
;[
    f = (function (quote {
        body : (caller eval_mutable (((' ') input) = 2)),
        eval_mode : value,
        caller_access : constant,
        context : (' (context {map : {
            : eval_mutable,
        }}))
    })),
    a = 1,
    f a,
    a
]
# ---
1
# ===
function_represent (function (inline {body : input}))
# ---
{body : input}
# ===
function_represent not
# ---
{id : not}
# ===
function_represent (function (value {body : input, caller_access : constant}))
# ---
{body : input, caller_access : constant}
# ===
function_represent ==
# ---
{id : ==, caller_access : constant, eval_mode : value, pair_eval_mode : (inline : inline)}
# ===
function_represent (function (value {
    body : i,
    input_name : i,
    caller_name : c,
    eval_mode : value,
    pair_eval_mode : (inline : quote),
    caller_access : mutable,
}))
# ---
{
    body : i,
    input_name : i,
    caller_name : c,
    eval_mode : value,
    pair_eval_mode : (inline : quote),
    caller_access : mutable,
}
# ===
function_caller_access function
# ---
free
# ===
function_caller_access function_caller_access
# ---
constant
# ===
function_caller_access eval
# ---
mutable
# ===
;[f = (function (value {body : input})), function_caller_access f]
# ---
free
# ===
function_eval_mode not
# ---
eval
# ===
function_eval_mode eval
# ---
value
# ===
function_eval_mode function_eval_mode
# ---
inline
# ===
;[f = (function (value {body : input})), function_eval_mode f]
# ---
eval
# ===
function_pair_eval_mode and
# ---
eval : eval
# ===
function_pair_eval_mode not
# ---
eval : eval
# ===
function_is_primitive not
# ---
't
# ===
;[f = (function (value {body : input})), function_is_primitive f]
# ---
'f
# ===
function_id not
# ---
not
# ===
;[neg = not, function_id neg]
# ---
not
# ===
;[f = (function (value {body : input})), function_id f]
# ---
'
# ===
;[f = (function (value {body : input})), function_body f]
# ---
input
# ===
function_body not
# ---
'
# ===
;[
    ctx = (context {map : {a : 1}}),
    f = (function {body : (value input), context : ctx}),
    (function_context f) == ctx
]
# ---
't
# ===
function_context not
# ---
'
# ===
;[f = (function (value {body : input})), function_input_name f]
# ---
input
# ===
function_input_name not
# ---
'
# ===
;[f = (function (value {body : input, caller_access : constant})), function_caller_name f]
# ---
caller
# ===
;[f = (function (value {body : input})), function_caller_name f]
# ---
'
# ===
function_caller_name not
# ---
'
# ===
't . not
# ---
'f
# ===
't . not . not and 't
# ---
't
