;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    proposition_input p
]
# ---
1
# ===
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    proposition_output p
]
# ---
2
# ===
;[
    p = (proposition {
        function : ==,
        input : 1,
        output : 1,
        context : (context {map : {a : 2}}),
    }),
    ctx = (proposition_before p),
    ctx eval_constant a
]
# ---
2
# ===
;[
    p = (proposition {
        function : ==,
        input : 1,
        output : 1,
        context : (context {map : {a : 2}}),
    }),
    ctx = (proposition_after p),
    ctx eval_constant a
]
# ---
2
# ===
;[
    p = (proposition {
        function : =,
        input : 1,
        output : 1,
        before : (context {map : {a : 2}}),
        after : (context {map : {a : 3}}),
    }),
    ctx = (proposition_before p),
    ctx eval_constant a
]
# ---
2
# ===
;[
    p = (proposition {
        function : =,
        input : 1,
        output : 1,
        before : (context {map : {a : 2}}),
        after : (context {map : {a : 3}}),
    }),
    ctx = (proposition_after p),
    ctx eval_constant a
]
# ---
3
# ===
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    (proposition_function p) == not
]
# ---
't
# ===
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    proposition_input t
]
# ---
't
# ===
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    proposition_output t
]
# ---
'f
# ===
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    (proposition_function t) == not
]
# ---
't
# ===
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    is_true t
]
# ---
't
# ===
;[
    t = (theorem {
        function : eval,
        input : (quote ((' not) 't)),
        context : (context {}),
    }),
    proposition_output t
]
# ---
'f
# ===
;[
    t = (theorem {
        function : ==,
        input : (value (a : b)),
        context : (context {
            map : {
                a : 1,
                b : 2,
            }
        })
    }),
    proposition_output t
]
# ---
'f
# ===
;[
    t = (theorem {
        function : =,
        input : (value (a : 1)),
        context : (context {})
    }),
    ctx = (proposition_before t),
    ctx eval_constant ((' is_null) a)
]
# ---
't
# ===
;[
    t = (theorem {
        function : =,
        input : (value (a : 1)),
        context : (context {})
    }),
    ctx = (proposition_after t),
    ctx eval_constant ((' is_null) a)
]
# ---
'f
# ===
;[
    p = (proposition {
        function : not,
        input : 't,
        output : 'f,
    }),
    t = (prove p),
    is_true t
]
# ---
't
# ===
;[
    p = (proposition {
        function : not,
        input : 't,
        output : 't,
    }),
    t = (prove p),
    is_true t
]
# ---
'f
