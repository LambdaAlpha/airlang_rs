;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    proposition.input t
]
-----
't
=====
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    proposition.output t
]
-----
'f
=====
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    (proposition.function t) -== not
]
-----
't
=====
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    proposition.truth t
]
-----
't
=====
;[
    t = (theorem {
        function : ''t,
        input : ('f (('t not) 't)),
        before : (' context {}),
    }),
    proposition.output t
]
-----
'f
=====
;[
    t = (theorem {
        function : ===,
        input : (' (a : b)),
        context : (' context {
            a : 1,
            b : 2,
        })
    }),
    proposition.output t
]
-----
'f
=====
;[
    t = (theorem {
        function : =,
        input : (' (a : 1)),
        before : (' context {})
    }),
    ctx = (proposition.before t),
    [ctx] do (is_null a)
]
-----
't
=====
;[
    t = (theorem {
        function : =,
        input : (' (a : 1)),
        before : (' context {})
    }),
    ctx = (proposition.after t),
    [ctx] do (is_null a)
]
-----
'f
=====
;[
    p = (proposition {
        function : not,
        input : 't,
        output : 'f,
    }),
    t = (prove p),
    proposition.truth t
]
-----
't
=====
;[
    p = (proposition {
        function : not,
        input : 't,
        output : 't,
    }),
    t = (prove p),
    proposition.truth t
]
-----
'f
