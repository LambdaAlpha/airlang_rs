;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    proposition_input t
]
-----
't
=====
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    proposition_output t
]
-----
'f
=====
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    (proposition_function t) == not
]
-----
't
=====
;[
    t = (theorem {
        function : not,
        input : 't,
    }),
    proposition_truth t
]
-----
't
=====
;[
    t = (theorem {
        function : `,
        input : ('" (('t not) 't)),
        before : (context {}),
    }),
    proposition_output t
]
-----
'f
=====
;[
    t = (theorem {
        function : ==,
        input : ('' (a : b)),
        context : (context {
            map : {
                a : 1,
                b : 2,
            }
        })
    }),
    proposition_output t
]
-----
'f
=====
;[
    t = (theorem {
        function : =,
        input : ('' (a : 1)),
        before : (context {})
    }),
    ctx = (proposition_before t),
    ctx .. (is_null [a])
]
-----
't
=====
;[
    t = (theorem {
        function : =,
        input : ('' (a : 1)),
        before : (context {})
    }),
    ctx = (proposition_after t),
    ctx .. (is_null [a])
]
-----
'f
=====
;[
    p = (proposition {
        function : not,
        input : 't,
        output : 'f,
    }),
    t = (prove p),
    proposition_truth t
]
-----
't
=====
;[
    p = (proposition {
        function : not,
        input : 't,
        output : 't,
    }),
    t = (prove p),
    proposition_truth t
]
-----
'f
