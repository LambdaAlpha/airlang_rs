== true
-----
_ do [a = _ any ., b = a, a == b]
-----
true
=====
any unit
-----
_ do [u = _ any unit, u type .]
-----
unit
=====
any bit
-----
_ do [b = _ any bit, b type .]
-----
bit
=====
any symbol
-----
_ do [s = _ any symbol, s type .]
-----
symbol
=====
any text
-----
_ do [t = _ any text, t type .]
-----
text
=====
any integer
-----
_ do [i = _ any integer, i type .]
-----
integer
=====
any number
-----
_ do [n = _ any number, n type .]
-----
number
=====
any byte
-----
_ do [b = _ any byte, b type .]
-----
byte
=====
any pair
-----
_ do [p = _ any pair, p type .]
-----
pair
=====
any call
-----
_ do [c = _ any call, c type .]
-----
call
=====
any list
-----
_ do [a = _ any list, a type .]
-----
list
=====
any map
-----
_ do [a = _ any map, a type .]
-----
map
=====
any context
-----
_ do [c = _ any context, c type .]
-----
context
=====
any function
-----
_ do [f = _ any function, f type .]
-----
function
=====
type unit
-----
_ do [a = ., a type .]
-----
unit
=====
type bit
-----
_ do [a = true, a type .]
-----
bit
=====
type symbol
-----
_ do [a = .a, a type .]
-----
symbol
=====
type text
-----
_ do [a = "", a type .]
-----
text
=====
type integer
-----
_ do [a = 1, a type .]
-----
integer
=====
type number
-----
_ do [a = 1.0, a type .]
-----
number
=====
type byte
-----
_ do [a = byte(ff), a type .]
-----
byte
=====
type pair
-----
_ do [a = 1 : 2, a type .]
-----
pair
=====
type call
-----
_ do [a = _ id _ f a, a type .]
-----
call
=====
type list
-----
_ do [a = [], a type .]
-----
list
=====
type map
-----
_ do [a = {}, a type .]
-----
map
=====
type context
-----
_ do [a = _ context {}, a type .]
-----
context
=====
type function
-----
_ do [a = _ function {body : @input}, a type .]
-----
function
=====
== unit
-----
. == .
-----
true
=====
== false
-----
true == false
-----
false
=====
== true
-----
false == false
-----
true
=====
== symbol
-----
.a == .a
-----
true
=====
== text
-----
"" == ""
-----
true
=====
== integer
-----
1 == 1
-----
true
=====
== number
-----
1.0 == 1.0
-----
true
=====
== pair
-----
(1 : 2) == (1 : 2)
-----
true
=====
== call
-----
(_ 1 2) == (_ 1 2)
-----
true
=====
== list
-----
[1, 2] == [1, 2]
-----
true
=====
== map
-----
{} == {}
-----
true
=====
== context
-----
_ do [a = _ context {}, b = _ context {}, (a == b) and _ not a == .]
-----
true
=====
== function
-----
_ do [a = _ function {body : @input}, b = _ function {body : @input}, (a == b) and _ not a == .]
-----
true
=====
== eval
-----
(1 + 1) == (3 - 1)
-----
true
=====
== diff type
-----
1 == "a"
-----
false
=====
== ref val
-----
_ do [a = 1, a == 1]
-----
true
=====
== val ref
-----
_ do [a = 1, 1 == a]
-----
true
=====
== ref ref
-----
_ do [a = 1, b = 1, a == b]
-----
true
=====
== same ref
-----
_ do [a = 1, a == a]
-----
true
=====
== null null
-----
a == b
-----
.
=====
== special ref
-----
_ do [.@.a = 1, @.a == 1]
-----
true
=====
== #a
-----
_ do [a = 1, #a == 1]
-----
true
