
-----
do [u = any ; unit, u type .]
-----
unit
=====

-----
do [b = any ; bit, b type .]
-----
bit
=====

-----
do [i = any ; integer, i type .]
-----
integer
=====

-----
do [n = any ; number, n type .]
-----
number
=====

-----
do [b = any ; byte, b type .]
-----
byte
=====

-----
do [s = any ; symbol, s type .]
-----
symbol
=====

-----
do [t = any ; text, t type .]
-----
text
=====

-----
do [p = any ; pair, p type .]
-----
pair
=====

-----
do [c = any ; call, c type .]
-----
call
=====

-----
do [a = any ; ask, a type .]
-----
ask
=====

-----
do [a = any ; abstract, a type .]
-----
abstract
=====

-----
do [c = any ; context, c type .]
-----
context
=====

-----
do [f = any ; function, f type .]
-----
function
=====

-----
do [c = any ; case, c type .]
-----
case
=====

-----
do [e = any ; extension, e type .]
-----
extension
=====

-----
do [a = ., a type .]
-----
unit
=====

-----
do [a = true, a type .]
-----
bit
=====

-----
do [a = 1, a type .]
-----
integer
=====

-----
do [a = 1.0, a type .]
-----
number
=====

-----
do [a = byte(ff), a type .]
-----
byte
=====

-----
do [a = .a, a type .]
-----
symbol
=====

-----
do [a = "", a type .]
-----
text
=====

-----
do [a = 1 : 2, a type .]
-----
pair
=====

-----
do [a = id ; f ; a, a type .]
-----
call
=====

-----
do [a = id ; f ? a, a type .]
-----
ask
=====

-----
do [c = id ; n ! v, c type .]
-----
abstract
=====

-----
do [a = [], a type .]
-----
list
=====

-----
do [a = {}, a type .]
-----
map
=====

-----
do [a = function ; {body : *input}, a type .]
-----
function
=====

-----
do [a = context ; {}, a type .]
-----
context
=====

-----
do [a = case ; {function : not, input : true, output : false}, a type .]
-----
case
=====

-----
do [a = case.cache ; not ; true, a type .]
-----
case
=====

-----
true == false
-----
false
=====

-----
false == false
-----
true
=====

-----
1 == 1
-----
true
=====

-----
1.0 == 1.0
-----
true
=====

-----
..a == ..a
-----
true
=====

-----
"" == ""
-----
true
=====

-----
(1 : 2) == (1 : 2)
-----
true
=====

-----
[1, 2] == [1, 2]
-----
true
=====

-----
{} == {}
-----
true
=====

-----
(1 2) == (1 2)
-----
true
=====

-----
(1 ? 2) == (1 ? 2)
-----
true
=====

-----
do [a = id ; n ; v, b = id ; n ; v, (a == b) and a != .]
-----
true
=====

-----
do [a = function ; {body : *input}, b = function ; {body : *input}, (a == b) and a != .]
-----
true
=====

-----
do [a = context ; {}, b = context ; {}, (a == b) and a != .]
-----
true
=====

-----
do [
    a = case ; {function : not, input : true, output : false},
    b = case ; {function : not, input : true, output : false},
    (a == b) and a != .
]
-----
true
=====

-----
(1 + 1) == (3 - 1)
-----
true
=====

-----
1 == "a"
-----
false
=====

-----
1 != "a"
-----
true
=====

-----
1 != 1
-----
false
=====

-----
do [a = 1, a == 1]
-----
true
=====

-----
do [a = 1, a != 1]
-----
false
=====

-----
do [a = 1, 1 == a]
-----
true
=====

-----
do [a = 1, 1 != a]
-----
false
=====

-----
do [a = 1, b = 1, a == b]
-----
true
=====

-----
do [a = 1, b = 1, a != b]
-----
false
=====

-----
do [a = 1, a == a]
-----
true
=====

-----
do [a = 1, a != a]
-----
false
=====

-----
a == b
-----
.
=====

-----
a != b
-----
.
=====

-----
do [..a = 1, *.a == 1]
-----
true
=====

-----
do [a = 1, ^a == 1]
-----
true
