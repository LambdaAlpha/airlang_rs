== true
-----
do [a = any ; ., b = a, a == b]
-----
true
=====
any unit
-----
do [u = any ; unit, u type .]
-----
unit
=====
any bit
-----
do [b = any ; bit, b type .]
-----
bit
=====
any symbol
-----
do [s = any ; symbol, s type .]
-----
symbol
=====
any text
-----
do [t = any ; text, t type .]
-----
text
=====
any integer
-----
do [i = any ; integer, i type .]
-----
integer
=====
any number
-----
do [n = any ; number, n type .]
-----
number
=====
any byte
-----
do [b = any ; byte, b type .]
-----
byte
=====
any pair
-----
do [p = any ; pair, p type .]
-----
pair
=====
any change
-----
do [a = any ; change, a type .]
-----
change
=====
any call
-----
do [c = any ; call, c type .]
-----
call
=====
any equiv
-----
do [a = any ; equiv, a type .]
-----
equiv
=====
any inverse
-----
do [a = any ; inverse, a type .]
-----
inverse
=====
any list
-----
do [a = any ; list, a type .]
-----
list
=====
any map
-----
do [a = any ; map, a type .]
-----
map
=====
any context
-----
do [c = any ; context, c type .]
-----
context
=====
any function
-----
do [f = any ; function, f type .]
-----
function
=====
any extension
-----
do [e = any ; extension, e type .]
-----
extension
=====
type unit
-----
do [a = ., a type .]
-----
unit
=====
type bit
-----
do [a = true, a type .]
-----
bit
=====
type symbol
-----
do [a = .a, a type .]
-----
symbol
=====
type text
-----
do [a = "", a type .]
-----
text
=====
type integer
-----
do [a = 1, a type .]
-----
integer
=====
type number
-----
do [a = 1.0, a type .]
-----
number
=====
type byte
-----
do [a = byte(ff), a type .]
-----
byte
=====
type pair
-----
do [a = 1 : 2, a type .]
-----
pair
=====
type change
-----
do [a = 1 -> 2, a type .]
-----
change
=====
type call
-----
do [a = id ; f ; a, a type .]
-----
call
=====
type equiv
-----
do [a = id ; ~(f), a type .]
-----
equiv
=====
type inverse
-----
do [a = id ; !(f), a type .]
-----
inverse
=====
type list
-----
do [a = [], a type .]
-----
list
=====
type map
-----
do [a = {}, a type .]
-----
map
=====
type context
-----
do [a = context ; {}, a type .]
-----
context
=====
type function
-----
do [a = function ; {body : *input}, a type .]
-----
function
=====
== unit
-----
. == .
-----
true
=====
== false
-----
true == false
-----
false
=====
== true
-----
false == false
-----
true
=====
== symbol
-----
.a == .a
-----
true
=====
== text
-----
"" == ""
-----
true
=====
== integer
-----
1 == 1
-----
true
=====
== number
-----
1.0 == 1.0
-----
true
=====
== pair
-----
(1 : 2) == (1 : 2)
-----
true
=====
== change
-----
(1 -> 2) == (1 -> 2)
-----
true
=====
== call
-----
(1 ; 2) == (1 ; 2)
-----
true
=====
== equiv
-----
do [a = id ; ~(f), b = id ; ~(f), (a == b) and not ; a == .]
-----
true
=====
== inverse
-----
do [a = id ; !(f), b = id ; !(f), (a == b) and not ; a == .]
-----
true
=====
== list
-----
[1, 2] == [1, 2]
-----
true
=====
== map
-----
{} == {}
-----
true
=====
== context
-----
do [a = context ; {}, b = context ; {}, (a == b) and not ; a == .]
-----
true
=====
== function
-----
do [a = function ; {body : *input}, b = function ; {body : *input}, (a == b) and not ; a == .]
-----
true
=====
== eval
-----
(1 + 1) == (3 - 1)
-----
true
=====
== diff type
-----
1 == "a"
-----
false
=====
== ref val
-----
do [a = 1, a == 1]
-----
true
=====
== val ref
-----
do [a = 1, 1 == a]
-----
true
=====
== ref ref
-----
do [a = 1, b = 1, a == b]
-----
true
=====
== same ref
-----
do [a = 1, a == a]
-----
true
=====
== null null
-----
a == b
-----
.
=====
== special ref
-----
do [..a = 1, *.a == 1]
-----
true
=====
== ^a
-----
do [a = 1, ^a == 1]
-----
true
