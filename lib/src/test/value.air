;[u = (any unit), type_of u]
-----
unit
=====
;[b = (any bool), type_of b]
-----
bool
=====
;[i = (any int), type_of i]
-----
int
=====
;[f = (any float), type_of f]
-----
float
=====
;[b = (any bytes), type_of b]
-----
bytes
=====
;[s = (any symbol), type_of s]
-----
symbol
=====
;[s = (any string), type_of s]
-----
string
=====
;[p = (any pair), type_of p]
-----
pair
=====
;[c = (any call), type_of c]
-----
call
=====
;[r = (any reverse), type_of r]
-----
reverse
=====
;[c = (any context), type_of c]
-----
context
=====
;[f = (any function), type_of f]
-----
function
=====
;[p = (any proposition), type_of p]
-----
proposition
=====
;[a = 'u, type_of a]
-----
unit
=====
;[a = 't, type_of a]
-----
bool
=====
type_of (not 't)
-----
'f : bool
=====
;[a = 1, type_of a]
-----
int
=====
;[a = 1.0, type_of a]
-----
float
=====
;[a = #xff, type_of a]
-----
bytes
=====
;[a = ('u a), type_of a]
-----
symbol
=====
;[a = "", type_of a]
-----
string
=====
;[a = (1 : 2), type_of a]
-----
pair
=====
;[a = ('u (f a)), type_of a]
-----
call
=====
;[a = ('u (f ? a)), type_of a]
-----
reverse
=====
;[a = [], type_of a]
-----
list
=====
;[a = {}, type_of a]
-----
map
=====
;[a = (function {body : input}), type_of a]
-----
function
=====
;[a = ('u context {}), type_of a]
-----
context
=====
;[a = (proposition {function : not, input : 't, output : 'f}), type_of a]
-----
proposition
=====
;[a = (proposition.prove (not 't)), type_of a]
-----
proposition
=====
't -=- 'f
-----
'f
=====
'f -=- 'f
-----
't
=====
1 -=- 1
-----
't
=====
1.0 -=- 1.0
-----
't
=====
('u a) -=- ('u a)
-----
't
=====
"" -=- ""
-----
't
=====
(1 : 2) -=- (1 : 2)
-----
't
=====
[1, 2] -=- [1, 2]
-----
't
=====
{} -=- {}
-----
't
=====
(1 2) -=- (1 2)
-----
't
=====
(1 ? 2) -=- (1 ? 2)
-----
't
=====
;[a = (function {body : input}), b = (function {body : input}), a === b and (a =/- 'u)]
-----
't
=====
;[a = ('u context {}), b = ('u context {}), a === b and (a =/- 'u)]
-----
't
=====
;[
    a = (proposition {function : not, input : 't, output : 'f}),
    b = (proposition {function : not, input : 't, output : 'f}),
    a === b and (a =/- 'u)
]
-----
't
=====
;[
    a = (answer.unverified 1),
    b = (answer.unverified 1),
    a === b and (a =/- 'u)
]
-----
't
=====
(1 + 1) -=- (3 - 1)
-----
't
=====
1 -=- "a"
-----
'f
=====
1 -/- "a"
-----
't
=====
1 -/- 1
-----
'f
=====
;[a = 1, a ==- 1]
-----
't
=====
;[a = 1, a =/- 1]
-----
'f
=====
;[a = 1, 1 -== a]
-----
't
=====
;[a = 1, 1 -/= a]
-----
'f
=====
;[a = 1, b = 1, a === b]
-----
't
=====
;[a = 1, b = 1, a =/= b]
-----
'f
=====
;[a = 1, a === a]
-----
't
=====
;[a = 1, a =/= a]
-----
'f
=====
a === b
-----
'u
=====
a =/= b
-----
'u
