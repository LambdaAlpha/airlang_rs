new
-----
_ do [
    f = _ any .,
    i = _ any .,
    c1 = _ call {function : f, input : i},
    c2 = _ form@ call(_ f i),
    c3 = _ solve {function : f, input : i},
    c4 = _ form@ solve(_ f i),
    (c1 == c2) and (c3 == c4)
]
-----
true
=====
new get
-----
_ do [
    f = _ any .,
    i = _ any .,
    c1 = _ call {function : f, input : i},
    c2 = _ solve {function : f, input : i},
    (f == c1 | task.function .) and (f == c2 | task.function .) and (i == c1 | task.input .) and (i == c2 | task.input .)
]
-----
true
=====
set get
-----
_ do [
    c = _ any task,
    f = _ any .,
    ctx = _ any .,
    i = _ any .,
    c | task.set_function f,
    c | task.set_context ctx,
    c | task.set_input i,
    (f == c | task.function .) and (ctx == c | task.context .) and (i == c | task.input .)
]
-----
true
=====
set return
-----
_ do [
    f1 = _ any .,
    ctx1 = _ any .,
    i1 = _ any .,
    c1 = _ call {function : f1, input : i1},
    c1 | task.set_context ctx1,
    c2 = _ solve {function : f1, input : i1},
    c2 | task.set_context ctx1,
    f2 = c1 | task.set_function _ any .,
    ctx2 = c1 | task.set_context _ any .,
    i2 = c1 | task.set_input _ any .,
    f3 = c2 | task.set_function _ any .,
    ctx3 = c2 | task.set_context _ any .,
    i3 = c2 | task.set_input _ any .,
    (f1 == f2) and (f1 == f3) and (ctx1 == ctx2) and (ctx1 == ctx3) and (i1 == i2) and (i1 == i3)
]
-----
true
=====
is_solve
-----
_ do [
    c1 = _ call {function : _ any ., input : _ any .},
    c2 = _ solve {function : _ any ., input : _ any .},
    (_ not c1 | task.is_solve .) and (c2 | task.is_solve .)
]
-----
true
=====
apply const
-----
_ task.apply _ form@ 1 + 1
-----
2
=====
apply mut
-----
_ do [_ task.apply _ form@ .a = 1, #a]
-----
1
