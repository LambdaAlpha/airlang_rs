id trivial
-----
_ id a
-----
a
=====
id .
-----
_ id .a
-----
.a
=====
id @
-----
_ id @a
-----
@a
=====
id #
-----
_ id #a
-----
#a
=====
form. trivial
-----
_ form. a
-----
a
=====
form. .
-----
_ form. .a
-----
a
=====
form. . special
-----
_ form. .@a
-----
@a
=====
form. @
-----
_ do [a = 1, [_ form. @a, a]]
-----
[1, 1]
=====
form. @ special
-----
_ do [.@.a = 1, [_ form. @.a, @.a]]
-----
[1, 1]
=====
form. #
-----
_ do [a = 1, [_ form. #a, a is_null .]]
-----
[1, true]
=====
form. # special
-----
_ do [.@@a = 1, [_ form. #@a, .@a is_null .]]
-----
[1, true]
=====
form. $
-----
_ do [a = _ id _ not true, _ form. $a]
-----
false
=====
form@ trivial
-----
_ do [a = 1, [_ form@ a, a]]
-----
[1, 1]
=====
form@ .
-----
_ form@ .a
-----
a
=====
form@ @
-----
_ do [a = 1, [_ form@ @a, a]]
-----
[1, 1]
=====
form@ #
-----
_ do [a = 1, [_ form@ #a, a is_null .]]
-----
[1, true]
=====
form@ $
-----
_ do [a = _ id _ not true, _ form@ $a]
-----
false
=====
form# trivial
-----
_ do [a = 1, [_ form# a, a is_null .]]
-----
[1, true]
=====
form# .
-----
_ form# .a
-----
a
=====
form# @
-----
_ do [a = 1, [_ form# @a, a]]
-----
[1, 1]
=====
form# #
-----
_ do [a = 1, [_ form# #a, a is_null .]]
-----
[1, true]
=====
form# $
-----
_ do [a = _ id _ not true, _ form# $a]
-----
false
=====
form$ trivial
-----
_ do [a = _ id _ not true, _ form$ a]
-----
false
=====
form$ .
-----
_ form$ .a
-----
a
=====
form$ @
-----
_ do [a = 1, [_ form$ @a, a]]
-----
[1, 1]
=====
form$ #
-----
_ do [a = 1, [_ form$ #a, a is_null .]]
-----
[1, true]
=====
form$ $
-----
_ do [a = _ id _ not true, _ form$ $a]
-----
false
=====
_ form
-----
_ form. _ a b
-----
_ a b
=====
form primitive
-----
_ form. [a, _ b c]
-----
[a, _ b c]
=====
eval. trivial
-----
_ eval. a
-----
a
=====
eval. .
-----
_ eval. .a
-----
a
=====
eval. @
-----
_ do [a = 1, [_ eval. @a, a]]
-----
[1, 1]
=====
eval. #
-----
_ do [a = 1, [_ eval. #a, a is_null .]]
-----
[1, true]
=====
eval. $
-----
_ do [a = _ id _ not true, _ eval. $a]
-----
false
=====
eval@ trivial
-----
_ do [a = 1, [_ eval@ a, a]]
-----
[1, 1]
=====
eval@ .
-----
_ eval@ .a
-----
a
=====
eval@ @
-----
_ do [a = 1, [_ eval@ @a, a]]
-----
[1, 1]
=====
eval@ #
-----
_ do [a = 1, [_ eval@ #a, a is_null .]]
-----
[1, true]
=====
eval@ $
-----
_ do [a = _ id _ not true, _ eval@ $a]
-----
false
=====
eval# trivial
-----
_ do [a = 1, [_ eval# a, a is_null .]]
-----
[1, true]
=====
eval# .
-----
_ eval# .a
-----
a
=====
eval# @
-----
_ do [a = 1, [_ eval# @a, a]]
-----
[1, 1]
=====
eval# #
-----
_ do [a = 1, [_ eval# #a, a is_null .]]
-----
[1, true]
=====
eval# $
-----
_ do [a = _ id _ not true, _ eval# $a]
-----
false
=====
eval$ trivial
-----
_ do [a = _ id _ not true, _ eval$ a]
-----
false
=====
eval$ .
-----
_ eval$ .a
-----
a
=====
eval$ @
-----
_ do [a = 1, [_ eval$ @a, a]]
-----
[1, 1]
=====
eval$ #
-----
_ do [a = 1, [_ eval$ #a, a is_null .]]
-----
[1, true]
=====
eval$ $
-----
_ do [a = _ id _ not true, _ eval$ $a]
-----
false
=====
mode id
-----
_ do [f = _ mode ., _ f .a]
-----
.a
=====
mode primitive from symbol 1
-----
_ do [f = _ mode form., _ f _ a .b]
-----
_ a b
=====
mode primitive from symbol 2
-----
_ do [f = _ mode eval@, _ f _ not true]
-----
false
=====
mode primitive from symbol 3
-----
_ do [a = 1, f = _ mode form#, [_ f _ a .b, a is_null .]]
-----
[_ 1 b, true]
=====
default mode
-----
_ do [f = _ mode ., _ f _ not true]
-----
_ not true
=====
mode primitive symbol id
-----
_ do [
    f = _ mode {symbol : ., primitive : true},
    _ f [#a]
]
-----
[#a]
=====
mode primitive symbol .
-----
_ do [
    f = _ mode {symbol : .., list : form, primitive : true},
    _ f [.a]
]
-----
[a]
=====
mode primitive symbol @
-----
_ do [
    a = 1,
    f = _ mode {symbol : .@, list : form, primitive : true},
    _ f [a]
]
-----
[1]
=====
mode primitive symbol #
-----
_ do [
    a = 1,
    f = _ mode {symbol : .#, list : form, primitive : true},
    [_ f [a], a is_null .]
]
-----
[[1], true]
=====
mode primitive symbol $
-----
_ do [
    a = _ id _ not true,
    f = _ mode {symbol : .$, list : form, primitive : true},
    _ f [a]
]
-----
[false]
=====
mode primitive pair id
-----
_ do [
    b = 1,
    f = _ mode {pair : ., list : form, primitive : true},
    _ f [.a : b]
]
-----
[.a : b]
=====
mode primitive pair form
-----
_ do [
    b = 1,
    f = _ mode {pair : form, list : form, symbol : .@, primitive : true},
    _ f [.a : b]
]
-----
[a : 1]
=====
mode primitive call id
-----
_ do [
    f = _ mode {call : ., list : form, primitive : true},
    _ f [_ .a #b]
]
-----
[_ .a #b]
=====
mode primitive call form
-----
_ do [
    b = 1,
    f = _ mode {call : form, list : form, symbol : .@, primitive : true},
    _ f [_ .a b]
]
-----
[_ a 1]
=====
mode primitive call eval
-----
_ do [
    f = _ mode {call : eval, list : form, primitive : true},
    _ f [_ not true]
]
-----
[false]
=====
mode primitive list id
-----
_ do [
    f = _ mode {list : ., symbol : .@, primitive : true},
    _ f [a, .a, @a, #a]
]
-----
[a, .a, @a, #a]
=====
mode primitive list form
-----
_ do [
    a = 1,
    f = _ mode {list : form, symbol : .@, primitive : true},
    _ f [a, .a, @a, #a]
]
-----
[1, a, 1, 1]
=====
mode primitive map id
-----
_ do [
    a = 1,
    c = 2,
    f = _ mode {map : ., symbol : .@, primitive : true},
    _ f {.a : @a, #b : .a, c : d}
]
-----
{.a : @a, #b : .a, c : d}
=====
mode primitive map form
-----
_ do [
    a = 1,
    b = 2,
    c = 3,
    f = _ mode {map : form, symbol : .@, primitive : true},
    _ f {.a : a, b : .a, @c : .d}
]
-----
{a : 1, 2 : a, 3 : d}
=====
mode primitive multiple
-----
_ do [
    f = _ mode {symbol : ., call : form, list : form, primitive : true},
    _ f [.a, _ .b .c]
]
-----
[.a, _ .b .c]
=====
mode symbol .
-----
_ do [
    a = 1,
    f = _ mode {symbol : .., list : form@},
    [_ f a, _ f [a]]
]
-----
[a, [1]]
=====
mode symbol @
-----
_ do [
    a = 1,
    f = _ mode {symbol : .@, list : form.},
    [_ f a, _ f [a]]
]
-----
[1, [a]]
=====
mode pair primitive
-----
_ do [
    f = _ mode {pair : form.},
    a f .b
]
-----
a : b
=====
mode composite
-----
_ do [
    f = _ mode {pair : form. : {pair : .}},
    _ f a : .b : _ @c #d
]
-----
a : .b : _ @c #d
=====
mode multiple
-----
_ do [
    c = 1,
    d = 2,
    f = _ mode {pair : form. : {pair : form.}},
    _ f a : .b : _ @c #d
]
-----
a : b : _ 1 2
=====
mode call form
-----
_ do [
    f = _ mode {call : {this : . : {}, that : . : {symbol : ..}} : . | eval@ eval@},
    [_ f _ this .a, _ f _ that .a, _ f _ .other _ not true]
]
-----
[_ this .a, _ that a, _ other false]
=====
mode func
-----
_ do [
    f = _ mode @not,
    _ f true
]
-----
false
=====
mode func setup forward
-----
_ do [
    m = _ mode @not,
    f = _ function {forward_setup : #m, code : (._ : .i) : .i},
    _ f true
]
-----
false
=====
mode access free
-----
id | function.context_access .
-----
free
=====
mode access const
-----
_ do [f = _ mode @read, f | function.context_access .]
-----
constant
=====
mode access mutable
-----
eval@ | function.context_access .
-----
mutable
