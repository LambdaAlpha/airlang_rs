form trivial
-----
_ form a
-----
a
=====
form .
-----
_ form .a
-----
.a
=====
form @
-----
_ form @a
-----
@a
=====
form. trivial
-----
_ form. a
-----
a
=====
form. .
-----
_ form. .a
-----
a
=====
form. . special
-----
_ form. .@a
-----
@a
=====
form. @
-----
_ do [a = 1, [_ form. @a, a]]
-----
[1, 1]
=====
form. @ special
-----
_ do [..a = 1, [_ form. @.a, @.a]]
-----
[1, 1]
=====
form. $
-----
_ do [a = _ form _ not true, _ form. $a]
-----
false
=====
form@ trivial
-----
_ do [a = 1, [_ form@ a, a]]
-----
[1, 1]
=====
form@ .
-----
_ form@ .a
-----
a
=====
form@ @
-----
_ do [a = 1, [_ form@ @a, a]]
-----
[1, 1]
=====
form@ $
-----
_ do [a = _ form _ not true, _ form@ $a]
-----
false
=====
form$ trivial
-----
_ do [a = _ form _ not true, _ form$ a]
-----
false
=====
form$ .
-----
_ form$ .a
-----
a
=====
form$ @
-----
_ do [a = 1, [_ form$ @a, a]]
-----
[1, 1]
=====
form$ $
-----
_ do [a = _ form _ not true, _ form$ $a]
-----
false
=====
eval task
-----
_ do [a = _ form@ _ eval _ not true, $a]
-----
false
=====
eval symbol
-----
_ eval $a
-----
$a
=====
eval. trivial
-----
_ eval. a
-----
a
=====
eval. .
-----
_ eval. .a
-----
a
=====
eval. @
-----
_ do [a = 1, [_ eval. @a, a]]
-----
[1, 1]
=====
eval. $
-----
_ do [a = _ form _ not true, _ eval. $a]
-----
false
=====
eval@ trivial
-----
_ do [a = 1, [_ eval@ a, a]]
-----
[1, 1]
=====
eval@ .
-----
_ eval@ .a
-----
a
=====
eval@ @
-----
_ do [a = 1, [_ eval@ @a, a]]
-----
[1, 1]
=====
eval@ $
-----
_ do [a = _ form _ not true, _ eval@ $a]
-----
false
=====
eval$ trivial
-----
_ do [a = _ form _ not true, _ eval$ a]
-----
false
=====
eval$ .
-----
_ eval$ .a
-----
a
=====
eval$ @
-----
_ do [a = 1, [_ eval$ @a, a]]
-----
[1, 1]
=====
eval$ $
-----
_ do [a = _ form _ not true, _ eval$ $a]
-----
false
=====
mode form
-----
_ do [f = _ mode ., _ f .a]
-----
.a
=====
mode primitive from symbol 1
-----
_ do [f = _ mode form., _ f _ a .b]
-----
_ a b
=====
mode primitive from symbol 2
-----
_ do [f = _ mode eval@, _ f _ not true]
-----
false
=====
default mode
-----
_ do [f = _ mode ., _ f _ not true]
-----
_ not true
=====
mode primitive form
-----
_ do [
    f = _ mode {default : form},
    _ f [@a, _ f a]
]
-----
[@a, _ f a]
=====
mode primitive form.
-----
_ do [
    f = _ mode {default : form.},
    _ f [.a, _ f a]
]
-----
[a, _ f a]
=====
mode primitive form@
-----
_ do [
    a = 1,
    f = _ mode {default : form@},
    _ f [a, _ .a a]
]
-----
[1, _ a 1]
=====
mode primitive form$
-----
_ do [
    a = _ form _ not true,
    f = _ mode {default : form$},
    _ f [a, _ .a a]
]
-----
[false, _ a false]
=====
mode primitive eval
-----
_ do [
    f = _ mode {default : eval},
    b = _ form@ _ f [.a, _ not true],
    $b
]
-----
[a, false]
=====
mode primitive eval.
-----
_ do [
    f = _ mode {default : eval.},
    _ f [a, _ @not true]
]
-----
[a, false]
=====
mode primitive eval@
-----
_ do [
    a = 1,
    f = _ mode {default : eval@},
    _ f [a, _ not true]
]
-----
[1, false]
=====
mode primitive eval$
-----
_ do [
    a = _ form _ not true,
    f = _ mode {default : eval$},
    _ f [a, _ @not true]
]
-----
[false, false]
=====
mode pair some
-----
_ do [
    f = _ mode {pair : {this : {}, that : form.} : eval@ : {pair : .}},
    [_ f this : _ not true, _ f that : a, _ f (_ not true) : @a : $b] 
]
-----
[this : _ not true, that : a, false : @a : $b]
=====
mode multiple
-----
_ do [
    c = 1,
    d = 2,
    f = _ mode {pair : {} : form. : {pair : form.}},
    _ f a : .b : _ @c $d
]
-----
a : b : _ 1 2
=====
mode task
-----
_ do [
    f = _ mode {task : . ; eval@ eval@},
    _ f _ .g _ not true
]
-----
_ g false
=====
mode list list
-----
_ do [
    f = _ mode {list : [form, eval.]},
    _ f [_ not true, _ @not true, _ .not true]
]
-----
[_ not true, false, _ .not true]
=====
mode list head tail
-----
_ do [
    f = _ mode {list : [form, eval.] : form.},
    _ f [_ not true, _ @not true, _ .not true]
]
-----
[_ not true, false, _ not true]
=====
mode map map
-----
_ do [
    f = _ mode {map : {a : form, b : eval.}},
    _ f {a : _ not true, b : _ @not true, c : _ .not true}
]
-----
{a : _ not true, b : false, c : _ .not true}
=====
mode map some else
-----
_ do [
    f = _ mode {map : {a : form, b : eval.} : form.},
    _ f {a : _ not true, b : _ @not true, c : _ .not true}
]
-----
{a : _ not true, b : false, c : _ not true}
=====
mode func
-----
_ do [
    f = _ mode @not,
    _ f true
]
-----
false
=====
mode func setup call
-----
_ do [
    f = _ function {call_setup : _ mode @not, code : (._ : .i) : .i},
    _ f true
]
-----
false
=====
mode access free
-----
form ; function.context_access .
-----
free
=====
mode access const
-----
_ do [f = _ mode @read, f ; function.context_access .]
-----
constant
=====
mode access mutable
-----
eval@ ; function.context_access .
-----
mutable
