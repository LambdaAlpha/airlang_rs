id trivial
-----
; id a
-----
a
=====
id .
-----
; id .a
-----
.a
=====
id @
-----
; id @a
-----
@a
=====
id #
-----
; id #a
-----
#a
=====
form. trivial
-----
; form. a
-----
a
=====
form. .
-----
; form. .a
-----
a
=====
form. . special
-----
; form. .@a
-----
@a
=====
form. @
-----
; do [a = 1, [; form. @a, a]]
-----
[1, 1]
=====
form. @ special
-----
; do [.@.a = 1, [; form. @.a, @.a]]
-----
[1, 1]
=====
form. #
-----
; do [a = 1, [; form. #a, a is_null .]]
-----
[1, true]
=====
form. # special
-----
; do [.@@a = 1, [; form. #@a, .@a is_null .]]
-----
[1, true]
=====
form@ trivial
-----
; do [a = 1, [; form@ a, a]]
-----
[1, 1]
=====
form@ .
-----
; form@ .a
-----
a
=====
form@ @
-----
; do [a = 1, [; form@ @a, a]]
-----
[1, 1]
=====
form@ #
-----
; do [a = 1, [; form@ #a, a is_null .]]
-----
[1, true]
=====
form# trivial
-----
; do [a = 1, [; form# a, a is_null .]]
-----
[1, true]
=====
form# .
-----
; form# .a
-----
a
=====
form# @
-----
; do [a = 1, [; form# @a, a]]
-----
[1, 1]
=====
form# #
-----
; do [a = 1, [; form# #a, a is_null .]]
-----
[1, true]
=====
; form
-----
; form. ; a b
-----
; a b
=====
form primitive
-----
; form. [a, ; b c]
-----
[a, ; b c]
=====
eval. trivial
-----
; eval. a
-----
a
=====
eval. .
-----
; eval. .a
-----
a
=====
eval. @
-----
; do [a = 1, [; eval. @a, a]]
-----
[1, 1]
=====
eval. #
-----
; do [a = 1, [; eval. #a, a is_null .]]
-----
[1, true]
=====
eval@ trivial
-----
; do [a = 1, [; eval@ a, a]]
-----
[1, 1]
=====
eval@ .
-----
; eval@ .a
-----
a
=====
eval@ @
-----
; do [a = 1, [; eval@ @a, a]]
-----
[1, 1]
=====
eval@ #
-----
; do [a = 1, [; eval@ #a, a is_null .]]
-----
[1, true]
=====
eval# trivial
-----
; do [a = 1, [; eval# a, a is_null .]]
-----
[1, true]
=====
eval# .
-----
; eval# .a
-----
a
=====
eval# @
-----
; do [a = 1, [; eval# @a, a]]
-----
[1, 1]
=====
eval# #
-----
; do [a = 1, [; eval# #a, a is_null .]]
-----
[1, true]
=====
mode id
-----
; do [f = ; mode ., ; f .a]
-----
.a
=====
mode primitive from symbol 1
-----
; do [f = ; mode form., ; f ; a .b]
-----
; a b
=====
mode primitive from symbol 2
-----
; do [f = ; mode eval@, ; f ; not true]
-----
false
=====
mode primitive from symbol 3
-----
; do [a = 1, f = ; mode form#, [; f ; a .b, a is_null .]]
-----
[; 1 b, true]
=====
default mode
-----
; do [f = ; mode ., ; f ; not true]
-----
; not true
=====
mode primitive symbol id
-----
; do [
    f = ; mode {symbol : ., primitive : true},
    ; f [#a]
]
-----
[#a]
=====
mode primitive symbol .
-----
; do [
    f = ; mode {symbol : .., list : form, primitive : true},
    ; f [.a]
]
-----
[a]
=====
mode primitive symbol @
-----
; do [
    a = 1,
    f = ; mode {symbol : .@, list : form, primitive : true},
    ; f [a]
]
-----
[1]
=====
mode primitive symbol #
-----
; do [
    a = 1,
    f = ; mode {symbol : .#, list : form, primitive : true},
    [; f [a], a is_null .]
]
-----
[[1], true]
=====
mode primitive pair id
-----
; do [
    b = 1,
    f = ; mode {pair : ., list : form, primitive : true},
    ; f [.a : b]
]
-----
[.a : b]
=====
mode primitive pair form
-----
; do [
    b = 1,
    f = ; mode {pair : form, list : form, symbol : .@, primitive : true},
    ; f [.a : b]
]
-----
[a : 1]
=====
mode primitive call id
-----
; do [
    f = ; mode {call : ., list : form, primitive : true},
    ; f [; .a #b]
]
-----
[; .a #b]
=====
mode primitive call form
-----
; do [
    b = 1,
    f = ; mode {call : form, list : form, symbol : .@, primitive : true},
    ; f [; .a b]
]
-----
[; a 1]
=====
mode primitive call eval
-----
; do [
    f = ; mode {call : eval, list : form, primitive : true},
    ; f [; not true]
]
-----
[false]
=====
mode primitive list id
-----
; do [
    f = ; mode {list : ., symbol : .@, primitive : true},
    ; f [a, .a, @a, #a]
]
-----
[a, .a, @a, #a]
=====
mode primitive list form
-----
; do [
    a = 1,
    f = ; mode {list : form, symbol : .@, primitive : true},
    ; f [a, .a, @a, #a]
]
-----
[1, a, 1, 1]
=====
mode primitive map id
-----
; do [
    a = 1,
    c = 2,
    f = ; mode {map : ., symbol : .@, primitive : true},
    ; f {.a : @a, #b : .a, c : d}
]
-----
{.a : @a, #b : .a, c : d}
=====
mode primitive map form
-----
; do [
    a = 1,
    b = 2,
    c = 3,
    f = ; mode {map : form, symbol : .@, primitive : true},
    ; f {.a : a, b : .a, @c : .d}
]
-----
{a : 1, 2 : a, 3 : d}
=====
mode primitive multiple
-----
; do [
    f = ; mode {symbol : ., call : form, list : form, primitive : true},
    ; f [.a, ; .b .c]
]
-----
[.a, ; .b .c]
=====
mode symbol .
-----
; do [
    a = 1,
    f = ; mode {symbol : .., list : form@},
    [; f a, ; f [a]]
]
-----
[a, [1]]
=====
mode symbol @
-----
; do [
    a = 1,
    f = ; mode {symbol : .@, list : form.},
    [; f a, ; f [a]]
]
-----
[1, [a]]
=====
mode pair primitive
-----
; do [
    f = ; mode {pair : form.},
    a f .b
]
-----
a : b
=====
mode composite
-----
; do [
    f = ; mode {pair : form. : {pair : .}},
    ; f a : .b : ; @c #d
]
-----
a : .b : ; @c #d
=====
mode multiple
-----
; do [
    c = 1,
    d = 2,
    f = ; mode {pair : form. : {pair : form.}},
    ; f a : .b : ; @c #d
]
-----
a : b : ; 1 2
=====
mode call form
-----
; do [
    f = ; mode {call : {this : {}, that : {symbol : ..}} : eval@ : eval@},
    [; f ; this .a, ; f ; that .a, ; f ; .other ; not true]
]
-----
[; this .a, ; that a, ; other false]
=====
mode func
-----
; do [
    f = ; mode @not,
    ; f true
]
-----
false
=====
mode func setup forward
-----
; do [
    m = ; mode @not,
    f = ; function {setup : #m : ., code : (._ : .i) : .i},
    ; f true
]
-----
false
=====
mode access free
-----
id function.context_access .
-----
free
=====
mode access const
-----
; do [f = ; mode @read, f function.context_access .]
-----
constant
=====
mode access mutable
-----
eval@ function.context_access .
-----
mutable
