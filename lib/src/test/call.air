new
-----
_ do [
    f = _ any .,
    i = _ any .,
    c1 = f ';' i,
    c2 = _ form@ f ; i,
    c3 = f '!' i,
    c4 = _ form@ f ! i,
    (c1 == c2) and (c3 == c4)
]
-----
true
=====
new get
-----
_ do [
    f = _ any .,
    i = _ any .,
    c1 = f ';' i,
    c2 = f '!' i,
    (f == c1 | call.function .) and (f == c2 | call.function .) and (i == c1 | call.input .) and (i == c2 | call.input .)
]
-----
true
=====
set get
-----
_ do [
    c = _ any call,
    f = _ any .,
    ctx = _ any .,
    i = _ any .,
    c | call.set_function f,
    c | call.set_context ctx,
    c | call.set_input i,
    (f == c | call.function .) and (ctx == c | call.context .) and (i == c | call.input .)
]
-----
true
=====
set return
-----
_ do [
    f1 = _ any .,
    ctx1 = _ any .,
    i1 = _ any .,
    c1 = f1 ';' i1,
    c1 | call.set_context ctx1,
    c2 = f1 '!' i1,
    c2 | call.set_context ctx1,
    f2 = c1 | call.set_function _ any .,
    ctx2 = c1 | call.set_context _ any .,
    i2 = c1 | call.set_input _ any .,
    f3 = c2 | call.set_function _ any .,
    ctx3 = c2 | call.set_context _ any .,
    i3 = c2 | call.set_input _ any .,
    (f1 == f2) and (f1 == f3) and (ctx1 == ctx2) and (ctx1 == ctx3) and (i1 == i2) and (i1 == i3)
]
-----
true
=====
is_reverse
-----
_ do [
    c1 = (_ any .) ';' (_ any .),
    c2 = (_ any .) '!' (_ any .),
    (_ not c1 | call.is_reverse .) and (c2 | call.is_reverse .)
]
-----
true
=====
apply const
-----
_ call.apply _ form@ 1 + 1
-----
2
=====
apply mut
-----
_ do [_ call.apply _ form@ .a = 1, #a]
-----
1
