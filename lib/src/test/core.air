atom
-----
true
-----
true
=====
assign and read
-----
_ do [a = 1, a]
-----
1
=====
symbol literal
-----
.a
-----
a
=====
symbol literal special 1
-----
..a
-----
.a
=====
symbol literal special 2
-----
...a
-----
..a
=====
symbol literal special 3
-----
.@a
-----
@a
=====
ctx ref
-----
_ do [a = 1, @a]
-----
1
=====
ref will not remove
-----
_ do [a = 1, @a, a]
-----
1
=====
ref special
-----
_ do [..a = 1, @.a]
-----
1
=====
pair ref
-----
_ do [p = 1 : 2, p ; do [first : second]]
-----
1 : 2
=====
task ref func
-----
_ do [t = _ id ctx ; func input, t ; do [context : function : input]]
-----
ctx : func : input
=====
list ref
-----
_ do [l = [0, 3, 6], l ; do [@0 : @1 : @2]]
-----
0 : 3 : 6
=====
map ref
-----
_ do [m = {a : 1, b : 2}, m ; do [a : b]]
-----
1 : 2
=====
eval
-----
_ do [a = _ id _ not true, $a]
-----
false
=====
pair eval
-----
(_ not false) : "1"
-----
true : "1"
=====
list eval
-----
[_ not true, 1, "2"]
-----
[false, 1, "2"]
=====
map eval
-----
{(_ not true) : (_ not true)}
-----
{(_ not true) : false}
=====
call recursive
-----
_ not _ not true
-----
true
=====
ctx unit
-----
_ do [a = 1, . ; eval .a]
-----
1
=====
ctx ctx name
-----
_ do [p = 1 : 2, p ; pair.first .]
-----
1
=====
pair ctx first
-----
_ do [p = 1 : 2, p ; eval ..first ; self .]
-----
1
=====
pair ctx first
-----
_ do [p = 1 : 2, p ; eval ..second ; self .]
-----
2
=====
task ctx func
-----
_ do [t = _ id ctx ; func input, t ; eval ..function ; self .]
-----
func
=====
task ctx ctx
-----
_ do [t = _ id ctx ; func input, t ; eval ..context ; self .]
-----
ctx
=====
task ctx input
-----
_ do [t = _ id ctx ; func input, t ; eval ..input ; self .]
-----
input
=====
list ctx index int
-----
_ do [l = [0, 2, 4], l ; eval 1 ; self .]
-----
2
=====
list ctx index symbol
-----
_ do [l = [0, 2, 4], l ; eval ..1 ; self .]
-----
2
=====
map ctx key
-----
_ do [m = {a : 1, b : 2}, m ; eval ..a ; self .]
-----
1
=====
map ctx key .
-----
_ do [m = {a : 1, b : 2}, m ; eval . ; self .]
-----
{a : 1, b : 2}
=====
map ctx key other
-----
_ do [m = {1 : 2, 2 : 4}, m ; eval 1 ; self .]
-----
2
