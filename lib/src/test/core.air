atom
-----
true
-----
true
=====
assign and read
-----
_ do [a = 1, a]
-----
1
=====
symbol literal
-----
.a
-----
a
=====
symbol literal special 1
-----
..a
-----
.a
=====
symbol literal special 2
-----
...a
-----
..a
=====
symbol literal special 3
-----
.@a
-----
@a
=====
symbol literal special 4
-----
.#a
-----
#a
=====
ref
-----
_ do [a = 1, @a]
-----
1
=====
ref will not remove
-----
_ do [a = 1, @a, a]
-----
1
=====
ref special
-----
_ do [.@.a = 1, @.a]
-----
1
=====
move
-----
_ do [a = 1, #a]
-----
1
=====
move will remove
-----
_ do [a = 1, #a, a]
-----
.
=====
move special
-----
_ do [.@@a = 1, #@a]
-----
1
=====
eval
-----
_ do [a = _ id _ not true, $a]
-----
false
=====
pair eval
-----
(_ not false) : "1"
-----
true : "1"
=====
list eval
-----
[_ not true, 1, "2"]
-----
[false, 1, "2"]
=====
map eval
-----
{(_ not true) : (_ not true)}
-----
{(_ not true) : false}
=====
call recursive
-----
_ not _ not true
-----
true
=====
non-func call .
-----
_ . 1
-----
_ . 1
=====
non-func call true
-----
_ true 1
-----
_ true 1
=====
non-func call false
-----
_ false 1
-----
_ false 1
=====
non-func call other
-----
_ "a" "b"
-----
_ "a" "b"
=====
non-func call recursive
-----
_ "a" _ not true
-----
_ "a" false
=====
explicit ctx unit
-----
_ do [a = 1, . ; eval .a]
-----
1
=====
explicit ctx symbol
-----
_ do [p = 1 : 2, p ; pair.first .]
-----
1
=====
explicit ctx do
-----
_ do [p = 1 : 2, p ; eval _ do [_ pair.set_first 3, _ pair.set_second 4], p]
-----
3 : 4
