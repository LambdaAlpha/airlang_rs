new access
-----
do [
    f = any ; .,
    i = any ; .,
    o = any ; .,
    c = call.apply ; case ';' {
        .function : f,
        .input : i,
        .output : o,
    },
    cf = c case.function .,
    ci = c case.input .,
    co = c case.output .,
    ic = c case.is_cache .,
    (f == cf) and (i == ci) and (o == co) and (not ; ic)
]
-----
true
=====
new repr
-----
do [
    m1 = {
        .function : any .,
        .input : any .,
        .output : any .,
    },
    c = call.apply ; case ';' m1,
    m2 = case.represent ; ^c,
    m1 == m2
]
-----
true
=====
repr cache
-----
do [
    m = case.represent ; case.cache ; not ; true,
    expected = {
        .function : not,
        .input : true,
        .output : false,
        .is_cache : true,
    },
    m == expected
]
-----
true
=====
cache access
-----
do [
    c = case.cache ; not ; true,
    cf = c case.function .,
    ci = c case.input .,
    co = c case.output .,
    (cf == not) and (ci == true) and (co == false)
]
-----
true
=====
is_cache true
-----
do [
    c = case.cache ; not ; true,
    c case.is_cache .
]
-----
true
