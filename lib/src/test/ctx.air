read ref
-----
do [a = any ; ., a == read ; a]
-----
true
=====
read indirect
-----
do [a = any ; ., b = .a, a == read ; *b]
-----
true
=====
read mutable
-----
do [a = any ; ., a == read ; a]
-----
true
=====
read const
-----
do [(a . constant) = any ; ., a == read ; a]
-----
true
=====
read static
-----
do [
    v = any ; .,
    a = context ; {variables : {(b . static) : v}},
    v == a | read ; .b
]
-----
true
=====
move ref
-----
do [a = any ; ., b = a, (b == move ; a) and (is_null ; a)]
-----
true
=====
move indirect
-----
do [a = any ; ., b = .a, c = a, (c == move ; *b) and (is_null ; a)]
-----
true
=====
move const
-----
do [(a . constant) = any ; ., (. == move ; a) and (not ; is_null ; a)]
-----
true
=====
move static
-----
do [
    v = any ; .,
    a = context ; {variables : {(b . static) : v}},
    (. == a | move ; .b) and (not ; a | is_null ; .b)
]
-----
true
=====
move static const
-----
do [
    v = any ; .,
    a = context ; {variables : {(b . {static, constant}) : v}},
    (. == a | move ; .b) and (not ; a | is_null ; .b)
]
-----
true
=====
= read
-----
do [a = 1, a]
-----
1
=====
= return
-----
do [a = 1, a = any ; .]
-----
1
=====
= another
-----
do [a = any ; ., a = 2, a]
-----
2
=====
= self
-----
do [a = 1, a = a, a]
-----
1
=====
= indirect
-----
do [a = .b, *a = 1, b]
-----
1
=====
= special key 1
-----
do [.*.a = 1, *.a]
-----
1
=====
= special key 2
-----
do [.*.p = 1 : 2, *.p pair.first .]
-----
1
=====
= mutable
-----
do [a = 1, [a, is_constant a]]
-----
[1, false]
=====
= constant
-----
do [(a . constant) = 1, [a, is_constant a]]
-----
[1, true]
=====
= map
-----
do [(a . {constant : false}) = 1, [a, is_constant a]]
-----
[1, false]
=====
= default map
-----
do [(a . {}) = 1, [a, is_constant a]]
-----
[1, false]
=====
= destruct pair
-----
do [(a : b) = 1 : 2, a : b]
-----
1 : 2
=====
= destruct pair return
-----
do [a = 1, b = 2, (a : b) = 3 : 4]
-----
1 : 2
=====
= destruct recursive
-----
do [(a : b : c) = 1 : 2 : 3, [a, b, c]]
-----
[1, 2, 3]
=====
= destruct is_constant default
-----
do [((a : b) . constant) = (any ; .) : (any ; .), [is_constant a, is_constant b]]
-----
[true, true]
=====
= destruct is_constant one by one
-----
do [(a : (b . constant)) = (any ; .) : (any ; .), [is_constant a, is_constant b]]
-----
[false, true]
=====
= destruct is_constant mix
-----
do [((a : (b . {constant : false})) . constant) = (any ; .) : (any ; .), [is_constant a, is_constant b]]
-----
[true, false]
=====
= destruct call
-----
do [(f ';' a) = 1 ; 2, [f, a]]
-----
[1, 2]
=====
= destruct infix
-----
do [(b ';' a : c) = 1 2 3, [a, b, c]]
-----
[1, 2, 3]
=====
= destruct list equal length
-----
do [[a, b, c] = [1, 2, 3], [a, b, c]]
-----
[1, 2, 3]
=====
= destruct list more value
-----
do [[a, b] = [1, 2, 3], [a, b]]
-----
[1, 2]
=====
= destruct list more pattern
-----
do [a = 1, b = 2, [a, b] = [3], [a, b]]
-----
[3, .]
=====
= destruct list more pattern return
-----
do [a = 1, b = 2, [a, b] = [3]]
-----
[1, 2]
=====
= destruct map symbol key
-----
do [{a : a, b : b} = {.a : 1, .b : 2, .c : 3}, [a, b]]
-----
[1, 2]
=====
= destruct map other key
-----
do [{1 : a, 3 : b} = {1 : 2, 3 : 4}, [a, b]]
-----
[2, 4]
=====
= destruct map not full match
-----
do [a = 1, b = 2, {3 : a, 4 : b} = {3 : 5, 6 : 7}]
-----
{3 : 1, 4 : 2}
=====
= destruct match
-----
do [[a, 2, c] = [1, 2, 3], [a, c]]
-----
[1, 3]
=====
= destruct not match
-----
do [a = 1, c = 3, [a, 2, c] = [2, 3, 4], [a, c]]
-----
[1, 3]
=====
mutable = return
-----
do [a = 1, 1 == a = any ; .]
-----
true
=====
mutable mutate
-----
do [a = 1 : 2, a pair.set_first 3, a]
-----
3 : 2
=====
constant mutate
-----
do [(a . constant) = 1 : 2, a pair.set_first any ; ., a]
-----
1 : 2
=====
constant =
-----
do [(a . constant) = 1, a = any ; ., a]
-----
1
=====
constant = mutable
-----
do [(a . constant) = 1, a = any ; ., a]
-----
1
=====
constant = constant
-----
do [(a . constant) = 1, (a . constant) = any ; ., a]
-----
1
=====
set_constant constant mutable
-----
do [(a . constant) = any ; ., a set_constant false, is_constant a]
-----
true
=====
set_constant mutable constant
-----
do [a = any ; ., a set_constant true, is_constant a]
-----
true
=====
is_locked false
-----
is_locked not
-----
false
=====
is_locked true
-----
do [
    f = function ; {
        cell : true,
        context_access : mutable,
        code : (.ctx : .i) : .ctx | is_locked ; .i
    },
    .f .f
]
-----
true
=====
is_locked true multiple
-----
do [
    f = function ; {
        cell : true,
        context_access : mutable,
        code : (.ctx : ._) : .ctx | ...g ; .
    },
    g = function ; {
        cell : true,
        context_access : mutable,
        code : (.ctx : ._) : .ctx | (is_locked ; ..f) and (is_locked ; ..g)
    },
    .f .
]
-----
true
=====
is_null true
-----
is_null a
-----
true
=====
is_null false
-----
do [a = any ; ., is_null a]
-----
false
=====
is_static true
-----
do [c = context ; {variables : {(a . static) : any ; .}}, c | is_static ; .a]
-----
true
=====
is_static false
-----
do [c = context ; {variables : {(a . {}) : any ; .}}, c | is_static ; .a]
-----
false
=====
static init true
-----
do [c = context ; {variables : {(a . {static : true}) : any ; .}}, c | is_static ; .a]
-----
true
=====
static init false
-----
do [c = context ; {variables : {(a . {static : false}) : any ; .}}, c | is_static ; .a]
-----
false
=====
static move
-----
do [c = context ; {variables : {(a . static) : 1}}, c | .^a, c | .a]
-----
1
=====
static move reverse
-----
do [c = context ; {reverse : true, variables : {(a . static) : 1}}, c | .^a, c | .a]
-----
1
=====
static = to static
-----
do [c = context ; {variables : {(a . static) : 1}}, c | .a = 2, c | .a]
-----
1
=====
static = from static
-----
do [c = context ; {}, c | (.a . {.static}) = 1, c | is_null ; .a]
-----
true
=====
static set_constant
-----
do [c = context ; {variables : {(a . static) : 1}}, c | set_constant ; .a, c | is_constant ; .a]
-----
false
=====
is_reverse false
-----
is_reverse .
-----
false
=====
is_reverse true
-----
do [c = context ; {reverse : true}, c | is_reverse ; .]
-----
true
=====
reverse set_constant constant mutable
-----
do [c = context ; {reverse : true, variables : {(a . constant) : any ; .}}, c | do ; [.a set_constant false, is_constant .a]]
-----
false
=====
reverse set_constant mutable constant
-----
do [c = context ; {reverse : true, variables : {a : any ; .}}, c | do ; [.a set_constant true, is_constant .a]]
-----
false
=====
reverse move constant
-----
do [c = context ; {reverse : true, variables : {(a . constant) : 1}}, c | .^a]
-----
1
=====
reverse = mutable
-----
do [c = context ; {reverse : true}, c | .a = 1, c | is_null ; .a]
-----
false
=====
set_reverse false
-----
do [c = context ; {reverse : true}, c = ^c set_reverse false, c | is_reverse ; .]
-----
false
=====
set_reverse true
-----
do [c = context ; {reverse : false}, c = ^c set_reverse true, c | is_reverse ; .]
-----
true
=====
ctx is_constant default
-----
context.is_constant .
-----
false
=====
ctx is_constant free
-----
. | context.is_constant ; .
-----
.
=====
ctx is_constant constant
-----
do [(a . constant) = context ; {}, a | context.is_constant ; .]
-----
true
=====
ctx is_constant mutable
-----
do [a = context ; {}, a | context.is_constant ; .]
-----
false
=====
| 1
-----
do [
    a = context ; {variables : {p : 1 : 2}},
    b = 3,
    a | .p pair.set_first b,
    a | .^p,
]
-----
3 : 2
=====
| 2
-----
do [
    a = context ; {variables : {p : 1 : 2, b : 3}},
    a | .p pair.set_first .b,
    a | .^p,
]
-----
3 : 2
=====
| 3
-----
do [
    set_first = pair.set_first,
    a = context ; {variables : {set_first : ^set_first, p : 1 : 2, b : 3}},
    a | .p .set_first .b,
    a | .^p,
]
-----
3 : 2
=====
|:
-----
do [(c : a) = (context ; {variables : {a : 1}}) |: .a = 2, [c | .a, ^a]]
-----
[2, 1]
=====
| recursive
-----
do [
    a = context ; {variables : {b : context ; {variables : {c : 1}}}},
    a | .b | ..c
]
-----
1
=====
free self
-----
. | self ; .
-----
.
=====
free free
-----
. | 1 + 1
-----
2
=====
free mutate
-----
do [a = 1, . | move ; .a, a]
-----
1
=====
represent default
-----
context.represent ; context ; {}
-----
{}
=====
represent else
-----
context.represent ; context ; {variables : {(a . constant) : 1}}
-----
{variables : {(a . constant) : 1}}
=====
represent binding map
-----
context.represent ; context ; {variables : {(a . {static, constant}) : 1}}
-----
{variables : {(a . {static, constant}) : 1}}
=====
represent non-recursive
-----
do [{variables : m} = context.represent ; context ; {variables : {b : context ; {}}}, b = m map.remove .b, b type .]
-----
context
=====
prelude
-----
do [a = prelude ; ., a | .not ; true]
-----
false
=====
prelude self
-----
do [a = prelude ; ., a | is_null ; .prelude]
-----
false
=====
prelude current
-----
do [a = any ; ., b = prelude ; ., b | is_null ; .a]
-----
true
=====
self
-----
do [a = 1, b = self ; ., b | .a]
-----
1
=====
self non-sync
-----
do [a = self ; ., b = any ; ., a | is_null ; .b]
-----
true
