; [a = 1, read a]
-----
1
=====
; [a = 1, read "a"]
-----
.
=====
; [a = 1, b = id $ a, read $ eval $ b]
-----
1
=====
; [(a . constant) = 1, read a]
-----
1
=====
; [a = 1, move a]
-----
1
=====
; [a = 1, move a, a]
-----
.
=====
; [(a . final) = 1, move a]
-----
.
=====
; [(a . constant) = 1, move a]
-----
.
=====
; [a = id $ b, b = 1, move $ eval $ a]
-----
1
=====
; [a = 1, a]
-----
1
=====
; [a = 1, a = 2]
-----
1
=====
; [a = 1, a = 2, a]
-----
2
=====
; [a = 1, b = a, b]
-----
1
=====
; [a = id $ b, $$ $ a = 1, b]
-----
1
=====
; [(a . none) = 1, a]
-----
1
=====
; [(a . none) = 1, (is_final a) and not $ is_null $ a]
-----
false
=====
; [(a . final) = 1, is_final a]
-----
true
=====
; [(a . constant) = 1, is_constant a]
-----
true
=====
; [(a . {invariant : final}) = 1, is_final a]
-----
true
=====
; [(a . {}) = 1, (is_final a) and not $ is_null $ a]
-----
false
=====
; [(a : b) = 1 : 2, a : b]
-----
1 : 2
=====
; [a = 1, b = 2, (a : b) = 3 : 4]
-----
1 : 2
=====
; [(a : b : c) = 1 : 2 : 3, [a, b, c]]
-----
[1, 2, 3]
=====
; [((a : b) . final) = 1 : 2, (is_final a) and is_final $ b]
-----
true
=====
; [((a . final) : (b . constant)) = 1 : 2, (is_final a) and is_constant $ b]
-----
true
=====
; [((a : (b . final)) . constant) = 1 : 2, (is_constant a) and (not $ is_constant $ b) and is_final $ b]
-----
true
=====
; [(f a) = id $ 1 $ 2, [f, a]]
-----
[1, 2]
=====
; [(a b c) = id $ 1 2 3, [a, b, c]]
-----
[1, 2, 3]
=====
; [(f ? b) = 1 ? 2, [f, b]]
-----
[1, 2]
=====
; [[a, b, c] = [1, 2, 3], [a, b, c]]
-----
[1, 2, 3]
=====
; [[a, b] = [1, 2, 3], [a, b]]
-----
[1, 2]
=====
; [a = 1, b = 2, [a, b] = [3], [a, b]]
-----
[3, .]
=====
; [a = 1, b = 2, [a, b] = [3]]
-----
[1, 2]
=====
; [[a, ..., c] = [1, 2, 3], [a, c]]
-----
[1, 3]
=====
; [[a, ..., c, d] = [1, 2, 3, 4, 5], [a, c, d]]
-----
[1, 4, 5]
=====
; [[a, ..., b, ..., c] = [1, 2, 3, 4, 5, 6], [a, b, c]]
-----
[1, 4, 6]
=====
; [[a, ..., b, c] = [1, 2], [a, b, c]]
-----
[1, ., .]
=====
; [a = 1, b = 2, c = 3, [a, ..., b, c] = [4, 5, 6, 7, 8]]
-----
[1, ., 2, 3]
=====
; [{: a, : b} = {(id a) : 1, (id b) : 2, (id c) : 3}, [a, b]]
-----
[1, 2]
=====
; [{1 : a, 3 : b} = {1 : 2, 3 : 4}, [a, b]]
-----
[2, 4]
=====
; [a = 1, b = 2, {1 : a, 2 : b} = {1 : 2, 3 : 4}]
-----
{1 : 1, 2 : 2}
=====
; [(a . final) = 1, a = 2]
-----
.
=====
; [(a . final) = 1, a = 2, a]
-----
1
=====
; [(a . final) = 1, (a . final) = 2, a]
-----
1
=====
; [(a . final) = 1, (a . constant) = 2, a]
-----
1
=====
; [(a . final) = 1 : 2, a set_1 3, a]
-----
3 : 2
=====
; [(a . constant) = 1 : 2, a set_1 3, a]
-----
1 : 2
=====
; [(a . constant) = 1, a = 2, a]
-----
1
=====
; [(a . constant) = 1, (a . final) = 2, a]
-----
1
=====
; [(a . constant) = 1, (a . constant) = 2, a]
-----
1
=====
; [a = 1, set_final a, (is_final a) and not $ is_constant $ a]
-----
true
=====
; [(a . constant) = 1, set_final a, is_constant a]
-----
true
=====
; [a = 1, set_constant a, is_constant a]
-----
true
=====
; [(a . final) = 1, set_constant a, is_constant a]
-----
true
=====
is_final a
-----
false
=====
; [a = 1, is_final a]
-----
false
=====
; [(a . final) = 1, is_final a]
-----
true
=====
; [(a . constant) = 1, is_final a]
-----
true
=====
is_constant a
-----
false
=====
; [a = 1, is_constant a]
-----
false
=====
; [(a . final) = 1, is_constant a]
-----
false
=====
; [(a . constant) = 1, is_constant a]
-----
true
=====
is_null a
-----
true
=====
; [a = 1, is_null a]
-----
false
=====
access .
-----
mutable
=====
. | access $ .
-----
free
=====
; [(a . constant) = . context {}, a | access $ .]
-----
constant
=====
; [a = . context {}, a | access $ .]
-----
mutable
=====
has_meta .
-----
false
=====
; [set_meta $ . context {}, has_meta .]
-----
true
=====
; [m1 = . context {}, set_meta m1, m2 = true | this $ ., m1 == m2]
-----
true
=====
; [a = (. context {}) context {}, a | set_meta $ ., a | has_meta $ .]
-----
false
=====
; [
    a = . context {a1 : 1},
    b = . context {b1 : 2},
    dispatcher = function $ {
        body : input match {
            (id a1) : (id a),
            (id b1) : (id b),
        } : false,
        caller_access : free,
        context : . context {
            : match,
            : id,
        },
    },
    set_meta $ . context {: dispatcher},
    (a1 == 1) and b1 == 2
]
-----
true
=====
; [
    da = function $ {
        body : id $ b,
        caller_access : free,
        context : . context {
            : id,
        },
    },
    db = function $ {
        body : id $ c,
        caller_access : free,
        context : . context {
            : id,
        },
    },
    a = (. context {dispatcher : da}) context {
        b : (. context {dispatcher : db}) context {
            c : . context {
                d : 1
            }
        }
    },
    a | read $ d
]
-----
1
=====
; [
    dispatcher = function $ {
        body : true,
        caller_access : free,
    },
    set_meta $ . context {: dispatcher, a : 1},
    a
]
-----
1
=====
; [
    a = 1,
    dispatcher = function $ {
        body : false,
        caller_access : free,
    },
    set_meta $ . context {: dispatcher},
    a
]
-----
1
=====
; [
    a = . context {p : 1 : 2},
    b = 3,
    a | p set_1 b,
    a | read $ p,
]
-----
3 : 2
=====
; [
    set_first = set_1,
    a = . context {set_first : move $ set_first, p : 1 : 2},
    b = 3,
    a .| p set_first b,
    a | read $ p,
]
-----
3 : 2
=====
; [
    a = . context {p : 1 : 2, b : 3},
    a |. p set_1 b,
    a | read $ p,
]
-----
3 : 2
=====
; [
    set_first = set_1,
    a = . context {set_first : move $ set_first, p : 1 : 2, b : 3},
    a .|. p set_first b,
    a | read $ p,
]
-----
3 : 2
=====
; [
    set_meta $ . context {a : 1},
    true | read $ a
]
-----
1
=====
; [
    false | a = 1,
    a
]
-----
1
=====
; [a = 1, [] | read $ a]
-----
1
=====
; [
    a = (. context {b : 1}) context {c : 2},
    [a, true] | read $ b
]
-----
1
=====
; [
    a = . context {b : . context {c : 1}},
    [a, b] | read $ c
]
-----
1
=====
. | this $ .
-----
.
=====
. | 1 + 1
-----
2
=====
; [a = 1, . | move $ a]
-----
.
=====
. | get_1 $ 1 : 2
-----
1
=====
; [
    a = . context {b : 1},
    hm = a | has_meta $ .,
    b = a | read $ b,
    (not hm) and b == 1
]
-----
true
=====
context.represent $ . context {}
-----
. : {}
=====
; [
    (meta : m) = context.represent $ (. context {super : id $ b}) context {a : 1},
    meta = context.represent $ move $ meta,
    meta : m
]
-----
(. : {super : b}) : {a : 1}
=====
; [final = id $ final, context.represent $ . context {a : 1 . final}]
-----
. : {a : 1 . final}
=====
; [(_ : m) = context.represent $ . context {b : . context {}}, b = m map.remove id $ b, type_of b]
-----
context
=====
; [a = prelude $ ., a | not $ true]
-----
false
=====
; [a = prelude $ ., a | is_null $ prelude]
-----
false
=====
; [a = 1, b = prelude $ ., b | is_null $ a]
-----
true
=====
; [a = prelude $ ., a | is_constant $ prelude]
-----
true
=====
; [a = 1, b = this $ ., b | read $ a]
-----
1
=====
; [a = this $ ., b = 1, a | is_null $ b]
-----
true
