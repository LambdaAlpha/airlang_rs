read ref
-----
_ do [a = _ any ., a == a read .]
-----
true
=====
read indirect
-----
_ do [a = _ any ., b = .a, a == @b read .]
-----
true
=====
read none
-----
_ do [a = _ any ., a == a read .]
-----
true
=====
read final
-----
_ do [(a . final) = _ any ., a == a read .]
-----
true
=====
read still
-----
_ do [
    v = _ any .,
    a = _ context {variables : {(b . still) : v}},
    v == a ; read b : .
]
-----
true
=====
read static
-----
_ do [
    v = _ any .,
    a = _ context {variables : {(b . static) : v}},
    v == a ; read b : .
]
-----
true
=====
read const
-----
_ do [
    v = _ any .,
    a = _ context {variables : {(b . constant) : v}},
    v == a ; read b : .
]
-----
true
=====
move ref
-----
_ do [a = _ any ., b = a, (b == a move .) and (a is_null .)]
-----
true
=====
move indirect
-----
_ do [a = _ any ., b = .a, c = a, (c == @b move .) and (a is_null .)]
-----
true
=====
move final
-----
_ do [(a . final) = _ any ., (. == a move .) and (_ not a is_null .)]
-----
true
=====
move still
-----
_ do [
    v = _ any .,
    a = _ context {variables : {(b . still) : v}},
    (v == a ; move b : .) and (a ; is_null b : .)
]
-----
true
=====
move static
-----
_ do [
    v = _ any .,
    a = _ context {variables : {(b . static) : v}},
    (. == a ; move b : .) and (_ not a ; is_null b : .)
]
-----
true
=====
move const
-----
_ do [
    v = _ any .,
    a = _ context {variables : {(b . constant) : v}},
    (. == a ; move b : .) and (_ not a ; is_null b : .)
]
-----
true
=====
= read
-----
_ do [a = 1, a]
-----
1
=====
= return
-----
_ do [a = 1, a = _ any .]
-----
1
=====
= another
-----
_ do [a = _ any ., a = 2, a]
-----
2
=====
= self
-----
_ do [a = 1, a = a, a]
-----
1
=====
= indirect
-----
_ do [a = .b, @a = 1, b]
-----
1
=====
= special key 1
-----
_ do [.@.a = 1, @.a]
-----
1
=====
= special key 2
-----
_ do [.@.p = 1 : 2, ..p ; pair.first .]
-----
1
=====
= none
-----
_ do [a = 1, [a, a contract .]]
-----
[1, none]
=====
= final
-----
_ do [(a . final) = 1, [a, a contract .]]
-----
[1, final]
=====
= destruct pair
-----
_ do [(a : b) = 1 : 2, a : b]
-----
1 : 2
=====
= destruct pair return
-----
_ do [a = 1, b = 2, (a : b) = 3 : 4]
-----
1 : 2
=====
= destruct recursive
-----
_ do [(a : b : c) = 1 : 2 : 3, [a, b, c]]
-----
[1, 2, 3]
=====
= destruct contract default
-----
_ do [((a : b) . final) = (_ any .) : (_ any .), [a contract ., b contract .]]
-----
[final, final]
=====
= destruct contract one by one
-----
_ do [(a : (b . final)) = (_ any .) : (_ any .), [a contract ., b contract .]]
-----
[none, final]
=====
= destruct contract mix
-----
_ do [((a : (b . none)) . final) = (_ any .) : (_ any .), [a contract ., b contract .]]
-----
[final, none]
=====
= destruct call
-----
_ do [(f call a) = _ 1 2, [f, a]]
-----
[1, 2]
=====
= destruct infix
-----
_ do [(b call a : c) = 1 2 3, [a, b, c]]
-----
[1, 2, 3]
=====
= destruct list equal length
-----
_ do [[a, b, c] = [1, 2, 3], [a, b, c]]
-----
[1, 2, 3]
=====
= destruct list more value
-----
_ do [[a, b] = [1, 2, 3], [a, b]]
-----
[1, 2]
=====
= destruct list more pattern
-----
_ do [a = 1, b = 2, [a, b] = [3], [a, b]]
-----
[3, .]
=====
= destruct list more pattern return
-----
_ do [a = 1, b = 2, [a, b] = [3]]
-----
[1, 2]
=====
= destruct map symbol key
-----
_ do [{a : a, b : b} = {.a : 1, .b : 2, .c : 3}, [a, b]]
-----
[1, 2]
=====
= destruct map other key
-----
_ do [{1 : a, 3 : b} = {1 : 2, 3 : 4}, [a, b]]
-----
[2, 4]
=====
= destruct map not full match
-----
_ do [a = 1, b = 2, {3 : a, 4 : b} = {3 : 5, 6 : 7}]
-----
{3 : 1, 4 : 2}
=====
= destruct match
-----
_ do [[a, 2, c] = [1, 2, 3], [a, c]]
-----
[1, 3]
=====
= destruct not match
-----
_ do [a = 1, c = 3, [a, 2, c] = [2, 3, 4], [a, c]]
-----
[1, 3]
=====
none = return
-----
_ do [a = 1, 1 == a = _ any .]
-----
true
=====
none mutate
-----
_ do [a = 1 : 2, a ; pair.set_first 3, a]
-----
3 : 2
=====
final mutate
-----
_ do [(a . final) = 1 : 2, a ; pair.set_first _ any ., a]
-----
1 : 2
=====
final =
-----
_ do [(a . final) = 1, a = _ any ., a]
-----
1
=====
final = none
-----
_ do [(a . final) = 1, a = _ any ., a]
-----
1
=====
final = final
-----
_ do [(a . final) = 1, (a . final) = _ any ., a]
-----
1
=====
set_contract still none
-----
_ do [c = _ context {variables : {(a . still) : _ any .}}, c ; set_contract a : none, c ; contract a : .]
-----
none
=====
set_contract still none
-----
_ do [c = _ context {variables : {(a . still) : _ any .}}, c ; set_contract a : final, c ; contract a : .]
-----
final
=====
set_contract none final
-----
_ do [a = _ any ., a set_contract final, a contract .]
-----
final
=====
set_contract none still
-----
_ do [a = _ any ., a set_contract still, a contract .]
-----
none
=====
set_contract final still
-----
_ do [(a . final) = _ any ., a set_contract still, a contract .]
-----
final
=====
set_contract final none
-----
_ do [(a . final) = _ any ., a set_contract none, a contract .]
-----
final
=====
set_contract static const
-----
_ do [c = _ context {variables : {(a . static) : _ any .}}, c ; set_contract a : constant, c ; contract a : .]
-----
static
=====
set_contract static still
-----
_ do [c = _ context {variables : {(a . static) : _ any .}}, c ; set_contract a : still, c ; contract a : .]
-----
static
=====
set_contract static final
-----
_ do [c = _ context {variables : {(a . static) : _ any .}}, c ; set_contract a : final, c ; contract a : .]
-----
static
=====
set_contract static none
-----
_ do [c = _ context {variables : {(a . static) : _ any .}}, c ; set_contract a : none, c ; contract a : .]
-----
static
=====
is_locked false
-----
not is_locked .
-----
false
=====
is_locked true
-----
_ do [
    f = _ function {
        cell : true,
        context_access : mutable,
        code : (.ctx : .i) : .ctx ; is_locked .@i : .
    },
    _ .f f
]
-----
true
=====
is_locked true multiple
-----
_ do [
    f = _ function {
        cell : true,
        context_access : mutable,
        code : (.ctx : ._) : .ctx ; eval _ ...g .
    },
    g = _ function {
        cell : true,
        context_access : mutable,
        code : (.ctx : ._) : .ctx ; eval (..f is_locked .) and (..g is_locked .)
    },
    _ .f .
]
-----
true
=====
lock is_null
-----
_ do [
    f = _ function {
        cell : true,
        context_access : mutable,
        code : (.ctx : .i) : .ctx ; is_null .@i : .
    },
    _ .f f
]
-----
false
=====
is_null true
-----
a is_null .
-----
true
=====
is_null false
-----
_ do [a = _ any ., a is_null .]
-----
false
=====
static move
-----
_ do [c = _ context {variables : {(a . static) : 1}}, c ; move a : ., c ; read a : .]
-----
1
=====
static = to static
-----
_ do [c = _ context {variables : {(a . static) : 1}}, c ; = a : 2, c ; read a : .]
-----
1
=====
static = from static
-----
_ do [c = _ context {}, c ; = (a . static) : 1, c ; is_null a : .]
-----
true
=====
is_constant default
-----
_ is_constant .
-----
false
=====
is_constant true
-----
_ do [(a . final) = _ context {}, a ; is_constant .]
-----
true
=====
is_constant false
-----
_ do [a = _ context {}, a ; is_constant .]
-----
false
=====
; 1
-----
_ do [
    a = _ context {variables : {p : 1 : 2}},
    b = 3,
    a ; eval .p ; pair.set_first b,
    a ; move p : .,
]
-----
3 : 2
=====
; 2
-----
_ do [
    a = _ context {variables : {p : 1 : 2, b : 3}},
    a ; eval .p ; pair.set_first .b,
    a ; move p : .,
]
-----
3 : 2
=====
; 3
-----
_ do [
    set_first = pair.set_first,
    a = _ context {variables : {set_first : #set_first, p : 1 : 2, b : 3}},
    a ; eval .p ; .set_first .b,
    a ; move p : .,
]
-----
3 : 2
=====
; recursive
-----
_ do [
    a = _ context {variables : {b : _ context {variables : {c : 1}}}},
    a ; eval .b ; eval ..c
]
-----
1
=====
; self
-----
_ do [u = 1, u ; self .]
-----
1
=====
; free free
-----
_ do [u = ., u ; + 1 : 1]
-----
2
=====
; free mutate
-----
_ do [u = ., a = 1, u ; move a : ., a]
-----
1
=====
represent default
-----
_ context.represent _ context {}
-----
{}
=====
represent else
-----
_ context.represent _ context {variables : {(a . constant) : 1}}
-----
{variables : {(a . constant) : 1}}
=====
represent non-recursive
-----
_ do [{variables : m} = _ context.represent _ context {variables : {b : _ context {}}}, b = m ; map.remove .b, b ; type .]
-----
context
=====
prelude
-----
_ do [a = _ prelude ., a ; eval _ .not true]
-----
false
=====
prelude self
-----
_ do [a = _ prelude ., a ; is_null prelude : .]
-----
false
=====
prelude current
-----
_ do [a = _ any ., b = _ prelude ., b ; is_null a : .]
-----
true
=====
self
-----
_ do [a = 1, b = _ self ., b ; eval .a]
-----
1
=====
self non-sync
-----
_ do [a = _ self ., b = _ any ., a ; is_null b : .]
-----
true
