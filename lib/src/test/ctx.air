;[a = 1, read a]
-----
1
=====
;[a = 1, read "a"]
-----
'u
=====
;[a = 1, b = 'u $ a, read $ 't $ b]
-----
1
=====
;[(a ': constant) = 1, read a]
-----
1
=====
;[a = 1, move a]
-----
1
=====
;[a = 1, move a, a]
-----
'u
=====
;[(a ': final) = 1, move a]
-----
'u
=====
;[(a ': constant) = 1, move a]
-----
'u
=====
;[a = 'u $ b, b = 1, move $ 't $ a]
-----
1
=====
;[a = 1, a]
-----
1
=====
;[a = 1, a = 2]
-----
1
=====
;[a = 1, a = 2, a]
-----
2
=====
;[a = 1, b = a, b]
-----
1
=====
;[a = 'u $ b, $$ $ a = 1, b]
-----
1
=====
;[(a ': none) = 1, a]
-----
1
=====
;[(a ': none) = 1, (is_final a) and not $ is_null $ a]
-----
'f
=====
;[(a ': final) = 1, is_final a]
-----
't
=====
;[(a ': constant) = 1, is_constant a]
-----
't
=====
;[(a ': {invariant : final}) = 1, is_final a]
-----
't
=====
;[(a ': {}) = 1, (is_final a) and not $ is_null $ a]
-----
'f
=====
;[(a : b) = 1 : 2, a : b]
-----
1 : 2
=====
;[a = 1, b = 2, (a : b) = 3 : 4]
-----
1 : 2
=====
;[(a : b : c) = 1 : 2 : 3, [a, b, c]]
-----
[1, 2, 3]
=====
;[((a : b) ': final) = 1 : 2, (is_final a) and is_final $ b]
-----
't
=====
;[((a ': final) : (b ': constant)) = 1 : 2, (is_final a) and is_constant $ b]
-----
't
=====
;[((a : (b ': final)) ': constant) = 1 : 2, (is_constant a) and (not $ is_constant $ b) and is_final $ b]
-----
't
=====
;[((a ': b) ': none) = 1 2 3, [a, ':, b]]
-----
[1, 2, 3]
=====
;[(f a) = 'u $ 1 $ 2, [f, a]]
-----
[1, 2]
=====
;[(a b c) = 'u $ 1 2 3, [a, b, c]]
-----
[1, 2, 3]
=====
;[(f ? b) = 1 ? 2, [f, b]]
-----
[1, 2]
=====
;[[a, b, c] = [1, 2, 3], [a, b, c]]
-----
[1, 2, 3]
=====
;[[a, b] = [1, 2, 3], [a, b]]
-----
[1, 2]
=====
;[a = 1, b = 2, [a, b] = [3], [a, b]]
-----
[3, 'u]
=====
;[a = 1, b = 2, [a, b] = [3]]
-----
[1, 2]
=====
;[[a, ..., c] = [1, 2, 3], [a, c]]
-----
[1, 3]
=====
;[[a, ..., c, d] = [1, 2, 3, 4, 5], [a, c, d]]
-----
[1, 4, 5]
=====
;[[a, ..., b, ..., c] = [1, 2, 3, 4, 5, 6], [a, b, c]]
-----
[1, 4, 6]
=====
;[[a, ..., b, c] = [1, 2], [a, b, c]]
-----
[1, 'u, 'u]
=====
;[a = 1, b = 2, c = 3, [a, ..., b, c] = [4, 5, 6, 7, 8]]
-----
[1, 'u, 2, 3]
=====
;[{: a, : b} = {('u a) : 1, ('u b) : 2, ('u c) : 3}, [a, b]]
-----
[1, 2]
=====
;[{1 : a, 3 : b} = {1 : 2, 3 : 4}, [a, b]]
-----
[2, 4]
=====
;[a = 1, b = 2, {1 : a, 2 : b} = {1 : 2, 3 : 4}]
-----
{1 : 1, 2 : 2}
=====
;[(a ': final) = 1, a = 2]
-----
'u
=====
;[(a ': final) = 1, a = 2, a]
-----
1
=====
;[(a ': final) = 1, (a ': final) = 2, a]
-----
1
=====
;[(a ': final) = 1, (a ': constant) = 2, a]
-----
1
=====
;[(a ': final) = 1 : 2, a set_1 3, a]
-----
3 : 2
=====
;[(a ': constant) = 1 : 2, a set_1 3, a]
-----
1 : 2
=====
;[(a ': constant) = 1, a = 2, a]
-----
1
=====
;[(a ': constant) = 1, (a ': final) = 2, a]
-----
1
=====
;[(a ': constant) = 1, (a ': constant) = 2, a]
-----
1
=====
;[a = 1, set_final a, (is_final a) and not $ is_constant $ a]
-----
't
=====
;[(a ': constant) = 1, set_final a, is_constant a]
-----
't
=====
;[a = 1, set_constant a, is_constant a]
-----
't
=====
;[(a ': final) = 1, set_constant a, is_constant a]
-----
't
=====
is_final a
-----
'f
=====
;[a = 1, is_final a]
-----
'f
=====
;[(a ': final) = 1, is_final a]
-----
't
=====
;[(a ': constant) = 1, is_final a]
-----
't
=====
is_constant a
-----
'f
=====
;[a = 1, is_constant a]
-----
'f
=====
;[(a ': final) = 1, is_constant a]
-----
'f
=====
;[(a ': constant) = 1, is_constant a]
-----
't
=====
is_null a
-----
't
=====
;[a = 1, is_null a]
-----
'f
=====
access 'u
-----
mutable
=====
'u .. access $ 'u
-----
free
=====
;[(a ': constant) = 'u context {}, a .. access $ 'u]
-----
constant
=====
;[a = 'u context {}, a .. access $ 'u]
-----
mutable
=====
has_meta 'u
-----
'f
=====
;[set_meta $ 'u context {}, has_meta 'u]
-----
't
=====
;[m1 = 'u context {}, set_meta m1, m2 = 't .. this $ 'u, m1 === m2]
-----
't
=====
;[a = ('u context {}) context {}, a .. set_meta $ 'u, a .. has_meta $ 'u]
-----
'f
=====
;[
    a = 'u context {a1 : 1},
    b = 'u context {b1 : 2},
    dispatcher = function $ {
        body : 'u $ match $ [
            input,
            {
                ('u a1) : ('u a),
                ('u b1) : ('u b),
            },
            'f,
        ],
        caller_access : free,
        context : 'u context {
            : match,
        },
    },
    set_meta $ 'u context {: dispatcher},
    (a1 ==- 1) and b1 ==- 2
]
-----
't
=====
;[
    da = function $ {
        body : 'u $ 'u $ b,
        caller_access : free,
    },
    db = function $ {
        body : 'u $ 'u $ c,
        caller_access : free,
    },
    a = ('u context {dispatcher : da}) context {
        b : ('u context {dispatcher : db}) context {
            c : 'u context {
                d : 1
            }
        }
    },
    a .. read $ d
]
-----
1
=====
;[
    dispatcher = function $ {
        body : 't,
        caller_access : free,
    },
    set_meta $ 'u context {: dispatcher, a : 1},
    a
]
-----
1
=====
;[
    a = 1,
    dispatcher = function $ {
        body : 'f,
        caller_access : free,
    },
    set_meta $ 'u context {: dispatcher},
    a
]
-----
1
=====
;[
    a = 'u context {p : 1 : 2},
    b = 3,
    a .. p set_1 b,
    a .. read $ p,
]
-----
3 : 2
=====
;[
    set_first = set_1,
    a = 'u context {set_first : move $ set_first, p : 1 : 2},
    b = 3,
    a :. p set_first b,
    a .. read $ p,
]
-----
3 : 2
=====
;[
    a = 'u context {p : 1 : 2, b : 3},
    a .: p set_1 b,
    a .. read $ p,
]
-----
3 : 2
=====
;[
    set_first = set_1,
    a = 'u context {set_first : move $ set_first, p : 1 : 2, b : 3},
    a :: p set_first b,
    a .. read $ p,
]
-----
3 : 2
=====
;[
    set_meta $ 'u context {a : 1},
    't .. read $ a
]
-----
1
=====
;[
    'f .. a = 1,
    a
]
-----
1
=====
;[a = 1, [] .. read $ a]
-----
1
=====
;[
    a = ('u context {b : 1}) context {c : 2},
    [a, 't] .. read $ b
]
-----
1
=====
;[
    a = 'u context {b : 'u context {c : 1}},
    [a, b] .. read $ c
]
-----
1
=====
'u .. this $ 'u
-----
'u
=====
'u .. 1 + 1
-----
2
=====
;[a = 1, 'u .. move $ a]
-----
'u
=====
'u .. get_1 $ 1 : 2
-----
1
=====
;[
    a = 'u context {b : 1},
    hm = a .. has_meta $ 'u,
    b = a .. read $ b,
    (not hm) and b ==- 1
]
-----
't
=====
context.represent $ 'u context {}
-----
'u : {}
=====
;[
    (meta : m) = context.represent $ ('u context {super : ('u b)}) context {a : 1},
    meta = context.represent $ move $ meta,
    meta : m
]
-----
('u : {super : b}) : {a : 1}
=====
;[': = 'u $ ':, final = 'u $ final, context.represent $ 'u context {a : 1 ': final}]
-----
'u : {a : 1 ': final}
=====
;[(_ : m) = context.represent $ 'u context {b : 'u context {}}, b = m map.remove 'u $ b, type_of b]
-----
context
=====
;[a = prelude $ 'u, a .. not $ 't]
-----
'f
=====
;[a = prelude $ 'u, a .. is_null $ prelude]
-----
'f
=====
;[a = 1, b = prelude $ 'u, b .. is_null $ a]
-----
't
=====
;[a = prelude $ 'u, a .. is_constant $ prelude]
-----
't
=====
;[a = 1, b = this $ 'u, b .. read $ a]
-----
1
=====
;[a = this $ 'u, b = 1, a .. is_null $ b]
-----
't
