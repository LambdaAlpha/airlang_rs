do non-list
-----
do 1
-----
1
=====
do empty list
-----
do []
-----
.
=====
do single
-----
do [1]
-----
1
=====
do multiple
-----
do [1, 2]
-----
2
=====
do recursive 1
-----
do [do [1, 2], 3]
-----
3
=====
do recursive 2
-----
do [1, do [2, 3]]
-----
3
=====
do break true
-----
do [1, 2, true break 3, 4]
-----
3
=====
do break false
-----
do [1, 2, false break 3, 4]
-----
4
=====
do break scope 1
-----
do [1, do [2, true break 3, 4], 5]
-----
5
=====
do break scope 2
-----
do [1, a = do ; [2, true break 3, 4], a + 2]
-----
5
=====
do break eval
-----
do [b = 2, (b > 0) break b - 1, b + 1]
-----
1
=====
do continue true
-----
do [1, true continue 2, 3]
-----
2
=====
do continue false
-----
do [1, false continue 2, 3]
-----
3
=====
do list
-----
do [[]]
-----
[]
=====
if true
-----
true if 1 : 2
-----
1
=====
if false
-----
false if 1 : 2
-----
2
=====
if else .
-----
true if 1 : .
-----
1
=====
if conditional eval
-----
do [a = 1, true if 1 : a = 2, a]
-----
1
=====
if recursive
-----
true if (false if 1 : 2) : 3
-----
2
=====
if break
-----
true if [1, true break 2, 3] : 4
-----
2
=====
if continue
-----
true if [1, true continue 2, 3] : 4
-----
2
=====
if list
-----
true if [[]] : .
-----
[]
=====
match eval
-----
do [a = 1, a match {1 : 1 + 2, 2 : 2 + 3} : .]
-----
3
=====
match exist
-----
1 match {1 : 2, 2 : 3} : .
-----
2
=====
match default
-----
3 match {1 : 2, 2 : 3} : 4
-----
4
=====
match conditional eval exist
-----
do [1 match {1 : a = 1, 2 : b = 2} : c = 3, [a, b, c]]
-----
[1, ., .]
=====
match conditional eval default
-----
do [3 match {1 : a = 1, 2 : b = 2} : c = 3, [a, b, c]]
-----
[., ., 3]
=====
match symbol
-----
do [a = id ; a, a match {a : 1, b : 2} : .]
-----
1
=====
match break
-----
1 match {1 : [2, true break 3, 4]} : 5
-----
3
=====
match continue
-----
1 match {1 : [2, true continue 3, 4]} : 5
-----
3
=====
match do
-----
1 match {1 : [1, 2]} : 3
-----
2
=====
match list
-----
1 match {1 : [[]]} : 2
-----
[]
=====
match bit
-----
true match {true : 1, false : 2} : 3
-----
1
=====
loop false
-----
do [a = 1, false loop a = 2, a]
-----
1
=====
loop multiple
-----
do [
    a = 0,
    b = 0,
    (a < 100) loop [
        a = a + 17,
        b = b + 1
    ],
    b
]
-----
6
=====
loop if
-----
do [
    a = 42,
    b = 24,
    (a <> b) loop (a > b) if (
        a = a - b
    ) : (
        b = b - a
    ),
    a
]
-----
6
=====
loop continue
-----
do [
    a = 0,
    b = 0,
    (b < 5) loop [
        b = b + 1,
        (b == 2) continue .,
        a = a + b,
    ],
    a
]
-----
13
=====
loop break
-----
do [
    a = 0,
    b = 0,
    (b < 5) loop [
        (a > 5) break a,
        b = b + 1,
        a = a + b,
    ]
]
-----
6
=====
for list
-----
do [sum = 0, [1, 2, 3, 4, 5] for i -> sum = sum + i, sum]
-----
15
=====
for empty list
-----
do [sum = 0, [] for i -> sum = sum + i, sum]
-----
0
=====
for break 1
-----
[1, 2, 3, 4, 5] for i -> [(i == 3) break true]
-----
true
=====
for break 2
-----
do [[1, 2, 3, 4, 5] for i -> [(i == 3) break ., a = i], a]
-----
2
=====
for continue
-----
do [
    a = 0,
    b = 0,
    [1, 2, 3, 4, 5] for i -> [
        a = a + i,
        (i == 3) continue .,
        b = b + i
    ],
    a : b
]
-----
15 : 12
=====
for list map
-----
do [a = [], [1, 2, 3, 4, 5] for i -> a list.push i + 1, a]
-----
[2, 3, 4, 5, 6]
=====
for integer
-----
do [sum = 0, 10 for i -> sum = sum + i, sum]
-----
45
=====
for integer 0
-----
do [sum = 0, 0 for i -> sum = sum + i, sum]
-----
0
=====
for integer negative
-----
-1 for i -> .
-----
.
=====
for byte
-----
do [b = [], byte(1122334455) for i -> b list.push i, b]
-----
[byte(11), byte(22), byte(33), byte(44), byte(55)]
=====
for symbol
-----
do [s = [], .abc for i -> s list.push i, s]
-----
[a, b, c]
=====
for text
-----
do [t = [], "hello" for i -> t list.push i, t]
-----
["h", "e", "l", "l", "o"]
=====
for map
-----
do [kv = [], {1 : 2, 3 : 4} for i -> kv list.push i, kv]
-----
[1 : 2, 3 : 4]
