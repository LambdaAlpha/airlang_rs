do non-list
-----
_ do 1
-----
1
=====
do empty list
-----
_ do []
-----
.
=====
do single
-----
_ do [1]
-----
1
=====
do multiple
-----
_ do [1, 2]
-----
2
=====
do recursive 1
-----
_ do [_ do [1, 2], 3]
-----
3
=====
do recursive 2
-----
_ do [1, _ do [2, 3]]
-----
3
=====
do return true
-----
_ do [1, 2, true .return 3, 4]
-----
3
=====
do return false
-----
_ do [1, 2, false .return 3, 4]
-----
4
=====
do return scope 1
-----
_ do [1, _ do [2, true .return 3, 4], 5]
-----
5
=====
do return scope 2
-----
_ do [1, a = _ do [2, true .return 3, 4], a + 2]
-----
5
=====
do return eval
-----
_ do [b = 2, (b > 0) .return b - 1, b + 1]
-----
1
=====
do list
-----
_ do [[]]
-----
[]
=====
? true
-----
true ? 1 : 2
-----
1
=====
? false
-----
false ? 1 : 2
-----
2
=====
? else .
-----
true ? 1 : .
-----
1
=====
? conditional eval
-----
_ do [a = 1, true ? 1 : a = 2, a]
-----
1
=====
? recursive
-----
true ? (false ? 1 : 2) : 3
-----
2
=====
? return
-----
true ? [1, true .return 2, 3] : 4
-----
2
=====
? return
-----
true ? [1, true .return 2, 3] : 4
-----
2
=====
? list
-----
true ? [[]] : .
-----
[]
=====
switch symbol
-----
.a switch {a : _ not true, b : 1}
-----
false
=====
switch int
-----
(1 + 2) switch {1, 2, 3 : _ not true}
-----
false
=====
switch text
-----
"a" switch {"ab" : 1, "a" : _ not true}
-----
false
=====
switch any
-----
"a" switch {1 : 2, "1" : "2", a : b, "a" : .b}
-----
b
=====
switch default
-----
1 switch {} : .a
-----
a
=====
switch not eval
-----
_ do [a = 0, 1 switch {2 : [a = 1], 3 : [a = 2]}, a]
-----
0
=====
switch block
-----
1 switch {1 : [a = 2, a]}
-----
2
=====
match pattern
-----
[1, 2, 3] match [[a, b, c] : a + b + c]
-----
6
=====
match order
-----
_ do [
    [1, 2, 3] match [
        [2, a, b] : x = 1,
        [1, c, d] : y = 1,
        [e, 2, f] : z = 1,
    ],
    [.a is_null _, .b is_null _, c, d, .e is_null _, .f is_null _, .x is_null _, y, .z is_null _]
]
-----
[true, true, 2, 3, true, true, true, 1, true]
=====
match eval
-----
_ do [a = 1, a match [1 : 1 + 2, 2 : 2 + 3]]
-----
3
=====
match exist
-----
1 match [1 : 2, 2 : 3]
-----
2
=====
match default
-----
3 match [1 : 2, 2 : 3, _ : 4]
-----
4
=====
match conditional eval exist
-----
_ do [1 match [1 : a = 1, 2 : b = 2, _ : c = 3], [a, .b is_null _, .c is_null _]]
-----
[1, true, true]
=====
match conditional eval default
-----
_ do [3 match [1 : a = 1, 2 : b = 2, _ : c = 3], [.a is_null _, .b is_null _, c]]
-----
[true, true, 3]
=====
match symbol
-----
_ do [a = _ form a, a match [*a : 1, *b : 2]]
-----
1
=====
match return
-----
1 match [1 : [2, true .return 3, 4]]
-----
3
=====
match return
-----
1 match [1 : [2, true .return 3, 4]]
-----
3
=====
match do
-----
1 match [1 : [1, 2]]
-----
2
=====
match list
-----
1 match [1 : [[]]]
-----
[]
=====
match bit
-----
true match [true : 1, false : 2]
-----
1
=====
loop false
-----
_ do [a = 1, false loop a = 2, a]
-----
1
=====
loop multiple
-----
_ do [
    a = 0,
    b = 0,
    (a < 100) loop [
        a = a + 17,
        b = b + 1
    ],
    b
]
-----
6
=====
loop ?
-----
_ do [
    a = 42,
    b = 24,
    (a <> b) loop (a > b) ? (
        a = a - b
    ) : (
        b = b - a
    ),
    a
]
-----
6
=====
loop return
-----
_ do [
    a = 0,
    b = 0,
    (b < 5) loop [
        b = b + 1,
        (b == 2) .return .,
        a = a + b,
    ],
    a
]
-----
13
=====
loop break
-----
_ do [
    a = 0,
    b = 0,
    (b < 5) loop [
        (a > 5) .break a,
        b = b + 1,
        a = a + b,
    ]
]
-----
6
=====
for list
-----
_ do [sum = 0, [1, 2, 3, 4, 5] for i : sum = sum + i, sum]
-----
15
=====
for empty list
-----
_ do [sum = 0, [] for i : sum = sum + i, sum]
-----
0
=====
for break 1
-----
[1, 2, 3, 4, 5] for i : [(i == 3) .break true]
-----
true
=====
for break 2
-----
_ do [[1, 2, 3, 4, 5] for i : [(i == 3) .break ., a = i], a]
-----
2
=====
for return
-----
_ do [
    a = 0,
    b = 0,
    [1, 2, 3, 4, 5] for i : [
        a = a + i,
        (i == 3) .return .,
        b = b + i
    ],
    a : b
]
-----
15 : 12
=====
for list map
-----
_ do [a = [], [1, 2, 3, 4, 5] for i : a ; list.push i + 1, a]
-----
[2, 3, 4, 5, 6]
=====
for integer
-----
_ do [sum = 0, 10 for i : sum = sum + i, sum]
-----
45
=====
for integer 0
-----
_ do [sum = 0, 0 for i : sum = sum + i, sum]
-----
0
=====
for integer negative
-----
0-1 for i : .
-----
.
=====
for byte
-----
_ do [b = [], byte(1122334455) for i : b ; list.push i, b]
-----
[byte(11), byte(22), byte(33), byte(44), byte(55)]
=====
for symbol
-----
_ do [s = [], .abc for i : s ; list.push i, s]
-----
[a, b, c]
=====
for text
-----
_ do [t = [], "hello" for i : t ; list.push i, t]
-----
["h", "e", "l", "l", "o"]
=====
for map
-----
_ do [kv = [], {1 : 2, 3 : 4} for i : kv ; list.push i, _ map kv]
-----
{1 : 2, 3 : 4}
