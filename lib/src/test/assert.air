; [
    p = assert ! {
        function : not,
        input : 1,
        output : 2,
    },
    assert.input p
]
-----
1
=====
; [
    p = assert ! {
        function : not,
        input : 1,
        output : 2,
    },
    assert.output p
]
-----
2
=====
; [
    p = assert ! {
        function : not,
        input : 1,
        output : 2,
    },
    (assert.function p) == not
]
-----
true
=====
; [
    p = assert ! {
        function : "not",
        input : 1,
        output : 2,
    },
    (assert.function p) == "not"
]
-----
true
=====
; [
    !map = function ! {
        body : the_input,
        input_mode : {map : id all eval},
    },
    m = !map ! {
        function : not,
        input : true,
        output : false,
    },
    m == assert.represent ! assert ! m
]
-----
true
=====
; [
    m = assert.represent ! assert.verified ! not ! true,
    !map = function ! {
        body : the_input,
        input_mode : {map : id all eval},
    },
    expected = !map ! {
        function : not,
        input : true,
        output : false,
        verified : true,
    },
    m == expected
]
-----
true
=====
; [
    p = assert ! {
        function : not,
        input : 1,
        output : 2,
    },
    ((type_of p) == id ! assert) and (assert.is_verified p) == false
]
-----
true
