length push
-----
_ do [
    a = _ any list,
    l1 = a ; list.length .,
    a ; list.push .,
    l2 = a ; list.length .,
    l2 == l1 + 1
]
-----
true
=====
length push_many
-----
_ do [
    a = _ any list,
    la = a ; list.length .,
    b = _ any list,
    lb = b ; list.length .,
    a ; list.push_many b,
    lab = a ; list.length .,
    lab == la + lb
]
-----
true
=====
length pop
-----
_ do [
    a = _ any list,
    l1 = a ; list.length .,
    (l1 == 0) break true,
    i = (l1 + (_ any integer) % l1) % l1,
    a ; list.pop i,
    l2 = a ; list.length .,
    l2 == l1 - i
]
-----
true
=====
set get
-----
_ do [
    a = _ any list,
    b = a,
    l = a ; list.length .,
    (l == 0) break true,
    i = (l + (_ any integer) % l) % l,
    v1 = a ; list.get i,
    v2 = _ any .,
    v3 = a ; list.set i : v2,
    v4 = a ; list.get i,
    a ; list.set i : v1,
    (v1 == v3) and (v2 == v4) and (a == b)
]
-----
true
=====
set_many get
-----
_ do [
    a = _ any list,
    la = a ; list.length .,
    (la == 0) break true,
    b = _ any list,
    lb = b ; list.length .,
    (lb == 0) break true,
    (la < lb) ? [
        t = a,
        a = b,
        b = t,
        t = la,
        la = lb,
        lb = t,
    ] : .,
    a1 = a,
    d = la - lb,
    i = (d == 0) ? 0 : (d + (_ any integer) % d) % d,
    c1 = a ; list.get i : i + lb,
    c2 = a ; list.set_many i : b,
    b1 = a ; list.get i : i + lb,
    a ; list.set_many i : c1,
    (b == b1) and (c1 == c2) and (a == a1)
]
-----
true
=====
insert get length
-----
_ do [
    a = _ any list,
    l = 1 + a ; list.length .,
    i = (l + (_ any integer) % l) % l,
    v = _ any .,
    a ; list.insert i : v,
    v1 = a ; list.get i,
    l1 = a ; list.length .,
    (v == v1) and (l == l1)
]
-----
true
=====
insert remove
-----
_ do [
    a = _ any list,
    b = a,
    l = 1 + a ; list.length .,
    i = (l + (_ any integer) % l) % l,
    v1 = _ any .,
    a ; list.insert i : v1,
    v2 = a ; list.remove i,
    (v1 == v2) and a == b
]
-----
true
=====
insert_many get length
-----
_ do [
    a = _ any list,
    l1 = 1 + a ; list.length .,
    i = (l1 + (_ any integer) % l1) % l1,
    v1 = _ any list,
    vl = v1 ; list.length .,
    a ; list.insert_many i : v1,
    v2 = a ; list.get i : i + vl,
    l2 = a ; list.length .,
    (v1 == v2) and l2 == l1 + vl - 1,
]
-----
true
=====
insert_many remove
-----
_ do [
    a = _ any list,
    b = a,
    l = 1 + a ; list.length .,
    i = (l + (_ any integer) % l) % l,
    v1 = _ any list,
    v1l = v1 ; list.length .,
    a ; list.insert_many i : v1,
    v2 = a ; list.remove i : i + v1l,
    (v1 == v2) and a == b
]
-----
true
=====
push pop
-----
_ do [
    a1 = _ any list,
    a2 = a1,
    v1 = _ any .,
    a1 ; list.push v1,
    v2 = a1 ; list.pop .,
    (v1 == v2) and (a1 == a2)
]
-----
true
=====
push_many pop
-----
_ do [
    a1 = _ any list,
    a2 = a1,
    b1 = _ any list,
    lb = b1 ; list.length .,
    a1 ; list.push_many b1,
    b2 = a1 ; list.pop lb,
    (b1 == b2) and a1 == a2
]
-----
true
=====
clear
-----
_ do [
    a = _ any list,
    a ; list.clear .,
    a == []
]
-----
true
=====
length empty
-----
_ do [l = [], l ; list.length .]
-----
0
=====
length else
-----
_ do [l = [1, 2], l ; list.length .]
-----
2
=====
set 1
-----
_ do [a = [1], a ; list.set 0 : 2, #a]
-----
[2]
=====
set 2
-----
_ do [a = [1, 2], a ; list.set 1 : 3, #a]
-----
[1, 3]
=====
set length
-----
_ do [a = [], a ; list.set 1 : 1, #a]
-----
[]
=====
set_many empty
-----
_ do [a = [0, 1, 2], a ; list.set_many 0 : []]
-----
[]
=====
set_many 1
-----
_ do [a = [0, 1, 2], a ; list.set_many 0 : [3, 4], #a]
-----
[3, 4, 2]
=====
set_many 2
-----
_ do [a = [0, 1, 2], a ; list.set_many 1 : [3, 4], #a]
-----
[0, 3, 4]
=====
set_many last
-----
_ do [a = [0, 1, 2], a ; list.set_many 2 : [], #a]
-----
[0, 1, 2]
=====
get out of bound
-----
_ do [l = [], l ; list.get 0]
-----
.
=====
get 0
-----
_ do [l = [1], l ; list.get 0]
-----
1
=====
get else
-----
_ do [l = [1, 2], l ; list.get 1]
-----
2
=====
get range 1
-----
_ do [l = [1, 2], l ; list.get 0 : 1]
-----
[1]
=====
get range 2
-----
_ do [l = [1, 2], l ; list.get 1 : 2]
-----
[2]
=====
get range . 1
-----
_ do [l = [1, 2], l ; list.get . : .]
-----
[1, 2]
=====
get range . 2
-----
_ do [l = [1, 2], l ; list.get 1 : .]
-----
[2]
=====
get range . 3
-----
_ do [l = [1, 2], l ; list.get . : 1]
-----
[1]
=====
insert out of bound
-----
_ do [l = [], l ; list.insert 1 : 1, l]
-----
[]
=====
insert
-----
_ do [l = [1, 2], l ; list.insert 1 : 3, l]
-----
[1, 3, 2]
=====
insert length
-----
_ do [a = [], a ; list.insert 0 : 1, #a]
-----
[1]
=====
insert_many
-----
_ do [l = [1, 2], l ; list.insert_many 1 : [3, 4], l]
-----
[1, 3, 4, 2]
=====
remove
-----
_ do [l = [1, 2, 3], [l ; list.remove 1, l]]
-----
[2, [1, 3]]
=====
remove range
-----
_ do [l = [1, 2, 3], [l ; list.remove 1 : 3, l]]
-----
[[2, 3], [1]]
=====
remove range .
-----
_ do [l = [1, 2, 3], l ; list.remove . : ., l]
-----
[]
=====
push
-----
_ do [l = [1], l ; list.push 2, l]
-----
[1, 2]
=====
push_many
-----
_ do [l = [1], l ; list.push_many [2, 3], l]
-----
[1, 2, 3]
=====
push_many empty
-----
_ do [l = [1], l ; list.push_many [], l]
-----
[1]
=====
pop . empty
-----
_ do [l = [], [l ; list.pop ., l]]
-----
[., []]
=====
pop . 1
-----
_ do [l = [1], [l ; list.pop ., l]]
-----
[1, []]
=====
pop . 2
-----
_ do [l = [1, 2], [l ; list.pop ., l]]
-----
[2, [1]]
=====
pop 0
-----
_ do [l = [1, 2], [l ; list.pop 0, l]]
-----
[[], [1, 2]]
=====
pop 1
-----
_ do [l = [1, 2], [l ; list.pop 1, l]]
-----
[[2], [1]]
=====
pop else
-----
_ do [l = [1, 2], [l ; list.pop 2, l]]
-----
[[1, 2], []]
=====
pop out of bound
-----
_ do [l = [1, 2], l ; list.pop 3, l]
-----
[1, 2]
=====
clear
-----
_ do [l = [1, 2], l ; list.clear ., l]
-----
[]
