length push
-----
; do [
    a = ; any list,
    l1 = a list.length .,
    a list.push .,
    l2 = a list.length .,
    l2 == l1 + 1
]
-----
true
=====
length push_many
-----
; do [
    a = ; any list,
    la = a list.length .,
    b = ; any list,
    lb = b list.length .,
    a list.push_many b,
    lab = a list.length .,
    lab == la + lb
]
-----
true
=====
length pop
-----
; do [
    a = ; any list,
    l1 = a list.length .,
    (l1 == 0) break true,
    i = (l1 + (; any integer) % l1) % l1,
    a list.pop i,
    l2 = a list.length .,
    l2 == l1 - i
]
-----
true
=====
set get
-----
; do [
    a = ; any list,
    b = a,
    l = a list.length .,
    (l == 0) break true,
    i = (l + (; any integer) % l) % l,
    v1 = a list.get i,
    v2 = ; any .,
    v3 = a list.set i : v2,
    v4 = a list.get i,
    a list.set i : v1,
    (v1 == v3) and (v2 == v4) and (a == b)
]
-----
true
=====
set_many get
-----
; do [
    a = ; any list,
    la = a list.length .,
    (la == 0) break true,
    b = ; any list,
    lb = b list.length .,
    (lb == 0) break true,
    (la < lb) ? [
        t = a,
        a = b,
        b = t,
        t = la,
        la = lb,
        lb = t,
    ] : .,
    a1 = a,
    d = la - lb,
    i = (d == 0) ? 0 : (d + (; any integer) % d) % d,
    c1 = a list.get i : i + lb,
    c2 = a list.set_many i : b,
    b1 = a list.get i : i + lb,
    a list.set_many i : c1,
    (b == b1) and (c1 == c2) and (a == a1)
]
-----
true
=====
insert get length
-----
; do [
    a = ; any list,
    l = 1 + a list.length .,
    i = (l + (; any integer) % l) % l,
    v = ; any .,
    a list.insert i : v,
    v1 = a list.get i,
    l1 = a list.length .,
    (v == v1) and (l == l1)
]
-----
true
=====
insert remove
-----
; do [
    a = ; any list,
    b = a,
    l = 1 + a list.length .,
    i = (l + (; any integer) % l) % l,
    v1 = ; any .,
    a list.insert i : v1,
    v2 = a list.remove i,
    (v1 == v2) and a == b
]
-----
true
=====
insert_many get length
-----
; do [
    a = ; any list,
    l1 = 1 + a list.length .,
    i = (l1 + (; any integer) % l1) % l1,
    v1 = ; any list,
    vl = v1 list.length .,
    a list.insert_many i : v1,
    v2 = a list.get i : i + vl,
    l2 = a list.length .,
    (v1 == v2) and l2 == l1 + vl - 1,
]
-----
true
=====
insert_many remove
-----
; do [
    a = ; any list,
    b = a,
    l = 1 + a list.length .,
    i = (l + (; any integer) % l) % l,
    v1 = ; any list,
    v1l = v1 list.length .,
    a list.insert_many i : v1,
    v2 = a list.remove i : i + v1l,
    (v1 == v2) and a == b
]
-----
true
=====
push pop
-----
; do [
    a1 = ; any list,
    a2 = a1,
    v1 = ; any .,
    a1 list.push v1,
    v2 = a1 list.pop .,
    (v1 == v2) and (a1 == a2)
]
-----
true
=====
push_many pop
-----
; do [
    a1 = ; any list,
    a2 = a1,
    b1 = ; any list,
    lb = b1 list.length .,
    a1 list.push_many b1,
    b2 = a1 list.pop lb,
    (b1 == b2) and a1 == a2
]
-----
true
=====
clear
-----
; do [
    a = ; any list,
    a list.clear .,
    a == []
]
-----
true
=====
length empty
-----
[] list.length .
-----
[] : 0
=====
length else
-----
[1, 2] list.length .
-----
[1, 2] : 2
=====
length ref
-----
; do [a = [1, 2], a list.length .]
-----
2
=====
set 1
-----
; do [a = [1], a list.set 0 : 2, ^a]
-----
[2]
=====
set 2
-----
; do [a = [1, 2], a list.set 1 : 3, ^a]
-----
[1, 3]
=====
set length
-----
; do [a = [], a list.set 1 : 1, ^a]
-----
[]
=====
set_many empty
-----
; do [a = [0, 1, 2], a list.set_many 0 : []]
-----
[]
=====
set_many 1
-----
; do [a = [0, 1, 2], a list.set_many 0 : [3, 4], ^a]
-----
[3, 4, 2]
=====
set_many 2
-----
; do [a = [0, 1, 2], a list.set_many 1 : [3, 4], ^a]
-----
[0, 3, 4]
=====
set_many last
-----
; do [a = [0, 1, 2], a list.set_many 2 : [], ^a]
-----
[0, 1, 2]
=====
get out of bound
-----
[] list.get 0
-----
[] : .
=====
get 0
-----
[1] list.get 0
-----
[1] : 1
=====
get else
-----
[1, 2] list.get 1
-----
[1, 2] : 2
=====
get range 1
-----
[1, 2] list.get 0 : 1
-----
[1, 2] : [1]
=====
get range 2
-----
[1, 2] list.get 1 : 2
-----
[1, 2] : [2]
=====
get range . 1
-----
[1, 2] list.get . : .
-----
[1, 2] : [1, 2]
=====
get range . 2
-----
[1, 2] list.get 1 : .
-----
[1, 2] : [2]
=====
get range . 3
-----
[1, 2] list.get . : 1
-----
[1, 2] : [1]
=====
insert out of bound
-----
[] list.insert 1 : 1
-----
[] : .
=====
insert
-----
[1, 2] list.insert 1 : 3
-----
[1, 3, 2] : .
=====
insert length
-----
; do [a = [], a list.insert 0 : 1, ^a]
-----
[1]
=====
insert_many
-----
[1, 2] list.insert_many 1 : [3, 4]
-----
[1, 3, 4, 2] : .
=====
remove
-----
[1, 2, 3] list.remove 1
-----
[1, 3] : 2
=====
remove range
-----
[1, 2, 3] list.remove 1 : 3
-----
[1] : [2, 3]
=====
remove range .
-----
[1, 2, 3] list.remove . : .
-----
[] : [1, 2, 3]
=====
push
-----
[1] list.push 2
-----
[1, 2] : .
=====
push_many
-----
[1] list.push_many [2, 3]
-----
[1, 2, 3] : .
=====
push_many empty
-----
[1] list.push_many []
-----
[1] : .
=====
pop . empty
-----
[] list.pop .
-----
[] : .
=====
pop . 1
-----
[1] list.pop .
-----
[] : 1
=====
pop . 2
-----
[1, 2] list.pop .
-----
[1] : 2
=====
pop 0
-----
[1, 2] list.pop 0
-----
[1, 2] : []
=====
pop 1
-----
[1, 2] list.pop 1
-----
[1] : [2]
=====
pop else
-----
[1, 2] list.pop 2
-----
[] : [1, 2]
=====
pop out of bound
-----
[1, 2] list.pop 3
-----
[1, 2] : .
=====
clear
-----
[1, 2] list.clear .
-----
[] : .
