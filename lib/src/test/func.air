
-----
id .a
-----
.a
=====

-----
id *a
-----
*a
=====

-----
id ^a
-----
^a
=====

-----
id a
-----
a
=====

-----
form a
-----
a
=====

-----
form .a
-----
a
=====

-----
do [a = 1, form *a]
-----
1
=====

-----
do [a = 1, form *a, a]
-----
1
=====

-----
do [a = 1, form ^a]
-----
1
=====

-----
do [a = 1, form ^a, is_null a]
-----
true
=====

-----
form a
-----
a
=====

-----
form .*a
-----
*a
=====

-----
form ; a ; b
-----
a ; b
=====

-----
form ; a ; b
-----
a ; b
=====

-----
form ; a ? b
-----
a ? b
=====

-----
form [a, b c]
-----
[a, b c]
=====

-----
eval .a
-----
a
=====

-----
do [a = 1, eval *a]
-----
1
=====

-----
do [a = 1, eval ^a]
-----
1
=====

-----
do [a = 1, eval ^a, is_null a]
-----
true
=====

-----
do [a = 1, eval a]
-----
1
=====

-----
do [a = 1, eval a, a]
-----
1
=====

-----
eval ; not ; true
-----
false
=====

-----
eval ; a ! 1
-----
1
=====

-----
do [a = 1, b = 2, eval ; a ? b]
-----
1 ? 2
=====

-----
do [f = mode ; id, f ; .a]
-----
.a
=====

-----
do [f = mode ; form, f ; a ; .b]
-----
a ; b
=====

-----
do [f = mode ; eval, f ; not ; true]
-----
false
=====

-----
do [f = mode ; ., f ; not ; true]
-----
false
=====

-----
do [
    f = mode ; {symbol : id, recursive : true},
    f ^a
]
-----
^a
=====

-----
do [
    f = mode ; {symbol : form, recursive : true},
    f .a
]
-----
a
=====

-----
do [
    a = 1,
    f = mode ; {symbol : eval, recursive : true},
    f a
]
-----
1
=====

-----
do [
    b = 1,
    f = mode ; {pair : form : eval, recursive : true},
    .a f b
]
-----
a : 1
=====

-----
do [
    b = 1,
    f = mode ; {pair : form, recursive : true},
    .a f b
]
-----
a : 1
=====

-----
do [
    b = 1,
    f = mode ; {pair : form : eval, default : id, recursive : true},
    [a f b, f *a]
]
-----
[a : 1, *a]
=====

-----
do [
    f = mode ; {pair : form : self, default : id, recursive : true},
    .a f .b
]
-----
a : .b
=====

-----
do [
    f = mode ; {abstract : form : id, recursive : true},
    f ; .a ! ^b
]
-----
a ! ^b
=====

-----
do [
    f = mode ; {abstract : form ! id, recursive : true},
    f ; .a ! ^b
]
-----
^b
=====

-----
do [
    b = 1,
    f = mode ; {abstract : form, recursive : true},
    f ; .a ! b
]
-----
a ! 1
=====

-----
do [
    b = 1,
    f = mode ; {abstract : id ! self, recursive : true},
    f ; .a ! b
]
-----
1
=====

-----
do [
    f = mode ; {call : form : id, recursive : true},
    f ; .a ; ^b
]
-----
a ; ^b
=====

-----
do [
    a = false,
    f = mode ; {call : eval ; form, recursive : true},
    f ; not ; ^a
]
-----
true
=====

-----
do [
    f = mode ; {call : form, recursive : true},
    a = 1,
    b = 2,
    f ; a ; b
]
-----
1 ; 2
=====

-----
do [
    f = mode ; {call : form : self, recursive : true},
    a = 1,
    f ; not ; a
]
-----
not ; 1
=====

-----
do [
    f = mode ; {call : self ; form, recursive : true},
    a = 1,
    f ; [a ; a, not ; true]
]
-----
[1 ; a, false]
=====

-----
do [
    f = mode ; {ask : form : id, recursive : true},
    f ; .a ? ^b
]
-----
a ? ^b
=====

-----
do [
    b = 1,
    f = mode ; {ask : form, recursive : true},
    f ; .a ? b
]
-----
a ? 1
=====

-----
do [
    b = 1,
    f = mode ; {ask : form : self, recursive : true},
    f ; .a ? b
]
-----
a ? 1
=====

-----
do [
    a = 1,
    f = mode ; {list : [eval, form] : id, recursive : true},
    f [a, a, a, a, *a, a]
]
-----
[1, a, a, a, *a, a]
=====

-----
do [
    a = 1,
    f = mode ; {list : [eval, form], default : id, recursive : true},
    f [a, a, a, a, *a, a]
]
-----
[1, a, a, a, *a, a]
=====

-----
do [
    f = mode ; {list : id, recursive : true},
    f [a, .a, *a, ^a]
]
-----
[a, .a, *a, ^a]
=====

-----
do [
    a = 1,
    f = mode ; {list : [eval, form, id, self], recursive : true},
    f [a, .a, *a, ^a]
]
-----
[1, a, *a, 1]
=====

-----
do [
    a = 1,
    c = 2,
    f = mode ; {map : {a : eval, b : id} : eval : id, recursive : true},
    f {a : a, b : a, c : d}
]
-----
{a : 1, b : a, 2 : d}
=====

-----
do [
    a = 1,
    c = 2,
    f = mode ; {map : {a : eval, b : id}, default : id, recursive : true},
    f {a : a, b : a, c : d}
]
-----
{a : 1, b : a, c : d}
=====

-----
do [
    a = 1,
    c = 2,
    f = mode ; {map : {a : eval, b : id} : form, recursive : true},
    f {a : a, b : a, .c : .d}
]
-----
{a : 1, b : a, c : d}
=====

-----
do [
    a = 1,
    c = 2,
    f = mode ; {map : id, recursive : true},
    f {.a : *a, ^b : .a, c : d}
]
-----
{.a : *a, ^b : .a, c : d}
=====

-----
do [
    a = 1,
    c = 2,
    f = mode ; {map : {a : id, b : self}, recursive : true},
    f {a : a, b : a, c : c}
]
-----
{a : a, b : 1, 2 : 2}
=====

-----
do [
    f = mode ; {symbol : id, call : eval ; self, default : form, recursive : true},
    a = false,
    f ; [.a, not ; *a]
]
-----
[.a, true]
=====

-----
do [
    f = mode ; {symbol : form},
    f a
]
-----
a
=====

-----
do [
    f = mode ; {pair : form},
    a f .b
]
-----
a : b
=====

-----
do [
    f = mode ; {pair : form : {pair : id}},
    f ; a : .b : *c ; ^d
]
-----
a : .b : *c ; ^d
=====

-----
do [
    f = mode ; {pair : form : {default : id, recursive : true}},
    f ; a : .b : *c ; ^d
]
-----
a : .b : *c ; ^d
=====

-----
do [
    c = 1,
    d = 2,
    f = mode ; {pair : form : {symbol : id}, default : form},
    f ; a : .b : *c ; ^d
]
-----
a : b : 1 ; 2
=====

-----
function.represent eval
-----
eval
=====

-----
function.represent ; mode ; {
    symbol : id,
    pair : form : eval,
    list : [eval, id],
    map : {a : eval, b : form} : id,
}
-----
{
    symbol : id,
    pair : form : eval,
    list : [eval, id],
    map : {a : eval, b : form} : id : id,
}
=====

-----
function.represent ; mode ; {
    symbol : id,
    pair : form : eval,
    list : [eval, id],
    map : {a : eval, b : form},
    recursive : true,
}
-----
{
    symbol : id,
    pair : form : eval,
    list : [eval, id],
    map : {a : eval, b : form},
    recursive : true,
}
=====

-----
do [
    f = function ; {
        body : i,
    },
    f ; not ; true
]
-----
false
=====

-----
do [
    f = function ; {
        body : *not ; i
    },
    f ; not ; true
]
-----
true
=====

-----
do [
    f = function ; {
        body : not ; i,
        context : context ; {variables :  {not : :}},
    },
    f ; not ; true
]
-----
true
=====

-----
do [
    f = function ; {
        body : n ; a,
        input_name : a,
        context : context ; {variables :  {n : not}},
    },
    f ; not ; true
]
-----
true
=====

-----
do [
    f = function ; {
        body_mode : form,
        body : i ; .*i,
    },
    f .a
]
-----
i ; a
=====

-----
do [
    f = function ; {
        body : do ; [a = a + 1, a],
        context_access : free,
        cell : true,
        context : context ; {variables : {do : :, = : :, + : :, a : 0}},
    },
    [.f ., .f ., .f .]
]
-----
[1, 2, 3]
=====

-----
do [
    a = 1,
    f = function ; {
        body : do ; [b = b + c | ..a, b],
        context_access : constant,
        cell : true,
        context : context ; {variables : {
            do : :,
            = : :,
            + : :,
            | : :,
            b : 0,
        }},
    },
    [.f ., .f ., .f .]
]
-----
[1, 2, 3]
=====

-----
do [
    a = 1,
    f = function ; {
        body : do ; [
            b = b + c | ..a,
            c | id ; a = a + 1,
            b,
        ],
        context_access : mutable,
        cell : true,
        context : context ; {variables : {
            do : :,
            = : :,
            + : :,
            | : :,
            id : :,
            b : 0,
        }},
    },
    [.f ., .f ., .f .]
]
-----
[1, 3, 6]
=====

-----
do [
    a = 1,
    f = function ; {
        body : c | ..a,
        context_access : constant,
        context : context ; {variables : {| : :}},
    },
    f .
]
-----
1
=====

-----
do [
    a = 1,
    f = function ; {
        body : c | ..a,
        context_access : mutable,
        context : context ; {variables : {| : :}},
    },
    f .
]
-----
1
=====

-----
do [
    f = function ; {
        body : c | = ';' i : 2,
        call_mode : id,
        context_access : mutable,
        context : context ; {
            variables : {
                | : :,
                = : :,
                ';' : :,
            }
        },
    },
    a = 1,
    f a,
    a
]
-----
2
=====

-----
do [
    f = function ; {
        body : c | = ';' i : 2,
        call_mode : id,
        context_access : mutable,
        context : context ; {
            variables : {
                | : :,
                = : :,
                ';' : :,
            }
        },
    },
    (a . final) = 1,
    f a,
    a
]
-----
1
=====

-----
do [
    f = function ; {
        body : c | = ';' i : 2,
        call_mode : id,
        context_access : constant,
        context : context ; {
            variables : {
                | : :,
                = : :,
                ';' : :,
            }
        },
    },
    a = 1,
    f a,
    a
]
-----
1
=====

-----
do [
    f = function ; {
        body : 1,
        context_access : constant,
    },
    . | f ';' .
]
-----
1
=====

-----
do [
    a = 1,
    f = function ; {
        context_name : ctx,
        body : 2,
        context_access : constant,
        context : context ; {variables : {ctx : 3 . .constant}},
    },
    f .,
    a == 1
]
-----
true
=====

-----
do [
    a = 1,
    f = function ; {
        context_name : ctx,
        body : ctx *= 2,
        context_access : constant,
        context : context ; {fallback : true},
    },
    f .,
    a
]
-----
1
=====

-----
function.represent ; function ; {body : i}
-----
{body : i}
=====

-----
function.represent not
-----
{id : not}
=====

-----
function.represent ; function ; {body : i, context_access : constant}
-----
{body : i, context_access : constant}
=====

-----
function.represent ==
-----
{id : ==}
=====

-----
do [
    call_mode = mode ; {pair : eval : id},
    abstract_mode = mode ; {pair : id : form},
    ask_mode = mode ; {pair : form : form},
    body_mode = mode ; {list : [eval, form, id]},
    repr = form ; {
        body_mode : ^body_mode,
        body : in,
        input_name : in,
        context_name : ctx,
        call_mode : ^call_mode,
        abstract_mode : ^abstract_mode,
        ask_mode : ^ask_mode,
        context_access : constant,
        cacheable : true,
        cell : true,
    },
    new_repr = function.represent ; function ; repr,
    repr == new_repr
]
-----
true
=====

-----
function.context_access function
-----
free
=====

-----
function.context_access function.context_access
-----
constant
=====

-----
function.context_access eval
-----
mutable
=====

-----
do [f = function ; {}, function.context_access f]
-----
mutable
=====

-----
function.represent ; function.call_mode ; not
-----
eval
=====

-----
function.represent ; function.call_mode ; eval
-----
id
=====

-----
do [f = function ; {}, function.represent ; function.call_mode ; f]
-----
eval
=====

-----
do [
    f = function ; {
        call_mode : mode ; {pair : eval : form},
    },
    function.represent ; function.call_mode ; f
]
-----
{pair : eval : form}
=====

-----
do [
    f = function ; {
        call_mode : mode ; {list : [eval, form, id] : form},
    },
    function.represent ; function.call_mode ; f
]
-----
{list : [eval, form, id] : form}
=====

-----
do [
    f = function ; {
        call_mode : mode ; {map : {a : eval, b : id} : id : form},
    },
    function.represent ; function.call_mode ; f
]
-----
{map : {a : eval, b : id} : id : form}
=====

-----
do [
    f = function ; {
        abstract_mode : mode ; {map : {a : form} : eval : id},
    },
    function.represent ; function.abstract_mode ; f
]
-----
{map : {a : form} : eval : id}
=====

-----
do [
    f = function ; {
        ask_mode : mode ; {map : {a : form} : eval : id},
    },
    function.represent ; function.ask_mode ; f
]
-----
{map : {a : form} : eval : id}
=====

-----
do [f = function ; {cacheable : false}, function.is_cacheable f]
-----
false
=====

-----
function.is_cacheable not
-----
true
=====

-----
function.is_primitive not
-----
true
=====

-----
do [f = function ; {}, function.is_primitive f]
-----
false
=====

-----
function.is_extension not
-----
false
=====

-----
function.is_cell not
-----
false
=====

-----
do [f = function ; {cell : true}, function.is_cell f]
-----
true
=====

-----
function.id not
-----
not
=====

-----
do [neg = not, function.id neg]
-----
not
=====

-----
do [
    f = function ; {body_mode : form},
    function.represent ; function.body_mode ; f
]
-----
form
=====

-----
do [f = function ; {body : i}, function.body f]
-----
i
=====

-----
do [
    ctx = context ; {variables : {a : 1}},
    f = function ; {context : ctx},
    (function.context f) == ctx
]
-----
true
=====

-----
do [f = function ; {}, function.input_name f]
-----
i
=====

-----
do [f = function ; {context_access : constant}, function.context_name f]
-----
c
