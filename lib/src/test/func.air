; [
    f = function $ {
        body : input,
    },
    f $ not $ true
]
-----
false
=====
; [
    f = function $ {
        body : (. not) $ input
    },
    f $ not $ true
]
-----
true
=====
; [
    f = function $ {
        body : not $ input,
        context : . context {: not}
    },
    f $ not $ true
]
-----
true
=====
; [
    f = function $ {
        body : n $ a,
        input_name : a,
        context : . context {n : not}
    },
    f $ not $ true
]
-----
true
=====
; [
    f = function $ {
        body : input,
        input_mode : id,
    },
    f $ not $ true
]
-----
not true
=====
; [
    f = function $ {
        body : (. not) $ input,
        input_mode : eager,
    },
    f $ not $ true
]
-----
true
=====
; [
    f = function $ {
        body : input,
        input_mode : lazy,
    },
    f $ not $ true
]
-----
not true
=====
; [
    f = function $ {
        body : input,
        input_mode : lazy,
    },
    f $ . $ not $ true
]
-----
false
=====
; [
    f = function $ {
        body : input,
        input_mode : eager,
    },
    f {a : b}
]
-----
{. : .}
=====
; [
    f = function $ {
        body : input,
        input_mode : {pair : lazy : eager},
    },
    a f b
]
-----
a : .
=====
; [
    f = function $ {
        body : input,
        input_mode : {pair : lazy : eager, symbol : id},
    },
    [a f b, f a]
]
-----
[a : ., a]
=====
; [
    f = function $ {
        body : input,
        input_mode : id,
    },
    f $ not $ false
]
-----
not false
=====
; [
    f = function $ {
        body : input,
        input_mode : {symbol : id},
    },
    f $ not $ false
]
-----
true
=====
; [
    f = function $ {
        body : input,
        input_mode : {symbol : id},
    },
    f a
]
-----
a
=====
; [
    a = 1,
    f = function $ {
        body : input,
        input_mode : {symbol : id},
    },
    f [a]
]
-----
[1]
=====
; [
    a = 1,
    f = function $ {
        body : input,
        input_mode : {list : [eager, lazy, ... id, eager]},
    },
    f [a, a, a, a, a, a]
]
-----
[1, a, a, a, a, 1]
=====
; [
    f = function $ {
        body : input,
        input_mode : {list : id},
    },
    f [a, b]
]
-----
[a, b]
=====
; [
    f = function $ {
        body : input,
        input_mode : {list : id},
    },
    f $ not $ false
]
-----
true
=====
; [
    f = function $ {
        body : input,
        input_mode : {list : (all {symbol : id})},
    },
    f [not true, b]
]
-----
[false, b]
=====
; [
    a = 1,
    f = function $ {
        body : input,
        input_mode : {map : {a : eager, b : id}},
    },
    f {a : a, b : a}
]
-----
{a : 1, b : a}
=====
; [
    f = function $ {
        body : input,
        input_mode : {map : id},
    },
    f {a : b}
]
-----
{a : b}
=====
; [
    f = function $ {
        body : input,
        input_mode : {map : id},
    },
    f (not true)
]
-----
false
=====
; [
    a = 1,
    f = function $ {
        body : input,
        input_mode : {map : lazy all eager},
    },
    f {: a}
]
-----
{a : 1}
=====
; [
    a = 1,
    f = function $ {
        body : input,
        input_mode : {call : eager $ id},
    },
    f (a a)
]
-----
1 a
=====
; [
    a = 1,
    f = function $ {
        body : input,
        input_mode : {reverse : eager ? id},
    },
    f $ a ? a
]
-----
1 ? a
=====
; [
    a = 1,
    f = function $ {
        body : caller | read $ a,
        caller_access : free,
        context : . context {
            : |,
            : read,
        }
    },
    f .
]
-----
.
=====
; [
    a = 1,
    f = function $ {
        body : caller | read $ a,
        caller_access : constant,
        context : . context {
            : |,
            : read,
        }
    },
    f .
]
-----
1
=====
; [
    a = 1,
    f = function $ {
        body : caller | read $ a,
        caller_access : mutable,
        context : . context {
            : |,
            : read,
        }
    },
    f .
]
-----
1
=====
; [
    a = 1,
    f = function $ {
        body : caller | read $ a,
        caller_access : constant,
        context : . context {
            : |,
            : read,
        }
    },
    f .
]
-----
1
=====
; [
    f = function $ {
        body : caller | $$ $ input = 2,
        input_mode : id,
        caller_access : mutable,
        context : . context {
            : |,
            : =,
            : $$,
        }
    },
    a = 1,
    f a,
    a
]
-----
2
=====
; [
    f = function $ {
        body : caller | $$ $ input = 2,
        input_mode : id,
        caller_access : mutable,
        context : . context {
            : |,
            : =,
            : $$,
        }
    },
    (a . final) = 1,
    f a,
    a
]
-----
1
=====
; [
    f = function $ {
        body : caller | $$ $ input = 2,
        input_mode : id,
        caller_access : constant,
        context : . context {
            : |,
            : =,
            : $$,
        }
    },
    a = 1,
    f a,
    a
]
-----
1
=====
; [
    dispatcher = function $ {
        body : if $ [
            input ==- id $ caller,
            id c,
            false
        ],
        caller_access : free,
        context : . context {
            : if,
            : ==-,
            : id,
        },
    },
    f = function $ {
        body : caller | a = 1,
        caller_access : mutable,
        context : (. context {: dispatcher}) context {
            : =,
            : |,
            c : . context {},
        }
    },
    f .,
    a
]
-----
1
=====
function.represent $ function $ {body : input}
-----
{body : input}
=====
function.represent not
-----
{id : not}
=====
function.represent $ function $ {body : input, caller_access : constant}
-----
{body : input, caller_access : constant}
=====
function.represent ===
-----
{id : ===, caller_access : constant, input_mode : {pair : {symbol : id} : {symbol : id}}}
=====
function.represent $ function $ {
    body : i,
    input_name : i,
    caller_name : c,
    input_mode : {pair : eager : eager},
    output_mode : {pair : lazy : lazy},
    caller_access : mutable,
}
-----
{
    body : i,
    input_name : i,
    caller_name : c,
    input_mode : {pair : eager : eager},
    output_mode : {pair : lazy : lazy},
    caller_access : mutable,
}
=====
function.caller_access function
-----
free
=====
function.caller_access function.caller_access
-----
constant
=====
function.caller_access eager
-----
mutable
=====
; [f = function $ {body : input}, function.caller_access f]
-----
free
=====
function.input_mode not
-----
eager
=====
function.input_mode eager
-----
id
=====
function.input_mode function.input_mode
-----
{symbol : id}
=====
; [f = function $ {body : input}, function.input_mode f]
-----
eager
=====
; [
    f = function $ {
        body : input,
        input_mode : {pair : eager : lazy},
    },
    function.input_mode f
]
-----
{pair : eager : lazy}
=====
; [
    f = function $ {
        body : input,
        input_mode : {symbol : id},
    },
    function.input_mode f
]
-----
{symbol : id}
=====
; [
    f = function $ {
        body : input,
        input_mode : {call : eager $ id},
    },
    function.input_mode f
]
-----
{call : eager $ id}
=====
; [
    f = function $ {
        body : input,
        input_mode : {list : [eager, lazy, id, ... eager, id]},
    },
    function.input_mode f
]
-----
{list : [eager, lazy, id, ... eager, id]}
=====
; [
    f = function $ {
        body : input,
        input_mode : {list : id},
    },
    function.input_mode f
]
-----
{list : id}
=====
; [
    f = function $ {
        body : input,
        input_mode : {list : (all {symbol : id})},
    },
    function.input_mode f
]
-----
{list : all $ {symbol : id}}
=====
; [
    f = function $ {
        body : input,
        input_mode : {map : {a : eager, b : id}},
    },
    function.input_mode f
]
-----
{map : {a : eager, b : id}}
=====
; [
    f = function $ {
        body : input,
        input_mode : {map : id},
    },
    function.input_mode f
]
-----
{map : id}
=====
; [
    f = function $ {
        body : input,
        input_mode : {map : eager all id},
    },
    function.input_mode f
]
-----
{map : eager all id}
=====
; [
    f = function $ {
        body : input,
        input_mode : {map : {list : [{symbol : id}, {list : id}]} all {list : all $ {map : id}}},
    },
    function.input_mode f
]
-----
{map : {list : [{symbol : id}, {list : id}]} all {list : all $ {map : id}}}
=====
; [
    f = function $ {
        body : input,
        output_mode : {map : eager all id},
    },
    function.output_mode f
]
-----
{map : eager all id}
=====
function.is_primitive not
-----
true
=====
; [f = function $ {body : input}, function.is_primitive f]
-----
false
=====
function.is_extension not
-----
false
=====
function.id not
-----
not
=====
; [neg = not, function.id neg]
-----
not
=====
; [f = function $ {body : input}, function.id f]
-----
.
=====
; [f = function $ {body : input}, function.body f]
-----
input
=====
function.body not
-----
.
=====
; [
    ctx = . context {a : 1},
    f = function $ {body : input, context : ctx},
    (function.context f) -== ctx
]
-----
true
=====
function.context not
-----
.
=====
; [f = function $ {body : input}, function.input_name f]
-----
input
=====
function.input_name not
-----
.
=====
; [f = function $ {body : input, caller_access : constant}, function.caller_name f]
-----
caller
=====
; [f = function $ {body : input}, function.caller_name f]
-----
.
=====
function.caller_name not
-----
.
