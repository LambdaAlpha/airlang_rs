;[
    f = function $ {
        body : input,
    },
    f $ not $ 't
]
-----
'f
=====
;[
    f = function $ {
        body : ('t not) $ input
    },
    f $ not $ 't
]
-----
't
=====
;[
    f = function $ {
        body : not $ input,
        context : 'u context {: not}
    },
    f $ not $ 't
]
-----
't
=====
;[
    f = function $ {
        body : n $ a,
        input_name : a,
        context : 'u context {n : not}
    },
    f $ not $ 't
]
-----
't
=====
;[
    f = function $ {
        body : input,
        input_mode : 'u,
    },
    f $ not $ 't
]
-----
not 't
=====
;[
    f = function $ {
        body : ('t not) $ input,
        input_mode : 't,
    },
    f $ not $ 't
]
-----
't
=====
;[
    f = function $ {
        body : input,
        input_mode : 'f,
    },
    f $ not $ 't
]
-----
not 't
=====
;[
    f = function $ {
        body : input,
        input_mode : 'f,
    },
    f $ 't $ not $ 't
]
-----
'f
=====
;[
    f = function $ {
        body : input,
        input_mode : 't,
    },
    f {a : b}
]
-----
{'u : 'u}
=====
;[
    f = function $ {
        body : input,
        input_mode : {pair : 'f : 't},
    },
    a f b
]
-----
a : 'u
=====
;[
    f = function $ {
        body : input,
        input_mode : {pair : 'f : 't, symbol : 'u},
    },
    [a f b, f a]
]
-----
[a : 'u, a]
=====
;[
    f = function $ {
        body : input,
        input_mode : 'u,
    },
    f $ not $ 'f
]
-----
not 'f
=====
;[
    f = function $ {
        body : input,
        input_mode : {symbol : 'u},
    },
    f $ not $ 'f
]
-----
't
=====
;[
    f = function $ {
        body : input,
        input_mode : {symbol : 'u},
    },
    f a
]
-----
a
=====
;[
    a = 1,
    f = function $ {
        body : input,
        input_mode : {symbol : 'u},
    },
    f [a]
]
-----
[1]
=====
;[
    a = 1,
    f = function $ {
        body : input,
        input_mode : {list : ['t, 'f, ... 'u, 't]},
    },
    f [a, a, a, a, a, a]
]
-----
[1, a, a, a, a, 1]
=====
;[
    f = function $ {
        body : input,
        input_mode : {list : 'u},
    },
    f [a, b]
]
-----
[a, b]
=====
;[
    f = function $ {
        body : input,
        input_mode : {list : 'u},
    },
    f $ not $ 'f
]
-----
't
=====
;[
    f = function $ {
        body : input,
        input_mode : {list : (all {symbol : 'u})},
    },
    f [not 't, b]
]
-----
['f, b]
=====
;[
    a = 1,
    f = function $ {
        body : input,
        input_mode : {map : {a : 't, b : 'u}},
    },
    f {a : a, b : a}
]
-----
{a : 1, b : a}
=====
;[
    f = function $ {
        body : input,
        input_mode : {map : 'u},
    },
    f {a : b}
]
-----
{a : b}
=====
;[
    f = function $ {
        body : input,
        input_mode : {map : 'u},
    },
    f (not 't)
]
-----
'f
=====
;[
    a = 1,
    f = function $ {
        body : input,
        input_mode : {map : 'f all 't},
    },
    f {: a}
]
-----
{a : 1}
=====
;[
    a = 1,
    f = function $ {
        body : input,
        input_mode : {call : 'u $ 't $ 'u},
    },
    f (a a)
]
-----
1 a
=====
;[
    a = 1,
    f = function $ {
        body : input,
        input_mode : {reverse : 't ? 'u},
    },
    f $ a ? a
]
-----
1 ? a
=====
;[
    a = 1,
    f = function $ {
        body : caller .. read $ a,
        caller_access : free,
        context : 'u context {
            : ..,
            : read,
        }
    },
    f 'u
]
-----
'u
=====
;[
    a = 1,
    f = function $ {
        body : caller .. read $ a,
        caller_access : constant,
        context : 'u context {
            : ..,
            : read,
        }
    },
    f 'u
]
-----
1
=====
;[
    a = 1,
    f = function $ {
        body : caller .. read $ a,
        caller_access : mutable,
        context : 'u context {
            : ..,
            : read,
        }
    },
    f 'u
]
-----
1
=====
;[
    a = 1,
    f = function $ {
        body : caller .. read $ a,
        caller_access : constant,
        context : 'u context {
            : ..,
            : read,
        }
    },
    f 'u
]
-----
1
=====
;[
    f = function $ {
        body : caller .. $$ $ input = 2,
        input_mode : 'u,
        caller_access : mutable,
        context : 'u context {
            : ..,
            : =,
            : $$,
        }
    },
    a = 1,
    f a,
    a
]
-----
2
=====
;[
    f = function $ {
        body : caller .. $$ $ input = 2,
        input_mode : 'u,
        caller_access : mutable,
        context : 'u context {
            : ..,
            : =,
            : $$,
        }
    },
    (a ': final) = 1,
    f a,
    a
]
-----
1
=====
;[
    f = function $ {
        body : caller .. $$ $ input = 2,
        input_mode : 'u,
        caller_access : constant,
        context : 'u context {
            : ..,
            : =,
            : $$,
        }
    },
    a = 1,
    f a,
    a
]
-----
1
=====
function.represent $ function $ {body : input}
-----
{body : input}
=====
function.represent not
-----
{id : not}
=====
function.represent $ function $ {body : input, caller_access : constant}
-----
{body : input, caller_access : constant}
=====
function.represent ===
-----
{id : ===, caller_access : constant, input_mode : {pair : {symbol : 'u} : {symbol : 'u}}}
=====
function.represent $ function $ {
    body : i,
    input_name : i,
    caller_name : c,
    input_mode : {pair : 't : 't},
    output_mode : {pair : 'f : 'f},
    caller_access : mutable,
}
-----
{
    body : i,
    input_name : i,
    caller_name : c,
    input_mode : {pair : 't : 't},
    output_mode : {pair : 'f : 'f},
    caller_access : mutable,
}
=====
function.caller_access function
-----
free
=====
function.caller_access function.caller_access
-----
constant
=====
function.caller_access `t
-----
mutable
=====
;[f = function $ {body : input}, function.caller_access f]
-----
free
=====
function.input_mode not
-----
't
=====
function.input_mode `t
-----
'u
=====
function.input_mode function.input_mode
-----
{symbol : 'u}
=====
;[f = function $ {body : input}, function.input_mode f]
-----
't
=====
;[
    f = function $ {
        body : input,
        input_mode : {pair : 't : 'f},
    },
    function.input_mode f
]
-----
{pair : 't : 'f}
=====
;[
    f = function $ {
        body : input,
        input_mode : {symbol : 'u},
    },
    function.input_mode f
]
-----
{symbol : 'u}
=====
;[
    f = function $ {
        body : input,
        input_mode : {call : 'u $ 't $ 'u},
    },
    function.input_mode f
]
-----
{call : 't $ 'u}
=====
;[
    f = function $ {
        body : input,
        input_mode : {list : ['t, 'f, 'u, ... 't, 'u]},
    },
    function.input_mode f
]
-----
{list : ['t, 'f, 'u, ... 't, 'u]}
=====
;[
    f = function $ {
        body : input,
        input_mode : {list : 'u},
    },
    function.input_mode f
]
-----
{list : 'u}
=====
;[
    f = function $ {
        body : input,
        input_mode : {list : (all {symbol : 'u})},
    },
    function.input_mode f
]
-----
{list : all $ {symbol : 'u}}
=====
;[
    f = function $ {
        body : input,
        input_mode : {map : {a : 't, b : 'u}},
    },
    function.input_mode f
]
-----
{map : {a : 't, b : 'u}}
=====
;[
    f = function $ {
        body : input,
        input_mode : {map : 'u},
    },
    function.input_mode f
]
-----
{map : 'u}
=====
;[
    f = function $ {
        body : input,
        input_mode : {map : 't all 'u},
    },
    function.input_mode f
]
-----
{map : 't all 'u}
=====
;[
    f = function $ {
        body : input,
        input_mode : {map : {list : [{symbol : 'u}, {list : 'u}]} all {list : all $ {map : 'u}}},
    },
    function.input_mode f
]
-----
{map : {list : [{symbol : 'u}, {list : 'u}]} all {list : all $ {map : 'u}}}
=====
;[
    f = function $ {
        body : input,
        output_mode : {map : 't all 'u},
    },
    function.output_mode f
]
-----
{map : 't all 'u}
=====
function.is_primitive not
-----
't
=====
;[f = function $ {body : input}, function.is_primitive f]
-----
'f
=====
function.is_extension not
-----
'f
=====
function.id not
-----
not
=====
;[neg = not, function.id neg]
-----
not
=====
;[f = function $ {body : input}, function.id f]
-----
'u
=====
;[f = function $ {body : input}, function.body f]
-----
input
=====
function.body not
-----
'u
=====
;[
    ctx = 'u context {a : 1},
    f = function $ {body : input, context : ctx},
    (function.context f) -== ctx
]
-----
't
=====
function.context not
-----
'u
=====
;[f = function $ {body : input}, function.input_name f]
-----
input
=====
function.input_name not
-----
'u
=====
;[f = function $ {body : input, caller_access : constant}, function.caller_name f]
-----
caller
=====
;[f = function $ {body : input}, function.caller_name f]
-----
'u
=====
function.caller_name not
-----
'u
