id trivial
-----
; id a
-----
a
=====
id .
-----
; id .a
-----
.a
=====
id *
-----
; id *a
-----
*a
=====
id ^
-----
; id ^a
-----
^a
=====
form. trivial
-----
; form. a
-----
a
=====
form. .
-----
; form. .a
-----
a
=====
form. . special
-----
; form. .*a
-----
*a
=====
form. *
-----
; do [a = 1, [; form. *a, a]]
-----
[1, 1]
=====
form. * special
-----
; do [.*.a = 1, [; form. *.a, *.a]]
-----
[1, 1]
=====
form. ^
-----
; do [a = 1, [; form. ^a, a is_null .]]
-----
[1, true]
=====
form. ^ special
-----
; do [.**a = 1, [; form. ^*a, .*a is_null .]]
-----
[1, true]
=====
form* trivial
-----
; do [a = 1, [; form* a, a]]
-----
[1, 1]
=====
form* .
-----
; form* .a
-----
a
=====
form* *
-----
; do [a = 1, [; form* *a, a]]
-----
[1, 1]
=====
form* ^
-----
; do [a = 1, [; form* ^a, a is_null .]]
-----
[1, true]
=====
form^ trivial
-----
; do [a = 1, [; form^ a, a is_null .]]
-----
[1, true]
=====
form^ .
-----
; form^ .a
-----
a
=====
form^ *
-----
; do [a = 1, [; form^ *a, a]]
-----
[1, 1]
=====
form^ ^
-----
; do [a = 1, [; form^ ^a, a is_null .]]
-----
[1, true]
=====
; form
-----
; form. ; a b
-----
; a b
=====
form primitive
-----
; form. [a, ; b c]
-----
[a, ; b c]
=====
eval. trivial
-----
; eval. a
-----
a
=====
eval. .
-----
; eval. .a
-----
a
=====
eval. *
-----
; do [a = 1, [; eval. *a, a]]
-----
[1, 1]
=====
eval. ^
-----
; do [a = 1, [; eval. ^a, a is_null .]]
-----
[1, true]
=====
eval* trivial
-----
; do [a = 1, [; eval* a, a]]
-----
[1, 1]
=====
eval* .
-----
; eval* .a
-----
a
=====
eval* *
-----
; do [a = 1, [; eval* *a, a]]
-----
[1, 1]
=====
eval* ^
-----
; do [a = 1, [; eval* ^a, a is_null .]]
-----
[1, true]
=====
eval^ trivial
-----
; do [a = 1, [; eval^ a, a is_null .]]
-----
[1, true]
=====
eval^ .
-----
; eval^ .a
-----
a
=====
eval^ *
-----
; do [a = 1, [; eval^ *a, a]]
-----
[1, 1]
=====
eval^ ^
-----
; do [a = 1, [; eval^ ^a, a is_null .]]
-----
[1, true]
=====
mode id
-----
; do [f = ; mode ., ; f .a]
-----
.a
=====
mode primitive from symbol 1
-----
; do [f = ; mode form., ; f ; a .b]
-----
; a b
=====
mode primitive from symbol 2
-----
; do [f = ; mode eval*, ; f ; not true]
-----
false
=====
mode primitive from symbol 3
-----
; do [a = 1, f = ; mode form^, [; f ; a .b, a is_null .]]
-----
[; 1 b, true]
=====
default mode
-----
; do [f = ; mode ., ; f ; not true]
-----
; not true
=====
mode primitive symbol id
-----
; do [
    f = ; mode {symbol : ., primitive : true},
    ; f [^a]
]
-----
[^a]
=====
mode primitive symbol .
-----
; do [
    f = ; mode {symbol : .., list : form, primitive : true},
    ; f [.a]
]
-----
[a]
=====
mode primitive symbol *
-----
; do [
    a = 1,
    f = ; mode {symbol : .*, list : form, primitive : true},
    ; f [a]
]
-----
[1]
=====
mode primitive symbol ^
-----
; do [
    a = 1,
    f = ; mode {symbol : .^, list : form, primitive : true},
    [; f [a], a is_null .]
]
-----
[[1], true]
=====
mode primitive pair id
-----
; do [
    b = 1,
    f = ; mode {pair : ., list : form, primitive : true},
    ; f [.a : b]
]
-----
[.a : b]
=====
mode primitive pair form
-----
; do [
    b = 1,
    f = ; mode {pair : form, list : form, symbol : .*, primitive : true},
    ; f [.a : b]
]
-----
[a : 1]
=====
mode primitive call id
-----
; do [
    f = ; mode {call : ., list : form, primitive : true},
    ; f [; .a ^b]
]
-----
[; .a ^b]
=====
mode primitive call form
-----
; do [
    b = 1,
    f = ; mode {call : form, list : form, symbol : .*, primitive : true},
    ; f [; .a b]
]
-----
[; a 1]
=====
mode primitive call eval
-----
; do [
    f = ; mode {call : eval, list : form, primitive : true},
    ; f [; not true]
]
-----
[false]
=====
mode primitive list id
-----
; do [
    f = ; mode {list : ., symbol : .*, primitive : true},
    ; f [a, .a, *a, ^a]
]
-----
[a, .a, *a, ^a]
=====
mode primitive list form
-----
; do [
    a = 1,
    f = ; mode {list : form, symbol : .*, primitive : true},
    ; f [a, .a, *a, ^a]
]
-----
[1, a, 1, 1]
=====
mode primitive map id
-----
; do [
    a = 1,
    c = 2,
    f = ; mode {map : ., symbol : .*, primitive : true},
    ; f {.a : *a, ^b : .a, c : d}
]
-----
{.a : *a, ^b : .a, c : d}
=====
mode primitive map form
-----
; do [
    a = 1,
    b = 2,
    c = 3,
    f = ; mode {map : form, symbol : .*, primitive : true},
    ; f {.a : a, b : .a, *c : .d}
]
-----
{a : 1, 2 : a, 3 : d}
=====
mode primitive multiple
-----
; do [
    f = ; mode {symbol : ., call : form, list : form, primitive : true},
    ; f [.a, ; .b .c]
]
-----
[.a, ; .b .c]
=====
mode symbol .
-----
; do [
    a = 1,
    f = ; mode {symbol : .., list : form*},
    [; f a, ; f [a]]
]
-----
[a, [1]]
=====
mode symbol *
-----
; do [
    a = 1,
    f = ; mode {symbol : .*, list : form.},
    [; f a, ; f [a]]
]
-----
[1, [a]]
=====
mode pair primitive
-----
; do [
    f = ; mode {pair : form.},
    a f .b
]
-----
a : b
=====
mode composite
-----
; do [
    f = ; mode {pair : form. : {pair : .}},
    ; f a : .b : ; *c ^d
]
-----
a : .b : ; *c ^d
=====
mode multiple
-----
; do [
    c = 1,
    d = 2,
    f = ; mode {pair : form. : {pair : form.}},
    ; f a : .b : ; *c ^d
]
-----
a : b : ; 1 2
=====
mode call form
-----
; do [
    f = ; mode {call : {this : {}, that : {symbol : ..}} : eval* : eval*},
    [; f ; this .a, ; f ; that .a, ; f ; .other ; not true]
]
-----
[; this .a, ; that a, ; other false]
=====
mode func
-----
; do [
    f = ; mode *not,
    ; f true
]
-----
false
=====
mode func forward mode
-----
; do [
    m = ; mode *not,
    f = ; function {forward_mode : ^m, code : (._ : .i) : .i},
    ; f true
]
-----
false
=====
mode access free
-----
id function.context_access .
-----
free
=====
mode access const
-----
; do [f = ; mode *read, f function.context_access .]
-----
constant
=====
mode access mutable
-----
eval* function.context_access .
-----
mutable
=====
mode repr
-----
; function.represent eval*
-----
eval*
=====
mode repr composite
-----
; function.represent ; mode {
    symbol : .*,
    pair : form. : eval*,
    list : [eval*, .],
    map : {a : eval*, b : form.} : form*,
}
-----
{
    symbol : *,
    pair : form. : eval*,
    list : [eval*, .],
    map : {a : eval*, b : form.} : form* : form*,
}
=====
mode repr primitive
-----
; function.represent ; mode {
    symbol : .^,
    pair : form,
    call : eval,
    map : form,
    primitive : true,
}
-----
{
    symbol : ^,
    pair : form,
    call : eval,
    map : form,
    primitive : true,
}
=====
primitive
-----
not == ; function {id : not}
-----
true
=====
recursive call
-----
; do [
    f = ; function {
        code : (._ : .i) : .i,
    },
    ; f ; not true
]
-----
false
=====
call external func
-----
; do [
    f = ; function {
        code : (._ : .i) : ; not .i
    },
    ; f ; not true
]
-----
true
=====
call internal func
-----
; do [
    f = ; function {
        code : (._ : .i) : ; .not .i,
        context : ; context {variables :  {not : not}},
    },
    ; f ; not true
]
-----
true
=====
call rename
-----
; do [
    f = ; function {
        code : (._ : .a) : ; .n .a,
        context : ; context {variables :  {n : not}},
    },
    ; f ; not true
]
-----
true
=====
cell free
-----
; do [
    f = ; function {
        code : ._ : ; do [.a = .a + 1, .a],
        context_access : free,
        cell : true,
        context : ; context {variables : {a : 0}},
    },
    [; .f ., ; .f ., ; .f .]
]
-----
[1, 2, 3]
=====
cell const
-----
; do [
    a = 1,
    f = ; function {
        code : (.c : ._) : ; do [.b = .b + .c | ..a, .b],
        context_access : constant,
        cell : true,
        context : ; context {variables : {
            b : 0,
        }},
    },
    [; .f ., ; .f ., ; .f .]
]
-----
[1, 2, 3]
=====
cell none
-----
; do [
    a = 1,
    f = ; function {
        code : (.c : ._) : ; do [
            .b = .b + .c | ..a,
            .c | ..a = ..a + 1,
            .b,
        ],
        context_access : mutable,
        cell : true,
        context : ; context {variables : {
            b : 0,
        }},
    },
    [; .f ., ; .f ., ; .f .]
]
-----
[1, 3, 6]
=====
cell mutable contract final
-----
; do [
    a = 1,
    (f . final) = ; function {
        code : (.c : ._) : ; do [
            .b = .b + .c | ..a,
            .c | ..a = ..a + 1,
            .b,
        ],
        context_access : mutable,
        cell : true,
        context : ; context {variables : {
            b : 0,
        }},
    },
    [; .f ., ; .f ., ; .f .]
]
-----
[1, 2, 3]
=====
const const
-----
; do [
    a = 1,
    f = ; function {
        code : (.c : ._) : .c | ..a,
        context_access : constant,
    },
    ; f .
]
-----
1
=====
mutable const
-----
; do [
    a = 1,
    f = ; function {
        code : (.c : ._) : .c | ..a,
        context_access : mutable,
    },
    ; f .
]
-----
1
=====
mutable mutate
-----
; do [
    f = ; function {
        code : (.c : .i) : .c | .i = 2,
        forward_mode : id,
        context_access : mutable,
    },
    a = 1,
    ; f a,
    a
]
-----
2
=====
const mutate fail
-----
; do [
    f = ; function {
        code : (.c : .i) : .c | .i = 2,
        forward_mode : id,
        context_access : constant,
    },
    a = 1,
    ; f a,
    a
]
-----
1
=====
const free
-----
; do [
    f = ; function {
        code : (._c : ._) : 1,
        context_access : constant,
    },
    . | ; f .
]
-----
1
=====
ctx name occupied
-----
; do [
    a = 1,
    f = ; function {
        code : (.ctx : ._) : 2,
        context_access : constant,
        context : ; context {variables : {ctx : 3 . .constant}},
    },
    ; f .,
    a == 1
]
-----
true
=====
ctx explicit
-----
; do [
    a = 1 : 2,
    f = ; function {
        context_explicit : true,
        forward_mode : ; mode {pair : {symbol : ..} : eval*},
        code : (.p : .i) : .p pair.set_first .i,
    },
    a f 3,
    a
]
-----
3 : 2
=====
repr
-----
; function.represent ; function {code : (._ : .i) : .i}
-----
{code : (_ : i) : i}
=====
repr primitive free
-----
; function.represent not
-----
{id : not}
=====
repr const
-----
; function.represent ; function {code : (._ : .i) : .i, context_access : constant}
-----
{code : (_ : i) : i, context_access : constant}
=====
repr primitive const
-----
; function.represent ==
-----
{id : ==}
=====
repr composite
-----
; do [
    forward_mode = ; mode {pair : eval* : .},
    reverse_mode = ; mode {pair : eval* : .},
    repr = ; form. {
        code : (.ctx : .in) : in,
        forward_mode : ^forward_mode,
        reverse_mode : ^reverse_mode,
        context_access : constant,
        cell : true,
    },
    new_repr = ; function.represent ; function repr,
    repr == new_repr
]
-----
true
=====
access free
-----
function function.context_access .
-----
free
=====
access const
-----
read function.context_access .
-----
constant
=====
access mutable
-----
eval* function.context_access .
-----
mutable
=====
access default
-----
; do [f = ; function {}, f function.context_access .]
-----
mutable
=====
is_context_explicit true
-----
pair.first function.is_context_explicit .
-----
true
=====
is_context_explicit false
-----
eval* function.is_context_explicit .
-----
false
=====
forward mode primitive
-----
; function.represent not function.forward_mode .
-----
eval*
=====
forward mode mode
-----
; function.represent eval* function.forward_mode .
-----
.
=====
forward mode default
-----
; do [f = ; function {}, ; function.represent f function.forward_mode .]
-----
eval*
=====
forward mode 1
-----
; do [
    f = ; function {
        forward_mode : ; mode {pair : eval* : form.},
    },
    ; function.represent f function.forward_mode .
]
-----
{pair : eval* : form.}
=====
forward mode 2
-----
; do [
    f = ; function {
        forward_mode : ; mode {list : [eval*, form., .] : form.},
    },
    ; function.represent f function.forward_mode .
]
-----
{list : [eval*, form., .] : form.}
=====
forward mode 3
-----
; do [
    f = ; function {
        forward_mode : ; mode {map : {a : eval*, b : .} : . : form.},
    },
    ; function.represent f function.forward_mode .
]
-----
{map : {a : eval*, b : .} : . : form.}
=====
reverse mode
-----
; function.represent not function.reverse_mode .
-----
eval*
=====
is_primitive primitive
-----
not function.is_primitive .
-----
true
=====
is_primitive composite
-----
; do [f = ; function {}, f function.is_primitive .]
-----
false
=====
is_extension prelude
-----
not function.is_extension .
-----
false
=====
is_cell false
-----
not function.is_cell .
-----
false
=====
is_cell true
-----
; do [f = ; function {cell : true}, f function.is_cell .]
-----
true
=====
id primitive
-----
not function.id .
-----
not
=====
id rename
-----
; do [neg = not, neg function.id .]
-----
not
=====
code
-----
; do [f = ; function {code : (.ctx : .i) : .i}, f function.code .]
-----
(ctx : i) : i
=====
ctx
-----
; do [
    ctx = ; context {variables : {a : 1}},
    f = ; function {context : ctx},
    (f function.context .) == ctx
]
-----
true
