;[
    f = (function {
        body : input,
    }),
    f (not 't)
]
-----
'f
=====
;[
    f = (function {
        body : (('t not) input)
    }),
    f (not 't)
]
-----
't
=====
;[
    f = (function {
        body : (not input),
        context : (' context {: not})
    }),
    f (not 't)
]
-----
't
=====
;[
    f = (function {
        body : (n a),
        input_name : a,
        context : (' context {n : not})
    }),
    f (not 't)
]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : ',
    }),
    f (not 't)
]
-----
not 't
=====
;[
    f = (function {
        body : (('t not) input),
        input_mode : 't,
    }),
    f (not 't)
]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : 'f,
    }),
    f (not 't)
]
-----
not 't
=====
;[
    f = (function {
        body : input,
        input_mode : 'f,
    }),
    f ('t (not 't))
]
-----
'f
=====
;[
    f = (function {
        body : input,
        input_mode : 't,
    }),
    f {a : b}
]
-----
{' : '}
=====
;[
    f = (function {
        body : input,
        input_mode : ('f : 't),
    }),
    a f b
]
-----
a : '
=====
;[
    f = (function {
        body : input,
        input_mode : ',
    }),
    f (not 'f)
]
-----
not 'f
=====
;[
    f = (function {
        body : input,
        input_mode : (symbol '),
    }),
    f (not 'f)
]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : (symbol '),
    }),
    f a
]
-----
a
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : (symbol '),
    }),
    f [a]
]
-----
[1]
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : ['t, 'f, ... ', 't],
    }),
    f [a, a, a, a, a, a]
]
-----
[1, a, a, a, a, 1]
=====
;[
    f = (function {
        body : input,
        input_mode : (list '),
    }),
    f [a, b]
]
-----
[a, b]
=====
;[
    f = (function {
        body : input,
        input_mode : (list '),
    }),
    f (not 'f)
]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : (list_items (symbol ')),
    }),
    f [not 't, b]
]
-----
['f, b]
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : {a : 't, b : '},
    }),
    f {a : a, b : a}
]
-----
{a : 1, b : a}
=====
;[
    f = (function {
        body : input,
        input_mode : (map '),
    }),
    f {a : b}
]
-----
{a : b}
=====
;[
    f = (function {
        body : input,
        input_mode : (map '),
    }),
    f (not 't)
]
-----
'f
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : ('f map_items 't),
    }),
    f {: a}
]
-----
{a : 1}
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : (call (' ('t '))),
    }),
    f (a a)
]
-----
1 a
=====
;[
    a = 1,
    f = (function {
        body : input,
        input_mode : ('t ? '),
    }),
    f (a ? a)
]
-----
1 ? a
=====
;[
    f = (function {
        body : (;[set_meta (' context {super : (' (' caller))}), read $$ input]),
        input_mode : ',
        caller_access : mutable,
        context : (prelude ')
    }),
    a = 1,
    f a
]
-----
1
=====
;[
    a = 1,
    f = (function {
        body : ([caller] do (read a)),
        caller_access : free,
        context : (' context {
            : do,
            : read,
        })
    }),
    f '
]
-----
'
=====
;[
    a = 1,
    f = (function {
        body : ([caller] do (read a)),
        caller_access : constant,
        context : (' context {
            : do,
            : read,
        })
    }),
    f '
]
-----
1
=====
;[
    a = 1,
    f = (function {
        body : ([caller] do (read a)),
        caller_access : mutable,
        context : (' context {
            : do,
            : read,
        })
    }),
    f '
]
-----
1
=====
;[
    a = 1,
    f = (function {
        body : ([caller] do (read a)),
        caller_access : constant,
        context : (' context {
            : do,
            : read,
        })
    }),
    f '
]
-----
1
=====
;[
    f = (function {
        body : ([caller] do ((' ('t input)) = 2)),
        input_mode : ',
        caller_access : mutable,
        context : (' context {
            : do,
            : =,
        })
    }),
    a = 1,
    f a,
    a
]
-----
2
=====
;[
    f = (function {
        body : ([caller] do ((' ('t input)) = 2)),
        input_mode : ',
        caller_access : mutable,
        context : (' context {
            : do,
            : =,
        })
    }),
    (a ': final) = 1,
    f a,
    a
]
-----
1
=====
;[
    f = (function {
        body : ([caller] do ((' ('t input)) = 2)),
        input_mode : ',
        caller_access : constant,
        context : (' context {
            : do,
            : =,
        })
    }),
    a = 1,
    f a,
    a
]
-----
1
=====
function.represent (function {body : input})
-----
{body : input}
=====
function.represent not
-----
{id : not}
=====
function.represent (function {body : input, caller_access : constant})
-----
{body : input, caller_access : constant}
=====
function.represent ===
-----
{id : ===, caller_access : constant, input_mode : ((symbol ') : (symbol '))}
=====
function.represent (function {
    body : i,
    input_name : i,
    caller_name : c,
    input_mode : ('t : 't),
    output_mode : ('f : 'f),
    caller_access : mutable,
})
-----
{
    body : i,
    input_name : i,
    caller_name : c,
    input_mode : ('t : 't),
    output_mode : ('f : 'f),
    caller_access : mutable,
}
=====
function.caller_access function
-----
free
=====
function.caller_access function.caller_access
-----
constant
=====
function.caller_access ''t
-----
mutable
=====
;[f = (function {body : input}), function.caller_access f]
-----
free
=====
function.input_mode not
-----
't
=====
function.input_mode ''t
-----
'
=====
function.input_mode function.input_mode
-----
symbol '
=====
;[f = (function {body : input}), function.input_mode f]
-----
't
=====
;[
    f = (function {
        body : input,
        input_mode : ('t : 'f),
    }),
    function.input_mode f
]
-----
't : 'f
=====
;[
    f = (function {
        body : input,
        input_mode : (symbol '),
    }),
    function.input_mode f
]
-----
symbol '
=====
;[
    f = (function {
        body : input,
        input_mode : (call (' ('t '))),
    }),
    function.input_mode f
]
-----
call ('t ')
=====
;[
    f = (function {
        body : input,
        input_mode : ['t, 'f, ', ... 't, '],
    }),
    function.input_mode f
]
-----
['t, 'f, ', ... 't, ']
=====
;[
    f = (function {
        body : input,
        input_mode : (list '),
    }),
    function.input_mode f
]
-----
list '
=====
;[
    f = (function {
        body : input,
        input_mode : (list_items (symbol ')),
    }),
    function.input_mode f
]
-----
list_items (symbol ')
=====
;[
    f = (function {
        body : input,
        input_mode : {a : 't, b : '},
    }),
    function.input_mode f
]
-----
{a : 't, b : '}
=====
;[
    f = (function {
        body : input,
        input_mode : (map '),
    }),
    function.input_mode f
]
-----
map '
=====
;[
    f = (function {
        body : input,
        input_mode : ('t map_items '),
    }),
    function.input_mode f
]
-----
't map_items '
=====
;[
    f = (function {
        body : input,
        input_mode : ([symbol ', list '] map_items (list_items (map '))),
    }),
    function.input_mode f
]
-----
[symbol ', list '] map_items (list_items (map '))
=====
;[
    f = (function {
        body : input,
        output_mode : ('t map_items '),
    }),
    function.output_mode f
]
-----
't map_items '
=====
function.is_primitive not
-----
't
=====
;[f = (function {body : input}), function.is_primitive f]
-----
'f
=====
function.id not
-----
not
=====
;[neg = not, function.id neg]
-----
not
=====
;[f = (function {body : input}), function.id f]
-----
'
=====
;[f = (function {body : input}), function.body f]
-----
input
=====
function.body not
-----
'
=====
;[
    ctx = (' context {a : 1}),
    f = (function {body : input, context : ctx}),
    (function.context f) -== ctx
]
-----
't
=====
function.context not
-----
'
=====
;[f = (function {body : input}), function.input_name f]
-----
input
=====
function.input_name not
-----
'
=====
;[f = (function {body : input, caller_access : constant}), function.caller_name f]
-----
caller
=====
;[f = (function {body : input}), function.caller_name f]
-----
'
=====
function.caller_name not
-----
'
