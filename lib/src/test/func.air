do [
    f = function ! {
        body : i,
    },
    f ! not ! true
]
-----
false
=====
do [
    f = function ! {
        body : $not ! i
    },
    f ! not ! true
]
-----
true
=====
do [
    f = function ! {
        body : not ! i,
        prelude : context ! {variables :  {not : :}},
    },
    f ! not ! true
]
-----
true
=====
do [
    f = function ! {
        body : n ! a,
        input_name : .a,
        prelude : context ! {variables :  {n : not}},
    },
    f ! not ! true
]
-----
true
=====
do [
    f = function ! {
        body : i,
        call_mode : id,
    },
    f ! not ! true
]
-----
not true
=====
do [
    f = function ! {
        body : $not ! i,
        call_mode : eval,
    },
    f ! not ! true
]
-----
true
=====
do [
    f = function ! {
        body : i,
        call_mode : form,
    },
    f ! not ! true
]
-----
not true
=====
do [
    a = 1,
    b = 2,
    f = function ! {
        body : i,
        call_mode : eval,
    },
    f {a : b}
]
-----
{1 : 2}
=====
do [
    b = 1,
    f = function ! {
        body : i,
        call_mode : {pair : form : eval},
    },
    a f b
]
-----
a : 1
=====
do [
    b = 1,
    f = function ! {
        body : i,
        call_mode : {pair : form : eval, default : id},
    },
    [a f b, f $a]
]
-----
[a : 1, $a]
=====
do [
    f = function ! {
        body : i,
        call_mode : id,
    },
    f ! not ! false
]
-----
not false
=====
do [
    a = 1,
    f = function ! {
        body : i,
        call_mode : {list : [eval, form] : id},
    },
    f [a, a, a, a, $a, a]
]
-----
[1, a, a, a, $a, a]
=====
do [
    a = 1,
    f = function ! {
        body : i,
        call_mode : {list : [eval, form], default : id},
    },
    f [a, a, a, a, $a, a]
]
-----
[1, a, a, a, $a, a]
=====
do [
    a = 1,
    c = 2,
    f = function ! {
        body : i,
        call_mode : {map : {a : eval, b : id} : eval : id},
    },
    f {a : a, b : a, c : d}
]
-----
{a : 1, b : a, 2 : d}
=====
do [
    a = 1,
    c = 2,
    f = function ! {
        body : i,
        call_mode : {map : {a : eval, b : id}, default : id},
    },
    f {a : a, b : a, c : d}
]
-----
{a : 1, b : a, c : d}
=====
do [
    f = function ! {
        body : do ! [a = a + 1, a],
        context_access : .free,
        static : false,
        prelude : context ! {variables : {do : :, = : :, + : :, a : 0}},
    },
    [.f ., .f ., .f .]
]
-----
[1, 2, 3]
=====
do [
    a = 1,
    f = function ! {
        body : c | ..a,
        context_access : .free,
        static : true,
        prelude : context ! {variables : {| : :}},
    },
    f .
]
-----
.
=====
do [
    a = 1,
    f = function ! {
        body : c | ..a,
        context_access : .constant,
        prelude : context ! {variables : {| : :}},
    },
    f .
]
-----
1
=====
do [
    a = 1,
    f = function ! {
        body : c | ..a,
        context_access : .mutable,
        prelude : context ! {variables : {| : :}},
    },
    f .
]
-----
1
=====
do [
    f = function ! {
        body : c | = '!' i : 2,
        call_mode : id,
        context_access : .mutable,
        prelude : context ! {
            variables : {
                | : :,
                = : :,
                '!' : :,
            }
        },
    },
    a = 1,
    f a,
    a
]
-----
2
=====
do [
    f = function ! {
        body : c | = '!' i : 2,
        call_mode : id,
        context_access : .mutable,
        prelude : context ! {
            variables : {
                | : :,
                = : :,
                '!' : :,
            }
        },
    },
    (a . final) = 1,
    f a,
    a
]
-----
1
=====
do [
    f = function ! {
        body : c | = '!' i : 2,
        call_mode : id,
        context_access : .constant,
        prelude : context ! {
            variables : {
                | : :,
                = : :,
                '!' : :,
            }
        },
    },
    a = 1,
    f a,
    a
]
-----
1
=====
do [
    f = function ! {
        body : 1,
        context_access : .constant,
    },
    . | f '!' .
]
-----
1
=====
do [
    a = 1,
    f = function ! {
        context_name : .ctx,
        body : 2,
        context_access : .constant,
        prelude : context ! {variables : {ctx : 3 . .constant}},
    },
    b = f ! .,
    (a == 1) and b == 2
]
-----
true
=====
do [
    a = 1,
    f = function ! {
        context_name : .ctx,
        body : ctx $= 2,
        context_access : .constant,
        prelude : context ! {fallback : true},
    },
    f .,
    a
]
-----
1
=====
function.represent ! function ! {body : i}
-----
{body : i}
=====
function.represent not
-----
{id : not}
=====
function.represent ! function ! {body : i, context_access : .constant}
-----
{body : i, context_access : constant}
=====
function.represent ==
-----
{id : ==}
=====
function.represent ! function ! {
    body : in,
    input_name : .in,
    context_name : .ctx,
    call_mode : {pair : eval : id},
    ask_mode : {pair : form : form},
    context_access : .constant,
    cacheable : true,
}
-----
{
    body : in,
    input_name : in,
    context_name : ctx,
    call_mode : {pair : eval : id},
    ask_mode : {pair : form : form},
    context_access : constant,
    cacheable : true,
}
=====
function.represent ! function ! {
    context_access : .free,
    static : true,
}
-----
{
    context_access : free,
    static : true,
}
=====
function.context_access .function
-----
free
=====
function.context_access .function.context_access
-----
constant
=====
function.context_access .eval
-----
mutable
=====
do [f = function ! {}, function.context_access .f]
-----
mutable
=====
function.call_mode .not
-----
eval
=====
function.call_mode .eval
-----
id
=====
function.call_mode .read
-----
form
=====
do [f = function ! {}, function.call_mode .f]
-----
eval
=====
do [
    f = function ! {
        call_mode : {pair : eval : form},
    },
    function.call_mode .f
]
-----
{pair : eval : form}
=====
do [
    f = function ! {
        call_mode : {list : [eval, form, id] : form},
    },
    function.call_mode .f
]
-----
{list : [eval, form, id] : form}
=====
do [
    f = function ! {
        call_mode : {map : {a : eval, b : id} : id : form},
    },
    function.call_mode .f
]
-----
{map : {a : eval, b : id} : id : form}
=====
do [
    f = function ! {
        ask_mode : {map : {a : form} : eval : id},
    },
    function.ask_mode .f
]
-----
{map : {a : form} : eval : id}
=====
do [f = function ! {cacheable : false}, function.is_cacheable .f]
-----
false
=====
function.is_cacheable .not
-----
true
=====
function.is_primitive .not
-----
true
=====
do [f = function ! {}, function.is_primitive .f]
-----
false
=====
function.is_extension .not
-----
false
=====
function.is_static .not
-----
true
=====
do [f = function ! {}, function.is_static .f]
-----
false
=====
function.id .not
-----
not
=====
do [neg = not, function.id .neg]
-----
not
=====
do [f = function ! {body : i}, function.body .f]
-----
i
=====
do [
    ctx = context ! {variables : {a : 1}},
    f = function ! {prelude : ctx},
    (function.prelude .f) == .ctx
]
-----
true
=====
do [f = function ! {}, function.input_name .f]
-----
i
=====
do [f = function ! {context_access : .constant}, function.context_name .f]
-----
c
