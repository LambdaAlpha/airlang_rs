+ 0
-----
_ do [a = _ any integer, a == a + 0]
-----
true
=====
- 0
-----
_ do [a = _ any integer, a == a - 0]
-----
true
=====
+ -
-----
_ do [a = _ any integer, b = _ any integer, a == <(a + b - b)]
-----
true
=====
- +
-----
_ do [a = _ any integer, b = _ any integer, a == <(a - b + b)]
-----
true
=====
+ trivial
-----
1 + 1
-----
2
=====
- trivial
-----
1 - 1
-----
0
=====
* 0
-----
_ do [a = _ any integer, 0 == a * 0]
-----
true
=====
* 1
-----
_ do [a = _ any integer, a == a * 1]
-----
true
=====
* -1
-----
_ do [a = _ any integer, 0 == a + a * 0-1]
-----
true
=====
/ 0
-----
_ do [a = _ any integer, . == a / 0]
-----
true
=====
/ 1
-----
_ do [a = _ any integer, a == a / 1]
-----
true
=====
/ -1
-----
_ do [a = _ any integer, 0 == a + a / 0-1]
-----
true
=====
0 /
-----
_ do [a = _ any integer, (a == 0) .return true, 0 == 0 / a]
-----
true
=====
0 %
-----
_ do [a = _ any integer, (a == 0) .return true, 0 == 0 % a]
-----
true
=====
% 0
-----
_ do [a = _ any integer, . == a % 0]
-----
true
=====
% 1
-----
_ do [a = _ any integer, 0 == a % 1]
-----
true
=====
% exact
-----
_ do [a = _ any integer, b = _ any integer, (b == 0) .return true, 0 == (a * b) % b]
-----
true
=====
sign(a % b) == sign(a)
-----
_ do [a = _ any integer, b = _ any integer, (b == 0) .return true, (0 <= a) == 0 <= a % b]
-----
true
=====
abs(a % b) < abs(b)
-----
_ do [a = _ any integer, b = _ any integer, (b == 0) .return true, (0 <= b) == 0 <= b + a % b]
-----
true
=====
* /
-----
_ do [a = _ any integer, b = _ any integer, (b == 0) .return true, a == <(a * b / b)]
-----
true
=====
exact / *
-----
_ do [a = _ any integer, b = _ any integer, (b == 0) .return true, c = a * b, c == <(c / b * b)]
-----
true
=====
inexact / abs(a) > abs(a / b * b)
-----
_ do [a = _ any integer, b = _ any integer, (b == 0) .return true, (0 <= a) == 0 <= a - a / b * b]
-----
true
=====
a == b * a / b + a % b
-----
_ do [a = _ any integer, b = _ any integer, (b == 0) .return true, a == (b * a / b) + a % b]
-----
true
=====
* trivial
-----
2 * 3
-----
6
=====
/ exact
-----
6 / 3
-----
2
=====
/ inexact smaller
-----
5 / 3
-----
1
=====
/ inexact bigger
-----
7 / 3
-----
2
=====
/ inexact negative 1
-----
7 / 0-3
-----
0-2
=====
/ inexact negative 2
-----
0-7 / 3
-----
0-2
=====
/ inexact negative 3
-----
0-7 / 0-3
-----
2
=====
% exact
-----
6 % 3
-----
0
=====
% inexact smaller
-----
5 % 3
-----
2
=====
% inexact bigger
-----
7 % 3
-----
1
=====
% inexact negative 1
-----
7 % 0-3
-----
1
=====
% inexact negative 2
-----
0-7 % 3
-----
0-1
=====
% inexact negative 3
-----
0-7 % 0-3
-----
0-1
=====
a /% b == (a / b) : (a % b)
-----
_ do [a = _ any integer, b = _ any integer, (b == 0) .return true, (a /% b) == (a / b) : (a % b)]
-----
true
=====
/% both positive
-----
7 /% 3
-----
2 : 1
=====
/% positive negative
-----
7 /% 0-3
-----
0-2 : 1
=====
/% negative positive
-----
0-7 /% 3
-----
0-2 : 0-1
=====
/% negative negative
-----
0-7 /% 0-3
-----
2 : 0-1
=====
order relations
-----
_ do [
    a = _ any integer,
    b = _ any integer,
    c = _ any integer,
    [
        (a > b) == (b < a),
        (a < b) == (b > a),
        (a >= b) == (b <= a),
        (a <= b) == (b >= a),
        (a < b) xor (b <= a),
        (a <= b) xor (b < a),
        (a > b) xor (b >= a),
        (a >= b) xor (b > a),
        (a < b) or (a == b) or (a > b),
        (a <> b) == (a < b) or (a > b),
        (a < b) == ((a + c) < (b + c)),
    ]
]
-----
[true, true, true, true, true, true, true, true, true, true, true]
=====
order trivial
-----
(0 < 1) and (0 <= 1) and (1 <= 1) and (0 <> 1) and (2 > 1) and (2 >= 1) and (2 >= 2) and (2 == 2)
-----
true
