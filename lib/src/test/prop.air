;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    proposition.input p
]
-----
1
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    proposition.output p
]
-----
2
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    (proposition.function p) -== not
]
-----
't
=====
;[
    $map = (function {
        body : input,
        input_mode : {map : ('u : 't)},
    }),
    m = ($map {
        function : not,
        input : 't,
        output : 'f,
    }),
    m ==- (proposition.represent (proposition m))
]
-----
't
=====
;[
    m = (proposition.represent (proposition.prove (not 't))),
    $map = (function {
        body : input,
        input_mode : {map : ('u : 't)},
    }),
    expected = ($map {
        function : not,
        input : 't,
        output : 'f,
        proved : 't,
    }),
    m === expected
]
-----
't
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    ((type_of p) -=- ('u proposition)) and ((proposition.proved p) -=- 'f)
]
-----
't
