;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    proposition.input p
]
-----
1
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    proposition.output p
]
-----
2
=====
;[
    p = (proposition {
        function : ===,
        input : 1,
        output : 1,
        context : ('u context {a : 2}),
    }),
    ctx = (proposition.before p),
    ctx .. (read a)
]
-----
2
=====
;[
    p = (proposition {
        function : ===,
        input : 1,
        output : 1,
        context : ('u context {a : 2}),
    }),
    ctx = (proposition.after p),
    ctx .. (read a)
]
-----
2
=====
;[
    p = (proposition {
        function : =,
        input : 1,
        output : 1,
        before : ('u context {a : 2}),
        after : ('u context {a : 3}),
    }),
    ctx = (proposition.before p),
    ctx .. (read a)
]
-----
2
=====
;[
    p = (proposition {
        function : =,
        input : 1,
        output : 1,
        before : ('u context {a : 2}),
        after : ('u context {a : 3}),
    }),
    ctx = (proposition.after p),
    ctx .. (read a)
]
-----
3
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    (proposition.function p) -== not
]
-----
't
=====
;[
    $map = (function {
        body : input,
        input_mode : {map : ('u : 't)},
    }),
    m = ($map {
        function : not,
        input : 't,
        output : 'f,
    }),
    m ==- (proposition.represent (proposition m))
]
-----
't
=====
;[
    $map = (function {
        body : input,
        input_mode : {map : ('u : 't)},
    }),
    m = ($map {
        function : ===,
        input : 't,
        output : 'f,
        context : ('u context {}),
    }),
    m ==- (proposition.represent (proposition m))
]
-----
't
=====
;[
    $map = (function {
        body : input,
        input_mode : {map : ('u : 't)},
    }),
    m = ($map {
        function : =,
        input : 't,
        output : 'f,
        before : ('u context {}),
        after : ('u context {}),
    }),
    m ==- (proposition.represent (proposition m))
]
-----
't
=====
;[
    m = (proposition.represent (theorem {
        function : not,
        input : 't,
    })),
    $map = (function {
        body : input,
        input_mode : {map : ('u : 't)},
    }),
    expected = ($map {
        function : not,
        input : 't,
        output : 'f,
        truth : 't,
    }),
    m === expected
]
-----
't
=====
;[
    m = (proposition.represent (theorem {
        function : ===,
        input : ('u (a : b)),
        context : ('u context {a : 1, b : 2}),
    })),
    $map = (function {
        body : input,
        input_mode : {map : ('u : 't)},
    }),
    expected = ($map {
        function : ===,
        input : ('u (a : b)),
        output : 'f,
        context : ('u context {a : 1, b : 2}),
        truth : 't,
    }),
    m === expected
]
-----
't
=====
;[
    m = (proposition.represent (theorem {
        function : =,
        input : (('u a) : 1),
        before : ('u context {}),
    })),
    $map = (function {
        body : input,
        input_mode : {map : ('u : 't)},
    }),
    expected = ($map {
        function : =,
        input : (('u a) : 1),
        output : 'u,
        before : ('u context {}),
        after : ('u context {a : 1}),
        truth : 't,
    }),
    m === expected
]
-----
't
=====
;[
    p = (proposition {
        function : not,
        input : 1,
        output : 2,
    }),
    ((type_of p) -=- ('u proposition)) and ((proposition.truth p) -=- 'u)
]
-----
't
