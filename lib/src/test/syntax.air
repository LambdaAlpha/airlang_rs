parse generate
-----
do [
    atom = [.unit, .bit, .symbol, .text, .integer, .number, .byte],
    composite = [':', ';', '!', '?'],
    i = 3 + (any ; integer) % 4,
    a = atom list.get i,
    (any ; bit) loop (any ; bit) ? [
        i = 3 + (any ; integer) % 4,
        b = atom list.get i,
        i = (4 + (any ; integer) % 4) % 4,
        c = composite list.get i,
        a = call.apply ; c ';' a : b,
    ] : (any ; bit) ? [
        i = 3 + (any ; integer) % 4,
        b = atom list.get i,
        a = [a, b],
    ] : [
        i = 3 + (any ; integer) % 4,
        b = atom list.get i,
        a = {a : b},
    ],
    a1 = syntax.parse ; syntax.generate ; a,
    a == a1
]
-----
true
=====
parse
-----
syntax.parse "[1, 2]"
-----
[1, 2]
=====
parse no eval
-----
do [a = 1, syntax.parse "a"]
-----
a
=====
parse text
-----
syntax.parse "\"1\""
-----
"1"
=====
syntax.parse equiv
-----
syntax.parse "equiv(1)"
-----
equiv(1)
=====
generate text
-----
syntax.generate "1"
-----
"\"1\""
=====
generate equiv
-----
syntax.generate ; equiv(1)
-----
"equiv(1)"
