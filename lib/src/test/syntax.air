parse generate
-----
_ do [
    atom = [.unit, .bit, .symbol, .text, .integer, .number, .byte],
    i = 3 + (_ any integer) % 4,
    a = atom ; list.get i,
    (_ any bit) loop (_ any bit) ? [
        i = 3 + (_ any integer) % 4,
        b = atom ; list.get i,
        i = (4 + (_ any integer) % 4) % 4,
        a = (_ any bit) ? (a : b) : _ form@ _ a b,
    ] : (_ any bit) ? [
        i = 3 + (_ any integer) % 4,
        b = atom ; list.get i,
        a = [a, b],
    ] : [
        i = 3 + (_ any integer) % 4,
        b = atom ; list.get i,
        a = {a : b},
    ],
    a1 = _ syntax.parse _ syntax.generate a,
    a == a1
]
-----
true
=====
parse
-----
_ syntax.parse "[1, 2]"
-----
[1, 2]
=====
parse no eval
-----
_ do [a = 1, _ syntax.parse "a"]
-----
a
=====
parse text
-----
_ syntax.parse "\`1\`"
-----
"1"
=====
generate text
-----
_ syntax.generate "1"
-----
"\`1\`"
