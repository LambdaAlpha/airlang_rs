parse generate
-----
do [
    atom = [.unit, .bit, .symbol, .text, .integer, .number, .byte],
    composite = [':', ';', '!', '?'],
    i = 3 + (any ; integer) % 4,
    a = atom list.get i,
    (any ; bit) loop (any ; bit) if [
        i = 3 + (any ; integer) % 4,
        b = atom list.get i,
        i = (4 + (any ; integer) % 4) % 4,
        c = composite list.get i,
        a = call.apply ; c ';' a : b,
    ] : (any ; bit) if [
        i = 3 + (any ; integer) % 4,
        b = atom list.get i,
        a = [a, b],
    ] : [
        i = 3 + (any ; integer) % 4,
        b = atom list.get i,
        a = {a : b},
    ],
    a1 = parse ; generate ; a,
    a == a1
]
-----
true
=====
parse
-----
parse "[1, 2]"
-----
[1, 2]
=====
parse no eval
-----
do [a = 1, parse "a"]
-----
a
=====
parse text
-----
parse "\"1\""
-----
"1"
=====
parse optimize
-----
parse "!(1)"
-----
!(1)
=====
generate text
-----
generate "1"
-----
"\"1\""
=====
generate optimize
-----
generate ; !(1)
-----
"!(1)"
